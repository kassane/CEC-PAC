<?xml version="1.0" encoding="UTF-8"?>
<!--
Copyright (c) 2017 Microchip Technology Inc.

 SPDX-License-Identifier: Apache-2.0

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->
<device xmlns:xs="http://www.w3.org/2001/XMLSchema-instance"
        schemaVersion="1.1"
        xs:noNamespaceSchemaLocation="CMSIS-SVD.xsd">
   <vendor>Microchip Technology</vendor>
   <vendorID>MCHP</vendorID>
   <name>CEC1712H_B2_SX</name>
   <series>CEC1712H_B2_SX</series>
   <version>0</version>
   <description>Microchip CEC1712H_B2_SX Microcontroller</description>
   <cpu>
      <name>CM4</name>
      <revision>r1p0</revision>
      <endian>little</endian>
      <mpuPresent>false</mpuPresent>
      <fpuPresent>false</fpuPresent>
      <nvicPrioBits>3</nvicPrioBits>
      <vendorSystickConfig>false</vendorSystickConfig>
   </cpu>
   <addressUnitBits>8</addressUnitBits>
   <width>32</width>
   <size>32</size>
   <access>read-write</access>
   <resetValue>0x00000000</resetValue>
   <resetMask>0xFFFFFFFF</resetMask>
   <peripherals>
      <peripheral>
         <name>PCR</name>
         <version>1001.0</version>
         <description>The Power, Clocks, and Resets (PCR) Section identifies clock sources, and reset inputs to the chip</description>
         <groupName>PCR</groupName>
         <prependToName>PCR_</prependToName>
         <baseAddress>0x40080100</baseAddress>
         <addressBlock>
            <offset>0</offset>
            <size>0x88</size>
            <usage>registers</usage>
         </addressBlock>
         <registers>
            <register>
               <name>SYS_SLP_CTRL</name>
               <description>System Sleep Control</description>
               <addressOffset>0x0</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>SLP_MOD</name>
                     <description>Selects the System Sleep mode</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>TEST</name>
                     <description>Test bit</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>SLP_ALL</name>
                     <description>Initiates the System Sleep mode</description>
                     <bitOffset>3</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>PROC_CLK_CTRL</name>
               <description>Processor Clock Control Register [7:0] Processor Clock Divide Value (PROC_DIV)</description>
               <addressOffset>0x4</addressOffset>
               <size>32</size>
               <resetValue>0x00000004</resetValue>
               <fields>
                  <field>
                     <name>DIV</name>
                     <description>Selects the EC clock rate</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>8</bitWidth>
                     <enumeratedValues>
                        <name>DIVSelect</name>
                        <enumeratedValue>
                           <name>DIVIDE_BY_1</name>
                           <description>1: divide 48 MHz Ring Oscillator by 1</description>
                           <value>0x1</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>DIVIDE_BY_3</name>
                           <description>3: divide 48 MHz Ring Oscillator by 3</description>
                           <value>0x3</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>DIVIDE_BY_4</name>
                           <description>4: divide 48 MHz Ring Oscillator by 4</description>
                           <value>0x4</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>DIVIDE_BY_16</name>
                           <description>16: divide 48 MHz Ring Oscillator by 16</description>
                           <value>0x10</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>DIVIDE_BY_48</name>
                           <description>48: divide 48 MHz Ring Oscillator by 48</description>
                           <value>0x30</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
               </fields>
            </register>
            <register>
               <name>SLOW_CLK_CTRL</name>
               <description>Configures the EC_CLK clock domain</description>
               <addressOffset>0x8</addressOffset>
               <size>32</size>
               <resetValue>0x000001E0</resetValue>
               <fields>
                  <field>
                     <name>DIV</name>
                     <description>SLOW_CLOCK_DIVIDE. n=Divide by n; 0=Clock off</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>10</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>OSC_ID</name>
               <description>Oscillator ID Register</description>
               <addressOffset>0xC</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>TEST</name>
                     <description>Test bits</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>8</bitWidth>
                  </field>
                  <field>
                     <name>PLL_LOCK</name>
                     <description>PLL Lock Status</description>
                     <bitOffset>8</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>PWR_RST_STS</name>
               <description>PCR Power Reset Status Register</description>
               <addressOffset>0x10</addressOffset>
               <size>32</size>
               <resetValue>0x00000050</resetValue>
               <fields>
                  <field>
                     <name>VCC_PWRGD_STS</name>
                     <description>Indicates the status of VCC_PWRGD. 0 = PWRGD not asserted. 1 = PWRGD asserte.</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>RST_H_STS</name>
                     <description>Indicates the status of RESET_VCC. 0 = reset active. 1 = reset not active.</description>
                     <bitOffset>3</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>RST_VTR_STS</name>
                     <description>Indicates the status of RESET_VTR. 0 = reset active. 1 = reset not active.(R/W1C)</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>VBAT_RST_STS</name>
                     <description>VBAT reset status 0 = No reset occurred while VTR was off or since the last time this bit was cleared. 1 = A reset occurred.(R/WC)</description>
                     <bitOffset>5</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>RST_SYS_STS</name>
                     <description>Indicates the status of RESET_SYS.(R/W1C)\n                0 = No reset occurred since the last time this bit was cleared.\n                1 = A reset occurred.</description>
                     <bitOffset>6</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>JTAG_RST_STS</name>
                     <description>Indicates status of JTAG_TRST# pin.\n                0 = No JTAG reset occurred since the last time this bit was cleared.\n                1 = A reset occurred because of a JTAG command.</description>
                     <bitOffset>7</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>WDT_EVENT</name>
                     <description>Indicates that a WDT_EVENT happened. (R/W1C)\n                0 = Not active.\n                1 = A WDT_EVENT occured.</description>
                     <bitOffset>8</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>ACTIVE_32K</name>
                     <description>ACTIVE_32K (32K_ACTIVE)</description>
                     <bitOffset>10</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>PCICLK_ACTIVE</name>
                     <description>PCICLK_ACTIVE (PCICLK_ACTIVE)</description>
                     <bitOffset>11</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>PWR_RST_CTRL</name>
               <description>Power Reset Control Register</description>
               <addressOffset>0x14</addressOffset>
               <size>32</size>
               <resetValue>0x00000101</resetValue>
               <fields>
                  <field>
                     <name>PWR_INV</name>
                     <description>Used by FW to control internal RESET_VCC signal function and external PWROK pin. This bit is read-only when VCC_PWRGD\n      is de-asserted low.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>H_RST_SEL</name>
                     <description>Determines what generates the internal platform reset signal. 1=LRESET# pin; 0=eSPI PLTRST# VWire</description>
                     <bitOffset>8</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>SYS_RST</name>
               <description>System Reset Register</description>
               <addressOffset>0x18</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>SOFT_SYS_RST</name>
                     <description>A write of a 1 forces an assertion of the RESET_SYS reset signal, resetting the device. A write of 0 has no effect.</description>
                     <bitOffset>8</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>SLP_EN_0</name>
               <description>Sleep Enable 0 Register</description>
               <addressOffset>0x30</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>OTP_SLP_EN</name>
                     <description>OTP Enable</description>
                     <bitOffset>1</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>SLP_EN_1</name>
               <description>Sleep Enable 1 Register</description>
               <addressOffset>0x34</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>INT_SLP_EN</name>
                     <description>Interrupt Sleep Enable</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>TACH0_SLP_EN</name>
                     <description>TACH0 Sleep Enable (TACH0_SLP_EN)</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>PWM0_SLP_EN</name>
                     <description>PWM0 Sleep Enable (PWM0_SLP_EN)</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>PMC_SLP_EN</name>
                     <description>PMC Sleep Enable (PMC_SLP_EN)</description>
                     <bitOffset>5</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>DMA_SLP_EN</name>
                     <description>DMA Sleep Enable (DMA_SLP_EN)</description>
                     <bitOffset>6</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>TFDP_SLP_EN</name>
                     <description>TFDP Sleep Enable (TFDP_SLP_EN)</description>
                     <bitOffset>7</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>PROC_SLP_EN</name>
                     <description>PROCESSOR Sleep Enable (PROCESSOR_SLP_EN)</description>
                     <bitOffset>8</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>SMB0_SLP_EN</name>
                     <description>SMB0 Sleep Enable (SMB0_SLP_EN)</description>
                     <bitOffset>10</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>TACH2_SLP_EN</name>
                     <description>TACH2 Sleep Enable (TACH2_SLP_EN)</description>
                     <bitOffset>12</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>PWM1_SLP_EN</name>
                     <description>PWM1 Sleep Enable (PWM1_SLP_EN)</description>
                     <bitOffset>20</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>PWM4_SLP_EN</name>
                     <description>PWM4 Sleep Enable (PWM4_SLP_EN)</description>
                     <bitOffset>23</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>PWM6_SLP_EN</name>
                     <description>PWM6 Sleep Enable (PWM6_SLP_EN)</description>
                     <bitOffset>25</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>PWM7_SLP_EN</name>
                     <description>PWM7 Sleep Enable (PWM7_SLP_EN)</description>
                     <bitOffset>26</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>EC_REG_BANK_SLP_EN</name>
                     <description>EC_REG_BANK Sleep Enable (EC_REG_BANK_SLP_EN)</description>
                     <bitOffset>29</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>TMR16_0_SLP_EN</name>
                     <description>TIMER16_0 Sleep Enable (TIMER16_0_SLP_EN)</description>
                     <bitOffset>30</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>TMR16_1_SLP_EN</name>
                     <description>TIMER16_1 Sleep Enable (TIMER16_1_SLP_EN)</description>
                     <bitOffset>31</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>SLP_EN_2</name>
               <description>Sleep Enable 2 Register</description>
               <addressOffset>0x38</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>UART0_SLP_EN</name>
                     <description>UART 0 Sleep Enable</description>
                     <bitOffset>1</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>UART1_SLP_EN</name>
                     <description>UART 1 Sleep Enable</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>SLP_EN_3</name>
               <description>Sleep Enable 3 Register</description>
               <addressOffset>0x3C</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>ADC_SLP_EN</name>
                     <description>ADC Sleep Enable (ADC_SLP_EN)</description>
                     <bitOffset>3</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>PS2_0_SLP_EN</name>
                     <description>PS2_0 Sleep Enable (PS2_0_SLP_EN)</description>
                     <bitOffset>5</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>HTM_0_SLP_EN</name>
                     <description>Hibernation Timer 0 Sleep Enable (HTM_0_SLP_EN)</description>
                     <bitOffset>10</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>SMB1_SLP_EN</name>
                     <description>SMB1 Sleep Enable (SMB1_SLP_EN)</description>
                     <bitOffset>13</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>SMB2_SLP_EN</name>
                     <description>SMB2 Sleep Enable (SMB2_SLP_EN)</description>
                     <bitOffset>14</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>SMB3_SLP_EN</name>
                     <description>SMB3 Sleep Enable (SMB3_SLP_EN)</description>
                     <bitOffset>15</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>LED0_SLP_EN</name>
                     <description>LED0 Sleep Enable (LED0_SLP_EN)</description>
                     <bitOffset>16</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>SMB4_SLP_EN</name>
                     <description>SMB4 Sleep Enable (SMB4_SLP_EN)</description>
                     <bitOffset>20</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>TMR32_0_SLP_EN</name>
                     <description>TIMER32_0 Sleep Enable (TIMER32_0_SLP_EN)</description>
                     <bitOffset>23</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>TMR32_1_SLP_EN</name>
                     <description>TIMER32_1 Sleep Enable (TIMER32_1_SLP_EN)</description>
                     <bitOffset>24</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>PKE_SLP_EN</name>
                     <description>PKE Sleep Enable</description>
                     <bitOffset>26</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>RNG_SLP_EN</name>
                     <description>RNG Sleep Enable</description>
                     <bitOffset>27</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>AES_HASH_SLP_EN</name>
                     <description>AES_HASH Sleep Enable</description>
                     <bitOffset>28</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>HTM_1_SLP_EN</name>
                     <description>Hibernation TIMER 1 Sleep Enable (HTM_1_SLP_EN)</description>
                     <bitOffset>29</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>CCT_SLP_EN</name>
                     <description>Capture Compare Timer Sleep Enable (CCTIMER_SLP_EN)</description>
                     <bitOffset>30</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>SLP_EN_4</name>
               <description>Sleep Enable 4 Register</description>
               <addressOffset>0x40</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>QMSPI_SLP_EN</name>
                     <description>Quad Master SPI Sleep Enable</description>
                     <bitOffset>8</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>CLK_REQ_0</name>
               <description>Clock Required 0 Register</description>
               <addressOffset>0x50</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>JTAG_STAP_CLK_REQ</name>
                     <description>JTAG STAP Enable</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>OTP_CLK_REQ</name>
                     <description>OTP Enable</description>
                     <bitOffset>1</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>CLK_REQ_1</name>
               <description>Clock Required 1 Register</description>
               <addressOffset>0x54</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>INT_CLK_REQ</name>
                     <description>Interrupt Clock Required</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>TACH0_CLK_REQ</name>
                     <description>TACH0 Clock Required (TACH0_CLK_REQ)</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>PWM0_CLK_REQ</name>
                     <description>PWM0 Clock Required (PWM0_CLK_REQ)</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>PMC_CLK_REQ</name>
                     <description>PMC Clock Required (PMC_CLK_REQ)</description>
                     <bitOffset>5</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>DMA_CLK_REQ</name>
                     <description>DMA Clock Required (DMA_CLK_REQ)</description>
                     <bitOffset>6</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>TFDP_CLK_REQ</name>
                     <description>TFDP Clock Required (TFDP_CLK_REQ)</description>
                     <bitOffset>7</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>PROC_CLK_REQ</name>
                     <description>PROCESSOR Clock Required (PROCESSOR_CLK_REQ)</description>
                     <bitOffset>8</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>WDT_CLK_REQ</name>
                     <description>WDT Clock Required (WDT_CLK_REQ)</description>
                     <bitOffset>9</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>SMB0_CLK_REQ</name>
                     <description>SMB0 Clock Required (SMB0_CLK_REQ)</description>
                     <bitOffset>10</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>TACH2_CLK_REQ</name>
                     <description>TACH2 Clock Required (TACH2_CLK_REQ)</description>
                     <bitOffset>12</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>PWM1_CLK_REQ</name>
                     <description>PWM1 Clock Required (PWM1_CLK_REQ)</description>
                     <bitOffset>20</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>PWM4_CLK_REQ</name>
                     <description>PWM4 Clock Required (PWM4_CLK_REQ)</description>
                     <bitOffset>23</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>PWM6_CLK_REQ</name>
                     <description>PWM6 Clock Required (PWM6_CLK_REQ)</description>
                     <bitOffset>25</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>PWM7_CLK_REQ</name>
                     <description>PWM7 Clock Required (PWM7_CLK_REQ)</description>
                     <bitOffset>26</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>EC_REG_BANK_CLK_REQ</name>
                     <description>EC_REG_BANK Clock Required (EC_REG_BANK_CLK_REQ)</description>
                     <bitOffset>29</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>TMR16_0_CLK_REQ</name>
                     <description>TIMER16_0 Clock Required (TIMER16_0_CLK_REQ)</description>
                     <bitOffset>30</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>TMR16_1_CLK_REQ</name>
                     <description>TIMER16_1 Clock Required (TIMER16_1_CLK_REQ)</description>
                     <bitOffset>31</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>CLK_REQ_2</name>
               <description>Clock Required 2 Register</description>
               <addressOffset>0x58</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>IMAP_CLK_REQ</name>
                     <description>IMAP Clock Required (IMAP_CLK_REQ)</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>UART0_CLK_REQ</name>
                     <description>UART 0 Clock Required</description>
                     <bitOffset>1</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>UART1_CLK_REQ</name>
                     <description>UART 1 Clock Required</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>GLBL_CFG_CLK_REQ</name>
                     <description>GLBL_CFG (GLBL_CFG_CLK_REQ)</description>
                     <bitOffset>12</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>RTC_CLK_REQ</name>
                     <description>RTC Clock Required (RTC_CLK_REQ)</description>
                     <bitOffset>18</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>CLK_REQ_3</name>
               <description>Clock Required 3 Register</description>
               <addressOffset>0x5C</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>ADC_CLK_REQ</name>
                     <description>ADC Clock Required (ADC_CLK_REQ)</description>
                     <bitOffset>3</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>PS2_0_CLK_REQ</name>
                     <description>PS2_0 Clock Required (PS2_0_CLK_REQ)</description>
                     <bitOffset>5</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>HTM0_CLK_REQ</name>
                     <description>Hibernation TIMER 0 Clock Required (HTM_0_CLK_REQ)</description>
                     <bitOffset>10</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>SMB1_CLK_REQ</name>
                     <description>SMB1 Clock Required (SMB1_CLK_REQ)</description>
                     <bitOffset>13</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>SMB2_CLK_REQ</name>
                     <description>SMB2 Clock Required (SMB2_CLK_REQ)</description>
                     <bitOffset>14</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>SMB3_CLK_REQ</name>
                     <description>SMB3 Clock Required (SMB3_CLK_REQ)</description>
                     <bitOffset>15</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>LED0_CLK_REQ</name>
                     <description>LED0 Clock Required (LED0_CLK_REQ)</description>
                     <bitOffset>16</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>SMB_4_CLK_REQ</name>
                     <description>SMB 4 Clock Required (SMB_4_CLK_REQ)</description>
                     <bitOffset>20</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>TMR32_0_CLK_REQ</name>
                     <description>TIMER32_0 Clock Required (TIMER32_0_CLK_REQ)</description>
                     <bitOffset>23</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>TMR32_1_CLK_REQ</name>
                     <description>TIMER32_1 Clock Required (TIMER32_1_CLK_REQ)</description>
                     <bitOffset>24</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>PKE_CLK_REQ</name>
                     <description>PKE Clock Required</description>
                     <bitOffset>26</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>RNG_CLK_REQ</name>
                     <description>RNG Clock Required</description>
                     <bitOffset>27</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>AES_HASH_CLK_REQ</name>
                     <description>AES_HASH Clock Required</description>
                     <bitOffset>28</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>HTM_1_CLK_REQ</name>
                     <description>Hibernation TIMER 1 Clock Required (HTM_1_CLK_REQ)</description>
                     <bitOffset>29</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>CCTIMER_CLK_REQ</name>
                     <description>Capture Compare Timer Clock Required (CCTIMER_CLK_REQ)</description>
                     <bitOffset>30</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>CLK_REQ_4</name>
               <description>Clock Required 4 Register</description>
               <addressOffset>0x60</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>RTOS_CLK_REQ</name>
                     <description>RTOS Clock Required (RTOS_CLK_REQ)</description>
                     <bitOffset>6</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>QMSPI_CLK_REQ</name>
                     <description>Quad Master SPI Clock Required</description>
                     <bitOffset>8</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>RST_EN_0</name>
               <description>Reset Enable 0 Register</description>
               <addressOffset>0x70</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>OTP_RST_EN</name>
                     <description>OTP Reset Enable</description>
                     <bitOffset>1</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>RST_EN_1</name>
               <description>Reset Enable 1 Register</description>
               <addressOffset>0x74</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>INT_RST_EN</name>
                     <description>Interrupt Reset Enable</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>TACH0_RST_EN</name>
                     <description>TACH0 Reset Enable (TACH0_RST_EN)</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>PWM0_RST_EN</name>
                     <description>PWM0 Reset Enable (PWM0_RST_EN)</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>DMA_RST_EN</name>
                     <description>DMA Reset Enable (DMA_RST_EN)</description>
                     <bitOffset>6</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>TFDP_RST_EN</name>
                     <description>TFDP Reset Enable (TFDP_RST_EN)</description>
                     <bitOffset>7</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>WDT_RST_EN</name>
                     <description>WDT Reset Enable (WDT_RST_EN)</description>
                     <bitOffset>9</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>SMB0_RST_EN</name>
                     <description>SMB0 Reset Enable (SMB0_RST_EN)</description>
                     <bitOffset>10</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>TACH2_RST_EN</name>
                     <description>TACH2 Reset Enable (TACH2_RST_EN)</description>
                     <bitOffset>12</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>PWM1_RST_EN</name>
                     <description>PWM1 Reset Enable (PWM1_RST_EN)</description>
                     <bitOffset>20</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>PWM4_RST_EN</name>
                     <description>PWM4 Reset Enable (PWM4_RST_EN)</description>
                     <bitOffset>23</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>PWM6_RST_EN</name>
                     <description>PWM6 Reset Enable (PWM6_RST_EN)</description>
                     <bitOffset>25</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>PWM7_RST_EN</name>
                     <description>PWM7 Reset Enable (PWM7_RST_EN)</description>
                     <bitOffset>26</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>TMR16_0_RST_EN</name>
                     <description>TIMER16_0 Reset Enable (TIMER16_0_RST_EN)</description>
                     <bitOffset>30</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>TMR16_1_RST_EN</name>
                     <description>TIMER16_1 Reset Enable (TIMER16_1_RST_EN)</description>
                     <bitOffset>31</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>RST_EN_2</name>
               <description>Reset Enable 2 Register</description>
               <addressOffset>0x78</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>IMAP_RST_EN</name>
                     <description>IMAP Reset Enable (IMAP_RST_EN)</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>UART0_RST_EN</name>
                     <description>UART 0 Reset Enable</description>
                     <bitOffset>1</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>UART1_RST_EN</name>
                     <description>UART 1 Reset Enable</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>ACPI_EC0_RST_EN</name>
                     <description>ACPI EC 0 Reset Enable (ACPI_EC_0_RST_EN)</description>
                     <bitOffset>13</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>ACPI_EC1_RST_EN</name>
                     <description>ACPI EC 1 Reset Enable (ACPI_EC_1_RST_EN)</description>
                     <bitOffset>14</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>ACPI_PM1_RST_EN</name>
                     <description>ACPI PM1 Reset Enable (ACPI_PM1_RST_EN)</description>
                     <bitOffset>15</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>MBX_RST_EN</name>
                     <description>Mailbox Reset Enable (MBX_RST_EN)</description>
                     <bitOffset>17</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>RTC_RST_EN</name>
                     <description>RTC Reset Enable (RTC_RST_EN)</description>
                     <bitOffset>18</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>SCRATCH_32_RST_EN</name>
                     <description>SCRATCH 32 Reset Enable</description>
                     <bitOffset>20</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>ACPI_EC_2_RST_EN</name>
                     <description>ACPI EC 2 Reset Enable (ACPI_EC_2_RST_EN)</description>
                     <bitOffset>21</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>ACPI_EC_3_RST_EN</name>
                     <description>ACPI EC 3 Reset Enable (ACPI_EC_3_RST_EN)</description>
                     <bitOffset>22</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>PORT_80_0_RST_EN</name>
                     <description>Port 80 0 Reset Enable</description>
                     <bitOffset>25</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>PORT_80_1_RST_EN</name>
                     <description>Port 80 1 Reset Enable</description>
                     <bitOffset>26</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>RST_EN_3</name>
               <description>Reset Enable 3 Register</description>
               <addressOffset>0x7C</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>ADC_RST_EN</name>
                     <description>ADC Reset Enable (ADC_RST_EN)</description>
                     <bitOffset>3</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>PS2_0_RST_EN</name>
                     <description>PS2_0 Reset Enable (PS2_0_RST_EN)</description>
                     <bitOffset>5</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>HTM_0_RST_EN</name>
                     <description>Hibernation TIMER 0 Reset Enable (HTM_0_RST_EN)</description>
                     <bitOffset>10</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>SMB1_RST_EN</name>
                     <description>SMB1 Reset Enable (SMB1_RST_EN)</description>
                     <bitOffset>13</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>SMB2_RST_EN</name>
                     <description>SMB2 Reset Enable (SMB2_RST_EN)</description>
                     <bitOffset>14</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>SMB3_RST_EN</name>
                     <description>SMB3 Reset Enable (SMB3_RST_EN)</description>
                     <bitOffset>15</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>LED0_RST_EN</name>
                     <description>LED0 Reset Enable (LED0_RST_EN)</description>
                     <bitOffset>16</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>SMB_4_RST_EN</name>
                     <description>SMB 4 Reset Enable (SMB_4_RST_EN)</description>
                     <bitOffset>20</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>TMR32_0_RST_EN</name>
                     <description>TIMER32_0 Reset Enable (TIMER32_0_RST_EN)</description>
                     <bitOffset>23</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>TMR32_1_RST_EN</name>
                     <description>TIMER32_1 Reset Enable (TIMER32_1_RST_EN)</description>
                     <bitOffset>24</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>PKE_RST_EN</name>
                     <description>PKE Reset Enable</description>
                     <bitOffset>26</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>RNG_RST_EN</name>
                     <description>RNG Reset Enable</description>
                     <bitOffset>27</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>AES_HASH_RST_EN</name>
                     <description>AES_HASH Reset Enable</description>
                     <bitOffset>28</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>HTM_1_RST_EN</name>
                     <description>Hibernation TIMER 1 Reset Enable (HTM_1_RST_EN)</description>
                     <bitOffset>29</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>CCTIMER_RST_EN</name>
                     <description>Capture Compare Timer Reset Enable (CCTIMER_RST_EN)</description>
                     <bitOffset>30</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>RST_EN_4</name>
               <description>Reset Enable 4 Register</description>
               <addressOffset>0x80</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>RTOS_RST_EN</name>
                     <description>RTOS Reset Enable (RTOS_RST_EN)</description>
                     <bitOffset>6</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>QMSPI_RST_EN</name>
                     <description>Quad Master SPI Reset Enable</description>
                     <bitOffset>8</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>LOCK_REG</name>
               <description>LOCK Register</description>
               <addressOffset>0x84</addressOffset>
               <size>32</size>
               <resetValue>0xA6382D4D</resetValue>
               <fields>
                  <field>
                     <name>PCR_RST_EN_LOCK</name>
                     <description>PCR Reset Enable Lock Register.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>32</bitWidth>
                  </field>
               </fields>
            </register>
         </registers>
      </peripheral>
      <peripheral>
         <name>DMA_MAIN</name>
         <version>85a1.0</version>
         <description>DMA Main Registers</description>
         <groupName>DMA_MAIN</groupName>
         <prependToName>DMA_MAIN_</prependToName>
         <baseAddress>0x40002400</baseAddress>
         <addressBlock>
            <offset>0</offset>
            <size>0x8</size>
            <usage>registers</usage>
         </addressBlock>
         <registers>
            <register>
               <name>ACTRST</name>
               <description>Soft reset the entire module. Enable the blocks operation.</description>
               <addressOffset>0x0</addressOffset>
               <size>8</size>
               <resetValue>0x00</resetValue>
               <fields>
                  <field>
                     <name>ACT</name>
                     <description>Enable the blocks operation. (R/WS)\n                1=Enable block. Each individual channel must be enabled separately.\n                0=Disable all channels.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>SOFT_RST</name>
                     <description>Soft reset the entire module. This bit is self-clearing.</description>
                     <bitOffset>1</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>DATA_PKT</name>
               <description>Debug register that has the data that is stored in the Data Packet. This data is read data from the currently active transfer source.</description>
               <addressOffset>0x4</addressOffset>
               <size>32</size>
               <access>read-only</access>
               <resetValue>0x00000000</resetValue>
            </register>
         </registers>
      </peripheral>
      <peripheral>
         <name>DMA_CHAN00</name>
         <version>85b1.0</version>
         <description>DMA Channel 00 Registers</description>
         <groupName>DMA_CHAN00</groupName>
         <prependToName>DMA_CHAN00_</prependToName>
         <baseAddress>0x40002440</baseAddress>
         <addressBlock>
            <offset>0</offset>
            <size>0x2C</size>
            <usage>registers</usage>
         </addressBlock>
         <interrupt>
            <name>GIRQ14</name>
            <value>6</value>
         </interrupt>
         <interrupt>
            <name>DMA_CH00</name>
            <value>24</value>
         </interrupt>
         <registers>
            <register>
               <name>ACTIVATE</name>
               <description>Enable this channel for operation. The DMA Main Control: Activate must also be enabled for this channel to be operational.</description>
               <addressOffset>0x0</addressOffset>
               <size>8</size>
               <resetValue>0x00</resetValue>
               <fields>
                  <field>
                     <name>CHN</name>
                     <description>Enable this channel for operation. The DMA Main Control:Activate must also be enabled for this channel to be operational.\n                  1=Enable channel(block). Each individual channel must be enabled separately.\n                  0=Disable channel(block).</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>MSTART</name>
               <description>This is the starting address for the Memory device.</description>
               <addressOffset>0x4</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>MEND</name>
               <description>This is the ending address for the Memory device.</description>
               <addressOffset>0x8</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>DSTART</name>
               <description>This is the Master Device address.</description>
               <addressOffset>0xC</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>CTRL</name>
               <description>DMA Channel N Control</description>
               <addressOffset>0x10</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>RUN</name>
                     <description>This is a control field. Note: This bit only applies to Hardware Flow Control mode.\n                  1= This channel is enabled and will service transfer requests\n                  0=This channel is disabled. All transfer requests are ignored.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>REQ</name>
                     <description>This is a status field.\n                  1= There is a transfer request from the Master Device\n                  0= There is no transfer request from the Master Device</description>
                     <bitOffset>1</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>DONE</name>
                     <description>This is a status signal. It is only valid while DMA Channel Control: Run is Enabled. \n                  This is the inverse of the DMA Channel Control: Busy field, except this is qualified with the DMA Channel Control:Run field.\n                  1=Channel is done\n                  0=Channel is not done or it is OFF</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>STS</name>
                     <description>This is a status signal. The status decode is listed in priority order with the highest priority first.                  3: Error detected by the DMA                  2: The DMA Channel is externally done, in that the Device has terminated the transfer over the Hardware Flow Control through the Port dma_term                  1: The DMA Channel is locally done, in that Memory Start Address equals Memory End Address                  0: DMA Channel Control:Run is Disabled (0x0)</description>
                     <bitOffset>3</bitOffset>
                     <bitWidth>2</bitWidth>
                     <enumeratedValues>
                        <name>STSSelect</name>
                        <enumeratedValue>
                           <name>ERROR</name>
                           <description>3: Error detected by the DMA</description>
                           <value>0x3</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>EXT_DONE</name>
                           <description>2: The DMA Channel is externally done, in that the Device has terminated the transfer over the Hardware Flow Control through the Port dma_term</description>
                           <value>0x2</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>LOC_DONE</name>
                           <description>1: The DMA Channel is locally done, in that Memory Start Address equals Memory End Address</description>
                           <value>0x1</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>DIS</name>
                           <description>0: DMA Channel Control:Run is Disabled (0x0)</description>
                           <value>0x0</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>BUSY</name>
                     <description>This is a status signal.\n                  1=The DMA Channel is busy (FSM is not IDLE)\n                  0=The DMA Channel is not busy (FSM is IDLE)</description>
                     <bitOffset>5</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>TX_DIR</name>
                     <description>This determines the direction of the DMA Transfer.\n                  1=Data Packet Read from Memory Start Address followed by Data Packet Write to Device Address\n                  0=Data Packet Read from Device Address followed by Data Packet Write to Memory Start Address</description>
                     <bitOffset>8</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>HW_FLOW_CTRL_DEV</name>
                     <description>This is the device that is connected to this channel as its Hardware Flow Control master.\n                  The Flow Control Interface is a bus with each master concatenated onto it.\n                  This selects which bus index of the concatenated Flow Control Interface bus is targeted towards this channel.\n                  The Flow Control Interface Port list is dma_req, dma_term, and dma_done.</description>
                     <bitOffset>9</bitOffset>
                     <bitWidth>7</bitWidth>
                  </field>
                  <field>
                     <name>INC_MEM_ADDR</name>
                     <description>This will enable an auto-increment to the DMA Channel Memory Address.\n                  1=Increment the DMA Channel Memory Address by DMA Channel Control:Transfer Size after every Data Packet transfer\n                  0=Do nothing</description>
                     <bitOffset>16</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>INC_DEV_ADDR</name>
                     <description>This will enable an auto-increment to the DMA Channel Device Address.\n                  1: Increment the DMA Channel Device Address by DMA Channel Control:Transfer Size after every Data Packet transfer\n                  0: Do nothing</description>
                     <bitOffset>17</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>LOCK</name>
                     <description>This is used to lock the arbitration of the Channel Arbiter on this channel once this channel is granted. Once this is locked, it will remain on the arbiter until it has completed it transfer (either the Transfer Aborted, Transfer Done or Transfer Terminated conditions).</description>
                     <bitOffset>18</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>DIS_HW_FLOW_CTRL</name>
                     <description>This will Disable the Hardware Flow Control. When disabled, any DMA Master device attempting to communicate to the DMA over the DMA Flow Control Interface (Ports: dma_req, dma_term, and dma_done) will be ignored. This should be set before using the DMA channel in Firmware Flow Control mode.</description>
                     <bitOffset>19</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>TRANS_SIZE</name>
                     <description>This is the transfer size in Bytes of each Data Packet transfer.\n                  Note: The transfer size must be a legal AMBA transfer size. Valid sizes are 1, 2 and 4 Bytes.</description>
                     <bitOffset>20</bitOffset>
                     <bitWidth>3</bitWidth>
                  </field>
                  <field>
                     <name>TRANS_GO</name>
                     <description>This is used for the Firmware Flow Control DMA transfer.</description>
                     <bitOffset>24</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>TRANS_ABORT</name>
                     <description>This is used to abort the current transfer on this DMA Channel. The aborted transfer will be forced to terminate immediately.</description>
                     <bitOffset>25</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>ISTS</name>
               <description>DMA Channel N Interrupt Status</description>
               <addressOffset>0x14</addressOffset>
               <size>8</size>
               <resetValue>0x00</resetValue>
               <fields>
                  <field>
                     <name>BUS_ERR</name>
                     <description>This is an interrupt source register. This flags when there is an Error detected over the internal 32-bit Bus.\n                  1: Error detected. (R/WC)</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>FLOW_CTRL</name>
                     <description>This is an interrupt source register. This flags when the DMA Channel has encountered a Hardware Flow Control Request\n     after the DMA Channel has completed the transfer. This means the Master Device is attempting to overflow the DMA.\n                  1=Hardware Flow Control is requesting after the transfer has completed\n                  0=No Hardware Flow Control event</description>
                     <bitOffset>1</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>DONE</name>
                     <description>This is an interrupt source register. This flags when the DMA Channel has completed a transfer successfully on its side.\n     A completed transfer is defined as when the DMA Channel reaches its limit; Memory Start Address equals Memory End Address.\n     A completion due to a Hardware Flow Control Terminate will not flag this interrupt.\n                  1=Memory Start Address equals Memory End Address\n                  0=Memory Start Address does not equal Memory End Address</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>IEN</name>
               <description>DMA CHANNEL N INTERRUPT ENABLE</description>
               <addressOffset>0x18</addressOffset>
               <size>8</size>
               <resetValue>0x00</resetValue>
               <fields>
                  <field>
                     <name>STS_EN_BUS_ERR</name>
                     <description>This is an interrupt enable for DMA Channel Interrupt:Status Bus Error.\n                  1=Enable Interrupt\n                  0=Disable Interrupt</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>STS_EN_FLOW_CTRL</name>
                     <description>This is an interrupt enable for DMA Channel Interrupt:Status Flow Control Error.\n                  1=Enable Interrupt\n                  0=Disable Interrupt</description>
                     <bitOffset>1</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>STS_EN_DONE</name>
                     <description>This is an interrupt enable for DMA Channel Interrupt:Status Done.\n                  1=Enable Interrupt\n                  0=Disable Interrupt</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>CRC_EN</name>
               <description>DMA CHANNEL N CRC ENABLE</description>
               <addressOffset>0x20</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>MODE</name>
                     <description>1=Enable the calculation of CRC-32 for DMA Channel N\n     0=Disable the calculation of CRC-32 for DMA Channel N</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>POST_TRANS</name>
                     <description>The bit enables the transfer of the calculated CRC-32 after the completion of the DMA transaction.\n     If the DMA transaction is aborted by either firmware or an internal bus error, the transfer will not occur.\n     If the target of the DMA transfer is a device and the device signaled the termination of the DMA transaction,\n     the CRC post transfer will not occur.\n     1=Enable the transfer of CRC-32 for DMA Channel N after the DMA transaction completes\n     0=Disable the automatic transfer of the CRC</description>
                     <bitOffset>1</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>CRC_DATA</name>
               <description>DMA CHANNEL N CRC DATA</description>
               <addressOffset>0x24</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>CRC</name>
                     <description>Writes to this register initialize the CRC generator. Reads from this register return the output of the\n     CRC that is calculated from the data transferred by DMA Channel N. The output of the CRC generator is bit-reversed\n     and inverted on reads, as required by the CRC-32-IEEE definition. A CRC can be accumulated across multiple DMA transactions\n     on Channel N. If it is necessary to save the intermediate CRC value, the result of the read of this register must be\n     bit-reversed and inverted before being written back to this register.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>32</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>CRC_POST_STS</name>
               <description>DMA CHANNEL N CRC POST STATUS</description>
               <addressOffset>0x28</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>CRC_DONE</name>
                     <description>This bit is set to '1b' when the CRC calculation has completed from either normal or forced termination.\n     It is cleared to '0b' when the DMA controller starts a new transfer on the channel.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>CRC_RUNNING</name>
                     <description>This bit is set to '1b' when the DMA controller starts the post-transfer transmission of the CRC.\n     It is only set when the post-transfer is enabled by the CRC_POST_TRANSFER_ENABLE field. This bit is cleared\n     to '0b' when the post-transfer completes.</description>
                     <bitOffset>1</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>CRC_DATA_DONE</name>
                     <description>This bit is set to '1b' when the DMA controller has completed the post-transfer of the CRC data.\n     This bit is cleared to '0b' when the a new DMA transfer starts.</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>CRC_DATA_READY</name>
                     <description>This bit is set to '1b' when the DMA controller is processing the post-transfer of the CRC data.\n     This bit is cleared to '0b' when the post-transfer completes.</description>
                     <bitOffset>3</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
         </registers>
      </peripheral>
      <peripheral>
         <name>DMA_CHAN01</name>
         <version>85c1.0</version>
         <description>DMA Channel 01 Registers</description>
         <groupName>DMA_CHAN01</groupName>
         <prependToName>DMA_CHAN01_</prependToName>
         <baseAddress>0x40002480</baseAddress>
         <addressBlock>
            <offset>0</offset>
            <size>0x2C</size>
            <usage>registers</usage>
         </addressBlock>
         <interrupt>
            <name>DMA_CH01</name>
            <value>25</value>
         </interrupt>
         <registers>
            <register>
               <name>ACTIVATE</name>
               <description>Enable this channel for operation. The DMA Main Control: Activate must also be enabled for this channel to be operational.</description>
               <addressOffset>0x0</addressOffset>
               <size>8</size>
               <resetValue>0x00</resetValue>
               <fields>
                  <field>
                     <name>CHN</name>
                     <description>Enable this channel for operation. The DMA Main Control:Activate must also be enabled for this channel to be operational.\n                  1=Enable channel(block). Each individual channel must be enabled separately.\n                  0=Disable channel(block).</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>MSTART</name>
               <description>This is the starting address for the Memory device.</description>
               <addressOffset>0x4</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>MEND</name>
               <description>This is the ending address for the Memory device.</description>
               <addressOffset>0x8</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>DSTART</name>
               <description>This is the Master Device address.</description>
               <addressOffset>0xC</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>CTRL</name>
               <description>DMA Channel N Control</description>
               <addressOffset>0x10</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>RUN</name>
                     <description>This is a control field. Note: This bit only applies to Hardware Flow Control mode.\n                  1= This channel is enabled and will service transfer requests\n                  0=This channel is disabled. All transfer requests are ignored.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>REQ</name>
                     <description>This is a status field.\n                  1= There is a transfer request from the Master Device\n                  0= There is no transfer request from the Master Device</description>
                     <bitOffset>1</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>DONE</name>
                     <description>This is a status signal. It is only valid while DMA Channel Control: Run is Enabled. \n                  This is the inverse of the DMA Channel Control: Busy field, except this is qualified with the DMA Channel Control:Run field.\n                  1=Channel is done\n                  0=Channel is not done or it is OFF</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>STS</name>
                     <description>This is a status signal. The status decode is listed in priority order with the highest priority first.                  3: Error detected by the DMA                  2: The DMA Channel is externally done, in that the Device has terminated the transfer over the Hardware Flow Control through the Port dma_term                  1: The DMA Channel is locally done, in that Memory Start Address equals Memory End Address                  0: DMA Channel Control:Run is Disabled (0x0)</description>
                     <bitOffset>3</bitOffset>
                     <bitWidth>2</bitWidth>
                     <enumeratedValues>
                        <name>STSSelect</name>
                        <enumeratedValue>
                           <name>ERROR</name>
                           <description>3: Error detected by the DMA</description>
                           <value>0x3</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>EXT_DONE</name>
                           <description>2: The DMA Channel is externally done, in that the Device has terminated the transfer over the Hardware Flow Control through the Port dma_term</description>
                           <value>0x2</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>LOC_DONE</name>
                           <description>1: The DMA Channel is locally done, in that Memory Start Address equals Memory End Address</description>
                           <value>0x1</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>DIS</name>
                           <description>0: DMA Channel Control:Run is Disabled (0x0)</description>
                           <value>0x0</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>BUSY</name>
                     <description>This is a status signal.\n                  1=The DMA Channel is busy (FSM is not IDLE)\n                  0=The DMA Channel is not busy (FSM is IDLE)</description>
                     <bitOffset>5</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>TX_DIR</name>
                     <description>This determines the direction of the DMA Transfer.\n                  1=Data Packet Read from Memory Start Address followed by Data Packet Write to Device Address\n                  0=Data Packet Read from Device Address followed by Data Packet Write to Memory Start Address</description>
                     <bitOffset>8</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>HW_FLOW_CTRL_DEV</name>
                     <description>This is the device that is connected to this channel as its Hardware Flow Control master.\n                  The Flow Control Interface is a bus with each master concatenated onto it.\n                  This selects which bus index of the concatenated Flow Control Interface bus is targeted towards this channel.\n                  The Flow Control Interface Port list is dma_req, dma_term, and dma_done.</description>
                     <bitOffset>9</bitOffset>
                     <bitWidth>7</bitWidth>
                  </field>
                  <field>
                     <name>INC_MEM_ADDR</name>
                     <description>This will enable an auto-increment to the DMA Channel Memory Address.\n                  1=Increment the DMA Channel Memory Address by DMA Channel Control:Transfer Size after every Data Packet transfer\n                  0=Do nothing</description>
                     <bitOffset>16</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>INC_DEV_ADDR</name>
                     <description>This will enable an auto-increment to the DMA Channel Device Address.\n                  1: Increment the DMA Channel Device Address by DMA Channel Control:Transfer Size after every Data Packet transfer\n                  0: Do nothing</description>
                     <bitOffset>17</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>LOCK</name>
                     <description>This is used to lock the arbitration of the Channel Arbiter on this channel once this channel is granted. Once this is locked, it will remain on the arbiter until it has completed it transfer (either the Transfer Aborted, Transfer Done or Transfer Terminated conditions).</description>
                     <bitOffset>18</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>DIS_HW_FLOW_CTRL</name>
                     <description>This will Disable the Hardware Flow Control. When disabled, any DMA Master device attempting to communicate to the DMA over the DMA Flow Control Interface (Ports: dma_req, dma_term, and dma_done) will be ignored. This should be set before using the DMA channel in Firmware Flow Control mode.</description>
                     <bitOffset>19</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>TRANS_SIZE</name>
                     <description>This is the transfer size in Bytes of each Data Packet transfer.\n                  Note: The transfer size must be a legal AMBA transfer size. Valid sizes are 1, 2 and 4 Bytes.</description>
                     <bitOffset>20</bitOffset>
                     <bitWidth>3</bitWidth>
                  </field>
                  <field>
                     <name>TRANS_GO</name>
                     <description>This is used for the Firmware Flow Control DMA transfer.</description>
                     <bitOffset>24</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>TRANS_ABORT</name>
                     <description>This is used to abort the current transfer on this DMA Channel. The aborted transfer will be forced to terminate immediately.</description>
                     <bitOffset>25</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>ISTS</name>
               <description>DMA Channel N Interrupt Status</description>
               <addressOffset>0x14</addressOffset>
               <size>8</size>
               <resetValue>0x00</resetValue>
               <fields>
                  <field>
                     <name>BUS_ERROR</name>
                     <description>This is an interrupt source register. This flags when there is an Error detected over the internal 32-bit Bus.\n                  1: Error detected. (R/WC)</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>FLOW_CTRL</name>
                     <description>This is an interrupt source register. This flags when the DMA Channel has encountered a Hardware Flow Control Request\n     after the DMA Channel has completed the transfer. This means the Master Device is attempting to overflow the DMA.\n                  1=Hardware Flow Control is requesting after the transfer has completed\n                  0=No Hardware Flow Control event</description>
                     <bitOffset>1</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>DONE</name>
                     <description>This is an interrupt source register. This flags when the DMA Channel has completed a transfer successfully on its side.\n     A completed transfer is defined as when the DMA Channel reaches its limit; Memory Start Address equals Memory End Address.\n     A completion due to a Hardware Flow Control Terminate will not flag this interrupt.\n                  1=Memory Start Address equals Memory End Address\n                  0=Memory Start Address does not equal Memory End Address</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>IEN</name>
               <description>DMA CHANNEL N INTERRUPT ENABLE</description>
               <addressOffset>0x18</addressOffset>
               <size>8</size>
               <resetValue>0x00</resetValue>
               <fields>
                  <field>
                     <name>STS_EN_BUS_ERR</name>
                     <description>This is an interrupt enable for DMA Channel Interrupt:Status Bus Error.\n                  1=Enable Interrupt\n                  0=Disable Interrupt</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>STS_EN_FLOW_CTRL</name>
                     <description>This is an interrupt enable for DMA Channel Interrupt:Status Flow Control Error.\n                  1=Enable Interrupt\n                  0=Disable Interrupt</description>
                     <bitOffset>1</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>STS_EN_DONE</name>
                     <description>This is an interrupt enable for DMA Channel Interrupt:Status Done.\n                  1=Enable Interrupt\n                  0=Disable Interrupt</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>FILL_EN</name>
               <description>DMA CHANNEL N FILL ENABLE</description>
               <addressOffset>0x20</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>MODE</name>
                     <description>1=Enable the DMA Channel Fill Engine N\n     0=Disable the DMA Channel Fill Engine</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>FILL_DATA</name>
               <description>DMA CHANNEL N FILL DATA</description>
               <addressOffset>0x24</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>DATA</name>
                     <description>This is the data pattern used to fill memory.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>32</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>FILL_STS</name>
               <description>DMA CHANNEL N FILL STATUS</description>
               <addressOffset>0x28</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>DONE</name>
                     <description>This bit is set to '1b' when the CRC calculation has completed from either normal or forced termination.\n     It is cleared to '0b' when the DMA controller starts a new transfer on the channel.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>RUNNING</name>
                     <description>This bit is set to '1b' when the DMA controller starts the post-transfer transmission of the CRC.\n     It is only set when the post-transfer is enabled by the CRC_POST_TRANSFER_ENABLE field. This bit is cleared\n     to '0b' when the post-transfer completes.</description>
                     <bitOffset>1</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
         </registers>
      </peripheral>
      <peripheral>
         <name>DMA_CHAN02</name>
         <version>85d1.0</version>
         <description>DMA Channel 02 Registers</description>
         <groupName>DMA_CHAN02</groupName>
         <prependToName>DMA_CHAN02_</prependToName>
         <baseAddress>0x400024C0</baseAddress>
         <addressBlock>
            <offset>0</offset>
            <size>0x19</size>
            <usage>registers</usage>
         </addressBlock>
         <interrupt>
            <name>DMA_CH02</name>
            <value>26</value>
         </interrupt>
         <registers>
            <register>
               <name>ACTIVATE</name>
               <description>Enable this channel for operation. The DMA Main Control: Activate must also be enabled for this channel to be operational.</description>
               <addressOffset>0x0</addressOffset>
               <size>8</size>
               <resetValue>0x00</resetValue>
               <fields>
                  <field>
                     <name>CHN</name>
                     <description>Enable this channel for operation. The DMA Main Control:Activate must also be enabled for this channel to be operational.\n                  1=Enable channel(block). Each individual channel must be enabled separately.\n                  0=Disable channel(block).</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>MSTART</name>
               <description>This is the starting address for the Memory device.</description>
               <addressOffset>0x4</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>MEND</name>
               <description>This is the ending address for the Memory device.</description>
               <addressOffset>0x8</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>DSTART</name>
               <description>This is the Master Device address.</description>
               <addressOffset>0xC</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>CTRL</name>
               <description>DMA Channel N Control</description>
               <addressOffset>0x10</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>RUN</name>
                     <description>This is a control field. Note: This bit only applies to Hardware Flow Control mode.\n                  1= This channel is enabled and will service transfer requests\n                  0=This channel is disabled. All transfer requests are ignored.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>REQ</name>
                     <description>This is a status field.\n                  1= There is a transfer request from the Master Device\n                  0= There is no transfer request from the Master Device</description>
                     <bitOffset>1</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>DONE</name>
                     <description>This is a status signal. It is only valid while DMA Channel Control: Run is Enabled. \n                  This is the inverse of the DMA Channel Control: Busy field, except this is qualified with the DMA Channel Control:Run field.\n                  1=Channel is done\n                  0=Channel is not done or it is OFF</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>STS</name>
                     <description>This is a status signal. The status decode is listed in priority order with the highest priority first.                  3: Error detected by the DMA                  2: The DMA Channel is externally done, in that the Device has terminated the transfer over the Hardware Flow Control through the Port dma_term                  1: The DMA Channel is locally done, in that Memory Start Address equals Memory End Address                  0: DMA Channel Control:Run is Disabled (0x0)</description>
                     <bitOffset>3</bitOffset>
                     <bitWidth>2</bitWidth>
                     <enumeratedValues>
                        <name>STSSelect</name>
                        <enumeratedValue>
                           <name>ERROR</name>
                           <description>3: Error detected by the DMA</description>
                           <value>0x3</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>EXT_DONE</name>
                           <description>2: The DMA Channel is externally done, in that the Device has terminated the transfer over the Hardware Flow Control through the Port dma_term</description>
                           <value>0x2</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>LOC_DONE</name>
                           <description>1: The DMA Channel is locally done, in that Memory Start Address equals Memory End Address</description>
                           <value>0x1</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>DIS</name>
                           <description>0: DMA Channel Control:Run is Disabled (0x0)</description>
                           <value>0x0</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>BUSY</name>
                     <description>This is a status signal.\n                  1=The DMA Channel is busy (FSM is not IDLE)\n                  0=The DMA Channel is not busy (FSM is IDLE)</description>
                     <bitOffset>5</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>TX_DIR</name>
                     <description>This determines the direction of the DMA Transfer.\n                  1=Data Packet Read from Memory Start Address followed by Data Packet Write to Device Address\n                  0=Data Packet Read from Device Address followed by Data Packet Write to Memory Start Address</description>
                     <bitOffset>8</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>HW_FLOW_CTRL_DEV</name>
                     <description>This is the device that is connected to this channel as its Hardware Flow Control master.\n                  The Flow Control Interface is a bus with each master concatenated onto it.\n                  This selects which bus index of the concatenated Flow Control Interface bus is targeted towards this channel.\n                  The Flow Control Interface Port list is dma_req, dma_term, and dma_done.</description>
                     <bitOffset>9</bitOffset>
                     <bitWidth>7</bitWidth>
                  </field>
                  <field>
                     <name>INC_MEM_ADDR</name>
                     <description>This will enable an auto-increment to the DMA Channel Memory Address.\n                  1=Increment the DMA Channel Memory Address by DMA Channel Control:Transfer Size after every Data Packet transfer\n                  0=Do nothing</description>
                     <bitOffset>16</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>INC_DEV_ADDR</name>
                     <description>This will enable an auto-increment to the DMA Channel Device Address.\n                  1: Increment the DMA Channel Device Address by DMA Channel Control:Transfer Size after every Data Packet transfer\n                  0: Do nothing</description>
                     <bitOffset>17</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>LOCK</name>
                     <description>This is used to lock the arbitration of the Channel Arbiter on this channel once this channel is granted. Once this is locked, it will remain on the arbiter until it has completed it transfer (either the Transfer Aborted, Transfer Done or Transfer Terminated conditions).</description>
                     <bitOffset>18</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>DIS_HW_FLOW_CTRL</name>
                     <description>This will Disable the Hardware Flow Control. When disabled, any DMA Master device attempting to communicate to the DMA over the DMA Flow Control Interface (Ports: dma_req, dma_term, and dma_done) will be ignored. This should be set before using the DMA channel in Firmware Flow Control mode.</description>
                     <bitOffset>19</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>TRANS_SIZE</name>
                     <description>This is the transfer size in Bytes of each Data Packet transfer.\n                  Note: The transfer size must be a legal AMBA transfer size. Valid sizes are 1, 2 and 4 Bytes.</description>
                     <bitOffset>20</bitOffset>
                     <bitWidth>3</bitWidth>
                  </field>
                  <field>
                     <name>TRANS_GO</name>
                     <description>This is used for the Firmware Flow Control DMA transfer.</description>
                     <bitOffset>24</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>TRANS_ABORT</name>
                     <description>This is used to abort the current transfer on this DMA Channel. The aborted transfer will be forced to terminate immediately.</description>
                     <bitOffset>25</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>ISTS</name>
               <description>DMA Channel N Interrupt Status</description>
               <addressOffset>0x14</addressOffset>
               <size>8</size>
               <resetValue>0x00</resetValue>
               <fields>
                  <field>
                     <name>BUS_ERR</name>
                     <description>This is an interrupt source register. This flags when there is an Error detected over the internal 32-bit Bus.\n                  1: Error detected. (R/WC)</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>FLOW_CTRL</name>
                     <description>This is an interrupt source register. This flags when the DMA Channel has encountered a Hardware Flow Control Request\n     after the DMA Channel has completed the transfer. This means the Master Device is attempting to overflow the DMA.\n                  1=Hardware Flow Control is requesting after the transfer has completed\n                  0=No Hardware Flow Control event</description>
                     <bitOffset>1</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>DONE</name>
                     <description>This is an interrupt source register. This flags when the DMA Channel has completed a transfer successfully on its side.\n     A completed transfer is defined as when the DMA Channel reaches its limit; Memory Start Address equals Memory End Address.\n     A completion due to a Hardware Flow Control Terminate will not flag this interrupt.\n                  1=Memory Start Address equals Memory End Address\n                  0=Memory Start Address does not equal Memory End Address</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>IEN</name>
               <description>DMA CHANNEL N INTERRUPT ENABLE</description>
               <addressOffset>0x18</addressOffset>
               <size>8</size>
               <resetValue>0x00</resetValue>
               <fields>
                  <field>
                     <name>STS_EN_BUS_ERR</name>
                     <description>This is an interrupt enable for DMA Channel Interrupt:Status Bus Error.\n                  1=Enable Interrupt\n                  0=Disable Interrupt</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>STS_EN_FLOW_CTRL</name>
                     <description>This is an interrupt enable for DMA Channel Interrupt:Status Flow Control Error.\n                  1=Enable Interrupt\n                  0=Disable Interrupt</description>
                     <bitOffset>1</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>STS_EN_DONE</name>
                     <description>This is an interrupt enable for DMA Channel Interrupt:Status Done.\n                  1=Enable Interrupt\n                  0=Disable Interrupt</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
         </registers>
      </peripheral>
      <peripheral derivedFrom="DMA_CHAN02">
         <name>DMA_CHAN03</name>
         <baseAddress>0x40002500</baseAddress>
         <interrupt>
            <name>DMA_CH03</name>
            <value>27</value>
         </interrupt>
      </peripheral>
      <peripheral derivedFrom="DMA_CHAN02">
         <name>DMA_CHAN04</name>
         <baseAddress>0x40002540</baseAddress>
         <interrupt>
            <name>DMA_CH04</name>
            <value>28</value>
         </interrupt>
      </peripheral>
      <peripheral derivedFrom="DMA_CHAN02">
         <name>DMA_CHAN05</name>
         <baseAddress>0x40002580</baseAddress>
         <interrupt>
            <name>DMA_CH05</name>
            <value>29</value>
         </interrupt>
      </peripheral>
      <peripheral derivedFrom="DMA_CHAN02">
         <name>DMA_CHAN06</name>
         <baseAddress>0x400025C0</baseAddress>
         <interrupt>
            <name>DMA_CH06</name>
            <value>30</value>
         </interrupt>
      </peripheral>
      <peripheral derivedFrom="DMA_CHAN02">
         <name>DMA_CHAN07</name>
         <baseAddress>0x40002600</baseAddress>
         <interrupt>
            <name>DMA_CH07</name>
            <value>31</value>
         </interrupt>
      </peripheral>
      <peripheral derivedFrom="DMA_CHAN02">
         <name>DMA_CHAN08</name>
         <baseAddress>0x40002640</baseAddress>
         <interrupt>
            <name>DMA_CH08</name>
            <value>32</value>
         </interrupt>
      </peripheral>
      <peripheral derivedFrom="DMA_CHAN02">
         <name>DMA_CHAN09</name>
         <baseAddress>0x40002680</baseAddress>
         <interrupt>
            <name>DMA_CH09</name>
            <value>33</value>
         </interrupt>
      </peripheral>
      <peripheral derivedFrom="DMA_CHAN02">
         <name>DMA_CHAN10</name>
         <baseAddress>0x400026C0</baseAddress>
         <interrupt>
            <name>DMA_CH10</name>
            <value>34</value>
         </interrupt>
      </peripheral>
      <peripheral derivedFrom="DMA_CHAN02">
         <name>DMA_CHAN11</name>
         <baseAddress>0x40002700</baseAddress>
         <interrupt>
            <name>DMA_CH11</name>
            <value>35</value>
         </interrupt>
      </peripheral>
      <peripheral>
         <name>ECIA</name>
         <description>The ECIA works in conjunction with the processor interrupt interface to handle hardware interrupts andd exceptions.</description>
         <groupName>ECIA</groupName>
         <prependToName>ECIA_</prependToName>
         <baseAddress>0x4000E000</baseAddress>
         <addressBlock>
            <offset>0</offset>
            <size>0x20C</size>
            <usage>registers</usage>
         </addressBlock>
         <registers>
            <register>
               <name>SRC8</name>
               <description>GIRQ8 Source Register</description>
               <addressOffset>0x0</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>EN_SET8</name>
               <description>GIRQ8 Enable Set Register</description>
               <addressOffset>0x4</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>RESULT8</name>
               <description>GIRQ8 Result Register</description>
               <addressOffset>0x8</addressOffset>
               <size>32</size>
               <access>read-only</access>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>EN_CLR8</name>
               <description>GIRQ8 Enable Clear Register</description>
               <addressOffset>0xc</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>SRC9</name>
               <description>GIRQ9 Source Register</description>
               <addressOffset>0x14</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>EN_SET9</name>
               <description>GIRQ9 Enable Set Register</description>
               <addressOffset>0x18</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>RESULT9</name>
               <description>GIRQ9 Result Register</description>
               <addressOffset>0x1c</addressOffset>
               <size>32</size>
               <access>read-only</access>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>EN_CLR9</name>
               <description>GIRQ9 Enable Clear Register</description>
               <addressOffset>0x20</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>SRC10</name>
               <description>GIRQ10 Source Register</description>
               <addressOffset>0x28</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>EN_SET10</name>
               <description>GIRQ10 Enable Set Register</description>
               <addressOffset>0x2c</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>RESULT10</name>
               <description>GIRQ10 Result Register</description>
               <addressOffset>0x30</addressOffset>
               <size>32</size>
               <access>read-only</access>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>EN_CLR10</name>
               <description>GIRQ10 Enable Clear Register</description>
               <addressOffset>0x34</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>SRC11</name>
               <description>GIRQ11 Source Register</description>
               <addressOffset>0x3c</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>EN_SET11</name>
               <description>GIRQ11 Enable Set Register</description>
               <addressOffset>0x40</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>RESULT11</name>
               <description>GIRQ11 Result Register</description>
               <addressOffset>0x44</addressOffset>
               <size>32</size>
               <access>read-only</access>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>EN_CLR11</name>
               <description>GIRQ11 Enable Clear Register</description>
               <addressOffset>0x48</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>SRC12</name>
               <description>GIRQ12 Source Register</description>
               <addressOffset>0x50</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>EN_SET12</name>
               <description>GIRQ12 Enable Set Register</description>
               <addressOffset>0x54</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>RESULT12</name>
               <description>GIRQ12 Result Register</description>
               <addressOffset>0x58</addressOffset>
               <size>32</size>
               <access>read-only</access>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>EN_CLR12</name>
               <description>GIRQ12 Enable Clear Register</description>
               <addressOffset>0x5c</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>SRC13</name>
               <description>GIRQ13 Source Register</description>
               <addressOffset>0x64</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>EN_SET13</name>
               <description>GIRQ13 Enable Set Register</description>
               <addressOffset>0x68</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>RESULT13</name>
               <description>GIRQ13 Result Register</description>
               <addressOffset>0x6c</addressOffset>
               <size>32</size>
               <access>read-only</access>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>EN_CLR13</name>
               <description>GIRQ13 Enable Clear Register</description>
               <addressOffset>0x70</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>SRC14</name>
               <description>GIRQ14 Source Register</description>
               <addressOffset>0x78</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>EN_SET14</name>
               <description>GIRQ14 Enable Set Register</description>
               <addressOffset>0x7c</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>RESULT14</name>
               <description>GIRQ14 Result Register</description>
               <addressOffset>0x80</addressOffset>
               <size>32</size>
               <access>read-only</access>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>EN_CLR14</name>
               <description>GIRQ14 Enable Clear Register</description>
               <addressOffset>0x84</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>SRC15</name>
               <description>GIRQ15 Source Register</description>
               <addressOffset>0x8c</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>EN_SET15</name>
               <description>GIRQ15 Enable Set Register</description>
               <addressOffset>0x90</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>RESULT15</name>
               <description>GIRQ15 Result Register</description>
               <addressOffset>0x94</addressOffset>
               <size>32</size>
               <access>read-only</access>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>EN_CLR15</name>
               <description>GIRQ15 Enable Clear Register</description>
               <addressOffset>0x98</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>SRC16</name>
               <description>GIRQ16 Source Register</description>
               <addressOffset>0xa0</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>EN_SET16</name>
               <description>GIRQ16 Enable Set Register</description>
               <addressOffset>0xa4</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>RESULT16</name>
               <description>GIRQ16 Result Register</description>
               <addressOffset>0xa8</addressOffset>
               <size>32</size>
               <access>read-only</access>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>EN_CLR16</name>
               <description>GIRQ16 Enable Clear Register</description>
               <addressOffset>0xac</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>SRC17</name>
               <description>GIRQ17 Source Register</description>
               <addressOffset>0xb4</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>EN_SET17</name>
               <description>GIRQ17 Enable Set Register</description>
               <addressOffset>0xb8</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>RESULT17</name>
               <description>GIRQ17 Result Register</description>
               <addressOffset>0xbc</addressOffset>
               <size>32</size>
               <access>read-only</access>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>EN_CLR17</name>
               <description>GIRQ17 Enable Clear Register</description>
               <addressOffset>0xc0</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>SRC18</name>
               <description>GIRQ18 Source Register</description>
               <addressOffset>0xc8</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>EN_SET18</name>
               <description>GIRQ18 Enable Set Register</description>
               <addressOffset>0xcc</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>RESULT18</name>
               <description>GIRQ18 Result Register</description>
               <addressOffset>0xd0</addressOffset>
               <size>32</size>
               <access>read-only</access>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>EN_CLR18</name>
               <description>GIRQ18 Enable Clear Register</description>
               <addressOffset>0xd4</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>SRC19</name>
               <description>GIRQ19 Source Register</description>
               <addressOffset>0xdc</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>EN_SET19</name>
               <description>GIRQ19 Enable Set Register</description>
               <addressOffset>0xe0</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>RESULT19</name>
               <description>GIRQ19 Result Register</description>
               <addressOffset>0xe4</addressOffset>
               <size>32</size>
               <access>read-only</access>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>EN_CLR19</name>
               <description>GIRQ19 Enable Clear Register</description>
               <addressOffset>0xe8</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>SRC20</name>
               <description>GIRQ20 Source Register</description>
               <addressOffset>0xf0</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>EN_SET20</name>
               <description>GIRQ20 Enable Set Register</description>
               <addressOffset>0xf4</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>RESULT20</name>
               <description>GIRQ20 Result Register</description>
               <addressOffset>0xf8</addressOffset>
               <size>32</size>
               <access>read-only</access>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>EN_CLR20</name>
               <description>GIRQ20 Enable Clear Register</description>
               <addressOffset>0xfc</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>SRC21</name>
               <description>GIRQ21 Source Register</description>
               <addressOffset>0x104</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>EN_SET21</name>
               <description>GIRQ21 Enable Set Register</description>
               <addressOffset>0x108</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>RESULT21</name>
               <description>GIRQ21 Result Register</description>
               <addressOffset>0x10c</addressOffset>
               <size>32</size>
               <access>read-only</access>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>EN_CLR21</name>
               <description>GIRQ21 Enable Clear Register</description>
               <addressOffset>0x110</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>SRC22</name>
               <description>GIRQ22 Source Register</description>
               <addressOffset>0x118</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>EN_SET22</name>
               <description>GIRQ22 Enable Set Register</description>
               <addressOffset>0x11c</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>RESULT22</name>
               <description>GIRQ22 Result Register</description>
               <addressOffset>0x120</addressOffset>
               <size>32</size>
               <access>read-only</access>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>EN_CLR22</name>
               <description>GIRQ22 Enable Clear Register</description>
               <addressOffset>0x124</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>SRC23</name>
               <description>GIRQ23 Source Register</description>
               <addressOffset>0x12c</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>EN_SET23</name>
               <description>GIRQ23 Enable Set Register</description>
               <addressOffset>0x130</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>RESULT23</name>
               <description>GIRQ23 Result Register</description>
               <addressOffset>0x134</addressOffset>
               <size>32</size>
               <access>read-only</access>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>EN_CLR23</name>
               <description>GIRQ23 Enable Clear Register</description>
               <addressOffset>0x138</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>SRC24</name>
               <description>GIRQ24 Source Register</description>
               <addressOffset>0x140</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>EN_SET24</name>
               <description>GIRQ24 Enable Set Register</description>
               <addressOffset>0x144</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>RESULT24</name>
               <description>GIRQ24 Result Register</description>
               <addressOffset>0x148</addressOffset>
               <size>32</size>
               <access>read-only</access>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>EN_CLR24</name>
               <description>GIRQ24 Enable Clear Register</description>
               <addressOffset>0x14c</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>SRC25</name>
               <description>GIRQ25 Source Register</description>
               <addressOffset>0x154</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>EN_SET25</name>
               <description>GIRQ25 Enable Set Register</description>
               <addressOffset>0x158</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>RESULT25</name>
               <description>GIRQ25 Result Register</description>
               <addressOffset>0x15c</addressOffset>
               <size>32</size>
               <access>read-only</access>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>EN_CLR25</name>
               <description>GIRQ25 Enable Clear Register</description>
               <addressOffset>0x160</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>SRC26</name>
               <description>GIRQ26 Source Register</description>
               <addressOffset>0x168</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>EN_SET26</name>
               <description>GIRQ26 Enable Set Register</description>
               <addressOffset>0x16c</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>RESULT26</name>
               <description>GIRQ26 Result Register</description>
               <addressOffset>0x170</addressOffset>
               <size>32</size>
               <access>read-only</access>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>EN_CLR26</name>
               <description>GIRQ26 Enable Clear Register</description>
               <addressOffset>0x174</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>BLK_EN_SET</name>
               <description>Block Enable Set Register</description>
               <addressOffset>0x200</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>VTOR_EN_SET</name>
                     <description>Each GIRQx bit can be individually enabled to assert an interrupt event.\n      Reads always return the current value of the internal GIRQX_ENABLE bit. The state of the GIRQX_ENABLE bit is determined by\n      the corresponding GIRQX_ENABLE_SET bit and the GIRQX_ENABLE_CLEAR bit. (0=disabled, 1=enabled) (R/WS)\n      1=Interrupts in the GIRQx Source Register may be enabled\n      0=No effect.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>31</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>BLK_EN_CLR</name>
               <description>Block Enable Clear Register.</description>
               <addressOffset>0x204</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>VTOR_EN_CLR</name>
                     <description>Each GIRQx bit can be individually disabled to inhibit an interrupt event.\n      Reads always return the current value of the internal GIRQX_ENABLE bit. The state of the GIRQX_ENABLE bit is determined by\n      the corresponding GIRQX_ENABLE_SET bit and the GIRQX_ENABLE_CLEAR bit. (0=disabled, 1=enabled) (R/WC)\n      1=All interrupts in the GIRQx Source Register are disabled\n      0=No effect.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>31</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>BLK_IRQ_VTOR</name>
               <description>Block IRQ Vector Register</description>
               <addressOffset>0x208</addressOffset>
               <size>32</size>
               <access>read-only</access>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>VTOR</name>
                     <description>Each bit in this field reports the status of the group GIRQ interrupt assertion to the NVIC. If the GIRQx interrupt\n      is disabled as a group, by the Block Enable Clear Register, then the corresponding bit will be '0'b and no interrupt will be asserted.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>25</bitWidth>
                  </field>
               </fields>
            </register>
         </registers>
      </peripheral>
      <peripheral>
         <name>GCR</name>
         <version>1011.0</version>
         <description>The Logical Device Configuration registers support motherboard designs in\n        which the resources required by their components are known and assigned by the BIOS\n        at POST.</description>
         <groupName>GCR</groupName>
         <prependToName>GCR_</prependToName>
         <baseAddress>0x400FFF00</baseAddress>
         <addressBlock>
            <offset>0</offset>
            <size>0x22</size>
            <usage>registers</usage>
         </addressBlock>
         <registers>
            <register>
               <name>LDN</name>
               <description>A write to this register selects the current logical device. This allows access to the control and configuration\n     registers for each logical device. Note: The Activate command operates only on the selected logical device.</description>
               <addressOffset>0x7</addressOffset>
               <size>8</size>
               <resetValue>0x00</resetValue>
            </register>
            <register>
               <name>DEV_REV</name>
               <description>A read-only register which provides device revision information.</description>
               <addressOffset>0x1C</addressOffset>
               <size>8</size>
               <access>read-only</access>
               <resetValue>0x00</resetValue>
            </register>
            <register>
               <name>DEV_SUBID</name>
               <description>A read-only register which provides device sub ID information.</description>
               <addressOffset>0x1D</addressOffset>
               <size>8</size>
               <access>read-only</access>
               <resetValue>0xA2</resetValue>
            </register>
            <register>
               <name>DEV_ID</name>
               <description>A read-only register which provides device identification.</description>
               <addressOffset>0x1E</addressOffset>
               <size>16</size>
               <access>read-only</access>
               <resetValue>0x0023</resetValue>
            </register>
            <register>
               <name>LEG_DEV_ID</name>
               <description>A read-only register which provides legacy device identification.</description>
               <addressOffset>0x20</addressOffset>
               <size>8</size>
               <access>read-only</access>
               <resetValue>0xFE</resetValue>
            </register>
            <register>
               <name>LEG_DEV_REV</name>
               <description>A read-only register which provides legacy device revision information.</description>
               <addressOffset>0x21</addressOffset>
               <size>8</size>
               <access>read-only</access>
               <resetValue>0xA0</resetValue>
            </register>
         </registers>
      </peripheral>
      <peripheral>
         <name>UART0</name>
         <version>391.0</version>
         <description>The 16550 UART is a full-function Two Pin Serial Port that supports the standard RS-232 Interface.</description>
         <groupName>UART</groupName>
         <prependToName>UART_</prependToName>
         <baseAddress>0x400F2400</baseAddress>
         <addressBlock>
            <offset>0</offset>
            <size>0x3F1</size>
            <usage>registers</usage>
         </addressBlock>
         <interrupt>
            <name>GIRQ15</name>
            <value>7</value>
         </interrupt>
         <interrupt>
            <name>UART0</name>
            <value>40</value>
         </interrupt>
         <registers>
            <cluster>
               <name>DATA</name>
               <description>UART when DLAB=0</description>
               <headerStructName>UartData</headerStructName>
               <addressOffset>0x0</addressOffset>
               <register>
                  <name>RX_DAT</name>
                  <description>UART Receive (Read) Buffer Register (DLAB=0)</description>
                  <addressOffset>0x0</addressOffset>
                  <size>8</size>
                  <access>read-only</access>
                  <resetValue>0x00</resetValue>
               </register>
               <register>
                  <name>TX_DAT</name>
                  <description>UART Transmit (Write) Buffer Register (DLAB=0)</description>
                  <addressOffset>0x0</addressOffset>
                  <size>8</size>
                  <access>write-only</access>
                  <resetValue>0x00</resetValue>
               </register>
               <register>
                  <name>IEN</name>
                  <description>UART Interrupt Enable Register (DLAB=0)</description>
                  <addressOffset>0x1</addressOffset>
                  <size>8</size>
                  <resetValue>0x00</resetValue>
                  <fields>
                     <field>
                        <name>ERDAI</name>
                        <description>ERDAI This bit enables the Received Data Available Interrupt (and timeout interrupts in the FIFO mode) when set to logic '1'.</description>
                        <bitOffset>0</bitOffset>
                        <bitWidth>1</bitWidth>
                     </field>
                     <field>
                        <name>ETHREI</name>
                        <description>ETHREI This bit enables the Transmitter Holding Register Empty Interrupt when set to logic '1'.</description>
                        <bitOffset>1</bitOffset>
                        <bitWidth>1</bitWidth>
                     </field>
                     <field>
                        <name>ELSI</name>
                        <description>ELSI This bit enables the Received Line Status Interrupt when set to logic '1'.</description>
                        <bitOffset>2</bitOffset>
                        <bitWidth>1</bitWidth>
                     </field>
                     <field>
                        <name>EMSI</name>
                        <description>EMSI  This bit enables the MODEM Status Interrupt when set to logic '1'.</description>
                        <bitOffset>3</bitOffset>
                        <bitWidth>1</bitWidth>
                     </field>
                  </fields>
               </register>
               <register>
                  <name>FIFO_CR</name>
                  <description>UART FIFO Control Register</description>
                  <addressOffset>0x2</addressOffset>
                  <size>8</size>
                  <access>write-only</access>
                  <resetValue>0x00</resetValue>
                  <fields>
                     <field>
                        <name>EXRF</name>
                        <description>EXRF Enable XMIT and RECV FIFO.</description>
                        <bitOffset>0</bitOffset>
                        <bitWidth>1</bitWidth>
                     </field>
                     <field>
                        <name>CLR_RECV_FIFO</name>
                        <description>CLEAR_RECV_FIFO  Setting this bit to a logic '1' clears all bytes in the RCVR FIFO and resets its counter logic to '0'.</description>
                        <bitOffset>1</bitOffset>
                        <bitWidth>1</bitWidth>
                     </field>
                     <field>
                        <name>CLR_XMIT_FIFO</name>
                        <description>CLEAR_XMIT_FIFO  Setting this bit to a logic '1' clears all bytes in the XMIT FIFO and resets its counter logic to '0' . The shift register is not cleared. This bit is self-clearing.</description>
                        <bitOffset>2</bitOffset>
                        <bitWidth>1</bitWidth>
                     </field>
                     <field>
                        <name>DMA_MODE_SEL</name>
                        <description>DMA_MODE_SELECT  Writing to this bit has no effect on the operation of the UART. The RXRDY and TXRDY pins are not available on this chip.</description>
                        <bitOffset>3</bitOffset>
                        <bitWidth>1</bitWidth>
                     </field>
                     <field>
                        <name>RECV_FIFO_TRIG_LVL</name>
                        <description>RECV_FIFO_TRIGGER_LEVEL These bits are used to set the trigger level for the RCVR FIFO interrupt.</description>
                        <bitOffset>6</bitOffset>
                        <bitWidth>2</bitWidth>
                     </field>
                  </fields>
               </register>
               <register>
                  <name>INT_ID</name>
                  <description>UART Interrupt Identification Register</description>
                  <addressOffset>0x2</addressOffset>
                  <size>8</size>
                  <access>read-only</access>
                  <resetValue>0x00</resetValue>
                  <fields>
                     <field>
                        <name>IPEND</name>
                        <description>IPEND  This bit can be used in either a hardwired prioritized or polled environment to indicate whether an interrupt is pending.</description>
                        <bitOffset>0</bitOffset>
                        <bitWidth>1</bitWidth>
                     </field>
                     <field>
                        <name>INTID</name>
                        <description>INTID  These bits identify the highest priority interrupt pending</description>
                        <bitOffset>1</bitOffset>
                        <bitWidth>3</bitWidth>
                     </field>
                     <field>
                        <name>FIFO_EN</name>
                        <description>These two bits are set when the FIFO CONTROL Register bit 0 equals 1.</description>
                        <bitOffset>6</bitOffset>
                        <bitWidth>2</bitWidth>
                     </field>
                  </fields>
               </register>
               <register>
                  <name>LCR</name>
                  <description>UART Line Control Register</description>
                  <addressOffset>0x3</addressOffset>
                  <size>8</size>
                  <resetValue>0x00</resetValue>
                  <fields>
                     <field>
                        <name>WORD_LEN</name>
                        <description>WORD_LENGTH These two bits specify the number of bits in each transmitted or received serial character.</description>
                        <bitOffset>0</bitOffset>
                        <bitWidth>2</bitWidth>
                     </field>
                     <field>
                        <name>STOP_BITS</name>
                        <description>STOP_BITS  This bit specifies the number of stop bits in each transmitted or received serial character.</description>
                        <bitOffset>2</bitOffset>
                        <bitWidth>1</bitWidth>
                     </field>
                     <field>
                        <name>EN_PAR</name>
                        <description>ENABLE_PARITY  Parity Enable bit.</description>
                        <bitOffset>3</bitOffset>
                        <bitWidth>1</bitWidth>
                     </field>
                     <field>
                        <name>PAR_SEL</name>
                        <description>PARITY_SELECT Even Parity Select bit.</description>
                        <bitOffset>4</bitOffset>
                        <bitWidth>1</bitWidth>
                     </field>
                     <field>
                        <name>STICK_PAR</name>
                        <description>STICK_PARITY  Stick Parity bit.</description>
                        <bitOffset>5</bitOffset>
                        <bitWidth>1</bitWidth>
                     </field>
                     <field>
                        <name>BRK_CTRL</name>
                        <description>BREAK_CONTROL Set Break Control bit</description>
                        <bitOffset>6</bitOffset>
                        <bitWidth>1</bitWidth>
                     </field>
                     <field>
                        <name>DLAB</name>
                        <description>DLAB Divisor Latch Access Bit (DLAB).</description>
                        <bitOffset>7</bitOffset>
                        <bitWidth>1</bitWidth>
                     </field>
                  </fields>
               </register>
               <register>
                  <name>MCR</name>
                  <description>UART Modem Control Register</description>
                  <addressOffset>0x4</addressOffset>
                  <size>8</size>
                  <resetValue>0x00</resetValue>
                  <fields>
                     <field>
                        <name>DTR</name>
                        <description>DTR  This bit controls the Data Terminal Ready (nDTR) output.</description>
                        <bitOffset>0</bitOffset>
                        <bitWidth>1</bitWidth>
                     </field>
                     <field>
                        <name>RTS</name>
                        <description>RTS  This bit controls the Request To Send (nRTS) output.</description>
                        <bitOffset>1</bitOffset>
                        <bitWidth>1</bitWidth>
                     </field>
                     <field>
                        <name>OUT1</name>
                        <description>OUT1 This bit controls the Output 1 (OUT1) bit.</description>
                        <bitOffset>2</bitOffset>
                        <bitWidth>1</bitWidth>
                     </field>
                     <field>
                        <name>OUT2</name>
                        <description>OUT2  This bit is used to enable an UART interrupt.</description>
                        <bitOffset>3</bitOffset>
                        <bitWidth>1</bitWidth>
                     </field>
                     <field>
                        <name>LOOPBACK</name>
                        <description>LOOPBACK  This bit provides the loopback feature for diagnostic testing of the Serial Port.</description>
                        <bitOffset>4</bitOffset>
                        <bitWidth>1</bitWidth>
                     </field>
                  </fields>
               </register>
               <register>
                  <name>LSR</name>
                  <description>UART Line Status Register</description>
                  <addressOffset>0x5</addressOffset>
                  <size>8</size>
                  <access>read-only</access>
                  <resetValue>0x00</resetValue>
                  <fields>
                     <field>
                        <name>DATA_READY</name>
                        <description>DATA_READY  Data Ready. It is set to a logic '1' whenever a complete incoming character has been received and transferred into the Receiver Buffer Register or the FIFO</description>
                        <bitOffset>0</bitOffset>
                        <bitWidth>1</bitWidth>
                     </field>
                     <field>
                        <name>OVERRUN</name>
                        <description>OVERRUN  Overrun Error.</description>
                        <bitOffset>1</bitOffset>
                        <bitWidth>1</bitWidth>
                     </field>
                     <field>
                        <name>PE</name>
                        <description>PARITY ERROR  Parity Error.</description>
                        <bitOffset>2</bitOffset>
                        <bitWidth>1</bitWidth>
                     </field>
                     <field>
                        <name>FRAME_ERR</name>
                        <description>FRAME_ERROR Framing Error.</description>
                        <bitOffset>3</bitOffset>
                        <bitWidth>1</bitWidth>
                     </field>
                     <field>
                        <name>BRK_INTR</name>
                        <description>BREAK_INTERRUPT   Break Interrupt.</description>
                        <bitOffset>4</bitOffset>
                        <bitWidth>1</bitWidth>
                     </field>
                     <field>
                        <name>TRANS_EMPTY</name>
                        <description>TRANSMIT_EMPTY  Transmitter Holding Register Empty Bit 5 indicates that the Serial Port is ready to accept a new character for transmission.</description>
                        <bitOffset>5</bitOffset>
                        <bitWidth>1</bitWidth>
                     </field>
                     <field>
                        <name>TRANS_ERR</name>
                        <description>Transmitter Empty. Bit 6 is set to a logic '1' whenever the Transmitter Holding Register (THR) and Transmitter Shift Register (TSR) are both empty.</description>
                        <bitOffset>6</bitOffset>
                        <bitWidth>1</bitWidth>
                     </field>
                     <field>
                        <name>FIFO_ERR</name>
                        <description>FIFO_ERROR</description>
                        <bitOffset>7</bitOffset>
                        <bitWidth>1</bitWidth>
                     </field>
                  </fields>
               </register>
               <register>
                  <name>MSR</name>
                  <description>UART Modem Status Register</description>
                  <addressOffset>0x6</addressOffset>
                  <size>8</size>
                  <access>read-only</access>
                  <resetValue>0x00</resetValue>
                  <fields>
                     <field>
                        <name>CTS</name>
                        <description>CTS  Delta Clear To Send (DCTS).</description>
                        <bitOffset>0</bitOffset>
                        <bitWidth>1</bitWidth>
                     </field>
                     <field>
                        <name>DSR</name>
                        <description>DSR  Delta Data Set Ready (DDSR).</description>
                        <bitOffset>1</bitOffset>
                        <bitWidth>1</bitWidth>
                     </field>
                     <field>
                        <name>RI</name>
                        <description>RI  Trailing Edge of Ring Indicator (TERI).</description>
                        <bitOffset>2</bitOffset>
                        <bitWidth>1</bitWidth>
                     </field>
                     <field>
                        <name>DCD</name>
                        <description>DCD  Delta Data Carrier Detect (DDCD).</description>
                        <bitOffset>3</bitOffset>
                        <bitWidth>1</bitWidth>
                     </field>
                     <field>
                        <name>nCTS</name>
                        <description>nCTS  This bit is the complement of the Clear To Send (nCTS) input.</description>
                        <bitOffset>4</bitOffset>
                        <bitWidth>1</bitWidth>
                     </field>
                     <field>
                        <name>nDSR</name>
                        <description>This bit is the complement of the Data Set Ready (nDSR) input.</description>
                        <bitOffset>5</bitOffset>
                        <bitWidth>1</bitWidth>
                     </field>
                     <field>
                        <name>nRI</name>
                        <description>nRI This bit is the complement of the Ring Indicator (nRI) input.</description>
                        <bitOffset>6</bitOffset>
                        <bitWidth>1</bitWidth>
                     </field>
                     <field>
                        <name>nDCD</name>
                        <description>nDCD   This bit is the complement of the Data Carrier Detect (nDCD) input.</description>
                        <bitOffset>7</bitOffset>
                        <bitWidth>1</bitWidth>
                     </field>
                  </fields>
               </register>
               <register>
                  <name>SCR</name>
                  <description>UART Scratchpad Register    This 8 bit read/write register has no effect on the operation of the Serial Port. It is intended as a scratchpad register to be used by the programmer to hold data temporarily.</description>
                  <addressOffset>0x7</addressOffset>
                  <size>8</size>
                  <resetValue>0x00</resetValue>
               </register>
               <register>
                  <name>ACTIVATE</name>
                  <description>UART Activate Register. [0:0] ACTIVATE When this bit is 1, the UART logical device is powered and functional. When this bit is 0, the UART logical device is powered down and inactive.</description>
                  <addressOffset>0x330</addressOffset>
                  <size>8</size>
                  <resetValue>0x00</resetValue>
               </register>
               <register>
                  <name>CFG_SEL</name>
                  <description>UART Config Select Register</description>
                  <addressOffset>0x3F0</addressOffset>
                  <size>8</size>
                  <resetValue>0x00</resetValue>
                  <fields>
                     <field>
                        <name>CLK_SRC</name>
                        <description>CLK_SRC  1=The UART Baud Clock is derived from an external clock source, 0=The UART Baud Clock is derived from one of the two internal clock sources</description>
                        <bitOffset>0</bitOffset>
                        <bitWidth>1</bitWidth>
                     </field>
                     <field>
                        <name>PWR</name>
                        <description>POWER  1=The RESET reset signal is derived from nSIO_RESET, 0=The RESET reset signal is derived from VCC1_RESET</description>
                        <bitOffset>1</bitOffset>
                        <bitWidth>1</bitWidth>
                     </field>
                     <field>
                        <name>POLAR</name>
                        <description>POLARITY  1=The UART_TX and UART_RX pins functions are inverted, 0=The UART_TX and UART_RX pins functions are not inverted</description>
                        <bitOffset>2</bitOffset>
                        <bitWidth>1</bitWidth>
                     </field>
                  </fields>
               </register>
            </cluster>
            <cluster>
               <name>DLAB</name>
               <description>UART when DLAB=1</description>
               <alternateCluster>DATA</alternateCluster>
               <headerStructName>UartDlab</headerStructName>
               <addressOffset>0x0</addressOffset>
               <register>
                  <name>BAUDRT_LSB</name>
                  <description>UART Programmable BAUD Rate Generator (LSB) Register (DLAB=1)</description>
                  <addressOffset>0x0</addressOffset>
                  <size>8</size>
                  <resetValue>0x00</resetValue>
               </register>
               <register>
                  <name>BAUDRT_MSB</name>
                  <description>UART Programmable BAUD Rate Generator (MSB) Register (DLAB=1). [6:0] BAUD_RATE_DIVISOR_MSB, [7:7] BAUD_CLK_SEL \n            1=If CLK_SRC is '0', the baud clock is derived from the 1.8432MHz_Clk. If CLK_SRC is '1', this bit has no effect\n            0=If CLK_SRC is '0', the baud clock is derived from the 24MHz_Clk. If CLK_SRC is '1', this bit has no effect</description>
                  <addressOffset>0x1</addressOffset>
                  <size>8</size>
                  <resetValue>0x00</resetValue>
               </register>
               <register>
                  <name>FIFO_CR</name>
                  <description>UART FIFO Control Register</description>
                  <addressOffset>0x2</addressOffset>
                  <size>8</size>
                  <access>write-only</access>
                  <resetValue>0x00</resetValue>
                  <fields>
                     <field>
                        <name>EXRF</name>
                        <description>EXRF Enable XMIT and RECV FIFO.</description>
                        <bitOffset>0</bitOffset>
                        <bitWidth>1</bitWidth>
                     </field>
                     <field>
                        <name>CLR_RECV_FIFO</name>
                        <description>CLEAR_RECV_FIFO  Setting this bit to a logic '1' clears all bytes in the RCVR FIFO and resets its counter logic to '0'.</description>
                        <bitOffset>1</bitOffset>
                        <bitWidth>1</bitWidth>
                     </field>
                     <field>
                        <name>CLR_XMIT_FIFO</name>
                        <description>CLEAR_XMIT_FIFO  Setting this bit to a logic '1' clears all bytes in the XMIT FIFO and resets its counter logic to '0' . The shift register is not cleared. This bit is self-clearing.</description>
                        <bitOffset>2</bitOffset>
                        <bitWidth>1</bitWidth>
                     </field>
                     <field>
                        <name>DMA_MODE_SEL</name>
                        <description>DMA_MODE_SELECT  Writing to this bit has no effect on the operation of the UART. The RXRDY and TXRDY pins are not available on this chip.</description>
                        <bitOffset>3</bitOffset>
                        <bitWidth>1</bitWidth>
                     </field>
                     <field>
                        <name>RECV_FIFO_TRIG_LVL</name>
                        <description>RECV_FIFO_TRIGGER_LEVEL These bits are used to set the trigger level for the RCVR FIFO interrupt.</description>
                        <bitOffset>6</bitOffset>
                        <bitWidth>2</bitWidth>
                     </field>
                  </fields>
               </register>
               <register>
                  <name>INT_ID</name>
                  <description>UART Interrupt Identification Register</description>
                  <addressOffset>0x2</addressOffset>
                  <size>8</size>
                  <access>read-only</access>
                  <resetValue>0x00</resetValue>
                  <fields>
                     <field>
                        <name>IPEND</name>
                        <description>IPEND  This bit can be used in either a hardwired prioritized or polled environment to indicate whether an interrupt is pending.</description>
                        <bitOffset>0</bitOffset>
                        <bitWidth>1</bitWidth>
                     </field>
                     <field>
                        <name>INTID</name>
                        <description>INTID  These bits identify the highest priority interrupt pending</description>
                        <bitOffset>1</bitOffset>
                        <bitWidth>3</bitWidth>
                     </field>
                     <field>
                        <name>FIFO_EN</name>
                        <description>These two bits are set when the FIFO CONTROL Register bit 0 equals 1.</description>
                        <bitOffset>6</bitOffset>
                        <bitWidth>2</bitWidth>
                     </field>
                  </fields>
               </register>
               <register>
                  <name>LCR</name>
                  <description>UART Line Control Register</description>
                  <addressOffset>0x3</addressOffset>
                  <size>8</size>
                  <resetValue>0x00</resetValue>
                  <fields>
                     <field>
                        <name>WORD_LEN</name>
                        <description>WORD_LENGTH These two bits specify the number of bits in each transmitted or received serial character.</description>
                        <bitOffset>0</bitOffset>
                        <bitWidth>2</bitWidth>
                     </field>
                     <field>
                        <name>STOP_BITS</name>
                        <description>STOP_BITS  This bit specifies the number of stop bits in each transmitted or received serial character.</description>
                        <bitOffset>2</bitOffset>
                        <bitWidth>1</bitWidth>
                     </field>
                     <field>
                        <name>EN_PAR</name>
                        <description>ENABLE_PARITY  Parity Enable bit.</description>
                        <bitOffset>3</bitOffset>
                        <bitWidth>1</bitWidth>
                     </field>
                     <field>
                        <name>PAR_SEL</name>
                        <description>PARITY_SELECT Even Parity Select bit.</description>
                        <bitOffset>4</bitOffset>
                        <bitWidth>1</bitWidth>
                     </field>
                     <field>
                        <name>STICK_PAR</name>
                        <description>STICK_PARITY  Stick Parity bit.</description>
                        <bitOffset>5</bitOffset>
                        <bitWidth>1</bitWidth>
                     </field>
                     <field>
                        <name>BRK_CTRL</name>
                        <description>BREAK_CONTROL Set Break Control bit</description>
                        <bitOffset>6</bitOffset>
                        <bitWidth>1</bitWidth>
                     </field>
                     <field>
                        <name>DLAB</name>
                        <description>DLAB Divisor Latch Access Bit (DLAB).</description>
                        <bitOffset>7</bitOffset>
                        <bitWidth>1</bitWidth>
                     </field>
                  </fields>
               </register>
               <register>
                  <name>MCR</name>
                  <description>UART Modem Control Register</description>
                  <addressOffset>0x4</addressOffset>
                  <size>8</size>
                  <resetValue>0x00</resetValue>
                  <fields>
                     <field>
                        <name>DTR</name>
                        <description>DTR  This bit controls the Data Terminal Ready (nDTR) output.</description>
                        <bitOffset>0</bitOffset>
                        <bitWidth>1</bitWidth>
                     </field>
                     <field>
                        <name>RTS</name>
                        <description>RTS  This bit controls the Request To Send (nRTS) output.</description>
                        <bitOffset>1</bitOffset>
                        <bitWidth>1</bitWidth>
                     </field>
                     <field>
                        <name>OUT1</name>
                        <description>OUT1 This bit controls the Output 1 (OUT1) bit.</description>
                        <bitOffset>2</bitOffset>
                        <bitWidth>1</bitWidth>
                     </field>
                     <field>
                        <name>OUT2</name>
                        <description>OUT2  This bit is used to enable an UART interrupt.</description>
                        <bitOffset>3</bitOffset>
                        <bitWidth>1</bitWidth>
                     </field>
                     <field>
                        <name>LOOPBACK</name>
                        <description>LOOPBACK  This bit provides the loopback feature for diagnostic testing of the Serial Port.</description>
                        <bitOffset>4</bitOffset>
                        <bitWidth>1</bitWidth>
                     </field>
                  </fields>
               </register>
               <register>
                  <name>LSR</name>
                  <description>UART Line Status Register</description>
                  <addressOffset>0x5</addressOffset>
                  <size>8</size>
                  <access>read-only</access>
                  <resetValue>0x00</resetValue>
                  <fields>
                     <field>
                        <name>DATA_READY</name>
                        <description>DATA_READY  Data Ready. It is set to a logic '1' whenever a complete incoming character has been received and transferred into the Receiver Buffer Register or the FIFO</description>
                        <bitOffset>0</bitOffset>
                        <bitWidth>1</bitWidth>
                     </field>
                     <field>
                        <name>OVERRUN</name>
                        <description>OVERRUN  Overrun Error.</description>
                        <bitOffset>1</bitOffset>
                        <bitWidth>1</bitWidth>
                     </field>
                     <field>
                        <name>PE</name>
                        <description>PARITY ERROR  Parity Error.</description>
                        <bitOffset>2</bitOffset>
                        <bitWidth>1</bitWidth>
                     </field>
                     <field>
                        <name>FRAME_ERR</name>
                        <description>FRAME_ERROR Framing Error.</description>
                        <bitOffset>3</bitOffset>
                        <bitWidth>1</bitWidth>
                     </field>
                     <field>
                        <name>BRK_INTR</name>
                        <description>BREAK_INTERRUPT   Break Interrupt.</description>
                        <bitOffset>4</bitOffset>
                        <bitWidth>1</bitWidth>
                     </field>
                     <field>
                        <name>TRANS_EMPTY</name>
                        <description>TRANSMIT_EMPTY  Transmitter Holding Register Empty Bit 5 indicates that the Serial Port is ready to accept a new character for transmission.</description>
                        <bitOffset>5</bitOffset>
                        <bitWidth>1</bitWidth>
                     </field>
                     <field>
                        <name>TRANS_ERR</name>
                        <description>Transmitter Empty. Bit 6 is set to a logic '1' whenever the Transmitter Holding Register (THR) and Transmitter Shift Register (TSR) are both empty.</description>
                        <bitOffset>6</bitOffset>
                        <bitWidth>1</bitWidth>
                     </field>
                     <field>
                        <name>FIFO_ERR</name>
                        <description>FIFO_ERROR</description>
                        <bitOffset>7</bitOffset>
                        <bitWidth>1</bitWidth>
                     </field>
                  </fields>
               </register>
               <register>
                  <name>MSR</name>
                  <description>UART Modem Status Register</description>
                  <addressOffset>0x6</addressOffset>
                  <size>8</size>
                  <access>read-only</access>
                  <resetValue>0x00</resetValue>
                  <fields>
                     <field>
                        <name>CTS</name>
                        <description>CTS  Delta Clear To Send (DCTS).</description>
                        <bitOffset>0</bitOffset>
                        <bitWidth>1</bitWidth>
                     </field>
                     <field>
                        <name>DSR</name>
                        <description>DSR  Delta Data Set Ready (DDSR).</description>
                        <bitOffset>1</bitOffset>
                        <bitWidth>1</bitWidth>
                     </field>
                     <field>
                        <name>RI</name>
                        <description>RI  Trailing Edge of Ring Indicator (TERI).</description>
                        <bitOffset>2</bitOffset>
                        <bitWidth>1</bitWidth>
                     </field>
                     <field>
                        <name>DCD</name>
                        <description>DCD  Delta Data Carrier Detect (DDCD).</description>
                        <bitOffset>3</bitOffset>
                        <bitWidth>1</bitWidth>
                     </field>
                     <field>
                        <name>nCTS</name>
                        <description>nCTS  This bit is the complement of the Clear To Send (nCTS) input.</description>
                        <bitOffset>4</bitOffset>
                        <bitWidth>1</bitWidth>
                     </field>
                     <field>
                        <name>nDSR</name>
                        <description>This bit is the complement of the Data Set Ready (nDSR) input.</description>
                        <bitOffset>5</bitOffset>
                        <bitWidth>1</bitWidth>
                     </field>
                     <field>
                        <name>nRI</name>
                        <description>nRI This bit is the complement of the Ring Indicator (nRI) input.</description>
                        <bitOffset>6</bitOffset>
                        <bitWidth>1</bitWidth>
                     </field>
                     <field>
                        <name>nDCD</name>
                        <description>nDCD   This bit is the complement of the Data Carrier Detect (nDCD) input.</description>
                        <bitOffset>7</bitOffset>
                        <bitWidth>1</bitWidth>
                     </field>
                  </fields>
               </register>
               <register>
                  <name>SCR</name>
                  <description>UART Scratchpad Register    This 8 bit read/write register has no effect on the operation of the Serial Port. It is intended as a scratchpad register to be used by the programmer to hold data temporarily.</description>
                  <addressOffset>0x7</addressOffset>
                  <size>8</size>
                  <resetValue>0x00</resetValue>
               </register>
               <register>
                  <name>ACTIVATE</name>
                  <description>UART Activate Register. [0:0] ACTIVATE When this bit is 1, the UART logical device is powered and functional. When this bit is 0, the UART logical device is powered down and inactive.</description>
                  <addressOffset>0x330</addressOffset>
                  <size>8</size>
                  <resetValue>0x00</resetValue>
               </register>
               <register>
                  <name>CFG_SEL</name>
                  <description>UART Config Select Register</description>
                  <addressOffset>0x3F0</addressOffset>
                  <size>8</size>
                  <resetValue>0x00</resetValue>
                  <fields>
                     <field>
                        <name>CLK_SRC</name>
                        <description>CLK_SRC  1=The UART Baud Clock is derived from an external clock source, 0=The UART Baud Clock is derived from one of the two internal clock sources</description>
                        <bitOffset>0</bitOffset>
                        <bitWidth>1</bitWidth>
                     </field>
                     <field>
                        <name>PWR</name>
                        <description>POWER  1=The RESET reset signal is derived from nSIO_RESET, 0=The RESET reset signal is derived from VCC1_RESET</description>
                        <bitOffset>1</bitOffset>
                        <bitWidth>1</bitWidth>
                     </field>
                     <field>
                        <name>POLAR</name>
                        <description>POLARITY  1=The UART_TX and UART_RX pins functions are inverted, 0=The UART_TX and UART_RX pins functions are not inverted</description>
                        <bitOffset>2</bitOffset>
                        <bitWidth>1</bitWidth>
                     </field>
                  </fields>
               </register>
            </cluster>
         </registers>
      </peripheral>
      <peripheral derivedFrom="UART0">
         <name>UART1</name>
         <baseAddress>0x400F2800</baseAddress>
         <interrupt>
            <name>UART1</name>
            <value>41</value>
         </interrupt>
      </peripheral>
      <peripheral derivedFrom="UART0">
         <name>UART2</name>
         <baseAddress>0x400F2C00</baseAddress>
         <interrupt>
            <name>UART2</name>
            <value>44</value>
         </interrupt>
      </peripheral>
      <peripheral>
         <name>GPIO</name>
         <version>261.0</version>
         <description>GPIO Pin Control Registers</description>
         <groupName>GPIO</groupName>
         <prependToName>GPIO_</prependToName>
         <baseAddress>0x40081000</baseAddress>
         <addressBlock>
            <offset>0</offset>
            <size>0x7C4</size>
            <usage>registers</usage>
         </addressBlock>
         <interrupt>
            <name>GIRQ08</name>
            <value>0</value>
         </interrupt>
         <interrupt>
            <name>GIRQ09</name>
            <value>1</value>
         </interrupt>
         <interrupt>
            <name>GIRQ10</name>
            <value>2</value>
         </interrupt>
         <interrupt>
            <name>GIRQ11</name>
            <value>3</value>
         </interrupt>
         <interrupt>
            <name>GIRQ12</name>
            <value>4</value>
         </interrupt>
         <interrupt>
            <name>GIRQ26</name>
            <value>17</value>
         </interrupt>
         <registers>
            <register>
               <dim>8</dim>
               <dimIncrement>4</dimIncrement>
               <name>CTRL0[%s]</name>
               <description>GPIO Pin Control Register</description>
               <addressOffset>0x0</addressOffset>
               <size>32</size>
               <resetValue>0x00008040</resetValue>
               <fields>
                  <field>
                     <name>PU_PD</name>
                     <description>These bits are used to enable an internal pull-up or pull-down resistor.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>PWR_GATING</name>
                     <description>The GPIO pin will be tristated when the selected power well is off.</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>INTR_DET</name>
                     <description>Determines the interrupt capability of the GPIO input.</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>3</bitWidth>
                  </field>
                  <field>
                     <name>EDGE_EN</name>
                     <description>Determines the interrupt capability of the GPIO input.</description>
                     <bitOffset>7</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>OUT_BUFF_TYPE</name>
                     <description>0 = Push-Pull, 1 = Open Drain</description>
                     <bitOffset>8</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>GPIO_DIR</name>
                     <description>Buffer direction when GPIO selected by pin mux 0 = Input, 1 = Output</description>
                     <bitOffset>9</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>GPIO_OUT_SEL</name>
                     <description>GPIO outputs registe select.0=GPIO ALTERNATE_GPIO_DATA 1=GPIO Output Register.</description>
                     <bitOffset>10</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>POL</name>
                     <description>1=Inverted; 0=Non-inverted</description>
                     <bitOffset>11</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>MUX_CTRL</name>
                     <description>00 = GPIO Function, 01 = Function 1, 10 = Function 2, 11 = Function 3.</description>
                     <bitOffset>12</bitOffset>
                     <bitWidth>3</bitWidth>
                  </field>
                  <field>
                     <name>INP_DIS</name>
                     <description>GPIO input disable</description>
                     <bitOffset>15</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>ALT_GPIO_DATA</name>
                     <description>GPIO Alternate Data Register.</description>
                     <bitOffset>16</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>GPIO_INP</name>
                     <description>GPIO input from pin, independent of the Mux selection for the pin or the Direction.</description>
                     <bitOffset>24</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <dim>8</dim>
               <dimIncrement>4</dimIncrement>
               <name>CTRL1[%s]</name>
               <description>GPIO Pin Control Register</description>
               <addressOffset>0x20</addressOffset>
               <size>32</size>
               <resetValue>0x00008040</resetValue>
               <fields>
                  <field>
                     <name>PU_PD</name>
                     <description>These bits are used to enable an internal pull-up or pull-down resistor.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>PWR_GATING</name>
                     <description>The GPIO pin will be tristated when the selected power well is off.</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>INTR_DET</name>
                     <description>Determines the interrupt capability of the GPIO input.</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>3</bitWidth>
                  </field>
                  <field>
                     <name>EDGE_EN</name>
                     <description>Determines the interrupt capability of the GPIO input.</description>
                     <bitOffset>7</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>OUT_BUFF_TYPE</name>
                     <description>0 = Push-Pull, 1 = Open Drain</description>
                     <bitOffset>8</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>GPIO_DIR</name>
                     <description>Buffer direction when GPIO selected by pin mux 0 = Input, 1 = Output</description>
                     <bitOffset>9</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>GPIO_OUT_SEL</name>
                     <description>GPIO outputs registe select.0=GPIO ALTERNATE_GPIO_DATA 1=GPIO Output Register.</description>
                     <bitOffset>10</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>POL</name>
                     <description>1=Inverted; 0=Non-inverted</description>
                     <bitOffset>11</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>MUX_CTRL</name>
                     <description>00 = GPIO Function, 01 = Function 1, 10 = Function 2, 11 = Function 3.</description>
                     <bitOffset>12</bitOffset>
                     <bitWidth>3</bitWidth>
                  </field>
                  <field>
                     <name>INP_DIS</name>
                     <description>GPIO input disable</description>
                     <bitOffset>15</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>ALT_GPIO_DATA</name>
                     <description>GPIO Alternate Data Register.</description>
                     <bitOffset>16</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>GPIO_INP</name>
                     <description>GPIO input from pin, independent of the Mux selection for the pin or the Direction.</description>
                     <bitOffset>24</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <dim>8</dim>
               <dimIncrement>4</dimIncrement>
               <name>CTRL2[%s]</name>
               <description>GPIO Pin Control Register</description>
               <addressOffset>0x40</addressOffset>
               <size>32</size>
               <resetValue>0x00008040</resetValue>
               <fields>
                  <field>
                     <name>PU_PD</name>
                     <description>These bits are used to enable an internal pull-up or pull-down resistor.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>PWR_GATING</name>
                     <description>The GPIO pin will be tristated when the selected power well is off.</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>INTR_DET</name>
                     <description>Determines the interrupt capability of the GPIO input.</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>3</bitWidth>
                  </field>
                  <field>
                     <name>EDGE_EN</name>
                     <description>Determines the interrupt capability of the GPIO input.</description>
                     <bitOffset>7</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>OUT_BUFF_TYPE</name>
                     <description>0 = Push-Pull, 1 = Open Drain</description>
                     <bitOffset>8</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>GPIO_DIR</name>
                     <description>Buffer direction when GPIO selected by pin mux 0 = Input, 1 = Output</description>
                     <bitOffset>9</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>GPIO_OUT_SEL</name>
                     <description>GPIO outputs registe select.0=GPIO ALTERNATE_GPIO_DATA 1=GPIO Output Register.</description>
                     <bitOffset>10</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>POL</name>
                     <description>1=Inverted; 0=Non-inverted</description>
                     <bitOffset>11</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>MUX_CTRL</name>
                     <description>00 = GPIO Function, 01 = Function 1, 10 = Function 2, 11 = Function 3.</description>
                     <bitOffset>12</bitOffset>
                     <bitWidth>3</bitWidth>
                  </field>
                  <field>
                     <name>INP_DIS</name>
                     <description>GPIO input disable</description>
                     <bitOffset>15</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>ALT_GPIO_DATA</name>
                     <description>GPIO Alternate Data Register.</description>
                     <bitOffset>16</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>GPIO_INP</name>
                     <description>GPIO input from pin, independent of the Mux selection for the pin or the Direction.</description>
                     <bitOffset>24</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <dim>8</dim>
               <dimIncrement>4</dimIncrement>
               <name>CTRL3[%s]</name>
               <description>GPIO Pin Control Register</description>
               <addressOffset>0x60</addressOffset>
               <size>32</size>
               <resetValue>0x00008040</resetValue>
               <fields>
                  <field>
                     <name>PU_PD</name>
                     <description>These bits are used to enable an internal pull-up or pull-down resistor.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>PWR_GATING</name>
                     <description>The GPIO pin will be tristated when the selected power well is off.</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>INTR_DET</name>
                     <description>Determines the interrupt capability of the GPIO input.</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>3</bitWidth>
                  </field>
                  <field>
                     <name>EDGE_EN</name>
                     <description>Determines the interrupt capability of the GPIO input.</description>
                     <bitOffset>7</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>OUT_BUFF_TYPE</name>
                     <description>0 = Push-Pull, 1 = Open Drain</description>
                     <bitOffset>8</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>GPIO_DIR</name>
                     <description>Buffer direction when GPIO selected by pin mux 0 = Input, 1 = Output</description>
                     <bitOffset>9</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>GPIO_OUT_SEL</name>
                     <description>GPIO outputs registe select.0=GPIO ALTERNATE_GPIO_DATA 1=GPIO Output Register.</description>
                     <bitOffset>10</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>POL</name>
                     <description>1=Inverted; 0=Non-inverted</description>
                     <bitOffset>11</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>MUX_CTRL</name>
                     <description>00 = GPIO Function, 01 = Function 1, 10 = Function 2, 11 = Function 3.</description>
                     <bitOffset>12</bitOffset>
                     <bitWidth>3</bitWidth>
                  </field>
                  <field>
                     <name>INP_DIS</name>
                     <description>GPIO input disable</description>
                     <bitOffset>15</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>ALT_GPIO_DATA</name>
                     <description>GPIO Alternate Data Register.</description>
                     <bitOffset>16</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>GPIO_INP</name>
                     <description>GPIO input from pin, independent of the Mux selection for the pin or the Direction.</description>
                     <bitOffset>24</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <dim>8</dim>
               <dimIncrement>4</dimIncrement>
               <name>CTRL4[%s]</name>
               <description>GPIO Pin Control Register</description>
               <addressOffset>0x80</addressOffset>
               <size>32</size>
               <resetValue>0x00008040</resetValue>
               <fields>
                  <field>
                     <name>PU_PD</name>
                     <description>These bits are used to enable an internal pull-up or pull-down resistor.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>PWR_GATING</name>
                     <description>The GPIO pin will be tristated when the selected power well is off.</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>INTR_DET</name>
                     <description>Determines the interrupt capability of the GPIO input.</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>3</bitWidth>
                  </field>
                  <field>
                     <name>EDGE_EN</name>
                     <description>Determines the interrupt capability of the GPIO input.</description>
                     <bitOffset>7</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>OUT_BUFF_TYPE</name>
                     <description>0 = Push-Pull, 1 = Open Drain</description>
                     <bitOffset>8</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>GPIO_DIR</name>
                     <description>Buffer direction when GPIO selected by pin mux 0 = Input, 1 = Output</description>
                     <bitOffset>9</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>GPIO_OUT_SEL</name>
                     <description>GPIO outputs registe select.0=GPIO ALTERNATE_GPIO_DATA 1=GPIO Output Register.</description>
                     <bitOffset>10</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>POL</name>
                     <description>1=Inverted; 0=Non-inverted</description>
                     <bitOffset>11</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>MUX_CTRL</name>
                     <description>00 = GPIO Function, 01 = Function 1, 10 = Function 2, 11 = Function 3.</description>
                     <bitOffset>12</bitOffset>
                     <bitWidth>3</bitWidth>
                  </field>
                  <field>
                     <name>INP_DIS</name>
                     <description>GPIO input disable</description>
                     <bitOffset>15</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>ALT_GPIO_DATA</name>
                     <description>GPIO Alternate Data Register.</description>
                     <bitOffset>16</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>GPIO_INP</name>
                     <description>GPIO input from pin, independent of the Mux selection for the pin or the Direction.</description>
                     <bitOffset>24</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <dim>8</dim>
               <dimIncrement>4</dimIncrement>
               <name>CTRL5[%s]</name>
               <description>GPIO Pin Control Register</description>
               <addressOffset>0xa0</addressOffset>
               <size>32</size>
               <resetValue>0x00008040</resetValue>
               <fields>
                  <field>
                     <name>PU_PD</name>
                     <description>These bits are used to enable an internal pull-up or pull-down resistor.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>PWR_GATING</name>
                     <description>The GPIO pin will be tristated when the selected power well is off.</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>INTR_DET</name>
                     <description>Determines the interrupt capability of the GPIO input.</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>3</bitWidth>
                  </field>
                  <field>
                     <name>EDGE_EN</name>
                     <description>Determines the interrupt capability of the GPIO input.</description>
                     <bitOffset>7</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>OUT_BUFF_TYPE</name>
                     <description>0 = Push-Pull, 1 = Open Drain</description>
                     <bitOffset>8</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>GPIO_DIR</name>
                     <description>Buffer direction when GPIO selected by pin mux 0 = Input, 1 = Output</description>
                     <bitOffset>9</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>GPIO_OUT_SEL</name>
                     <description>GPIO outputs registe select.0=GPIO ALTERNATE_GPIO_DATA 1=GPIO Output Register.</description>
                     <bitOffset>10</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>POL</name>
                     <description>1=Inverted; 0=Non-inverted</description>
                     <bitOffset>11</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>MUX_CTRL</name>
                     <description>00 = GPIO Function, 01 = Function 1, 10 = Function 2, 11 = Function 3.</description>
                     <bitOffset>12</bitOffset>
                     <bitWidth>3</bitWidth>
                  </field>
                  <field>
                     <name>INP_DIS</name>
                     <description>GPIO input disable</description>
                     <bitOffset>15</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>ALT_GPIO_DATA</name>
                     <description>GPIO Alternate Data Register.</description>
                     <bitOffset>16</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>GPIO_INP</name>
                     <description>GPIO input from pin, independent of the Mux selection for the pin or the Direction.</description>
                     <bitOffset>24</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <dim>8</dim>
               <dimIncrement>4</dimIncrement>
               <name>CTRL6[%s]</name>
               <description>GPIO Pin Control Register</description>
               <addressOffset>0xc0</addressOffset>
               <size>32</size>
               <resetValue>0x00008040</resetValue>
               <fields>
                  <field>
                     <name>PU_PD</name>
                     <description>These bits are used to enable an internal pull-up or pull-down resistor.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>PWR_GATING</name>
                     <description>The GPIO pin will be tristated when the selected power well is off.</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>INTR_DET</name>
                     <description>Determines the interrupt capability of the GPIO input.</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>3</bitWidth>
                  </field>
                  <field>
                     <name>EDGE_EN</name>
                     <description>Determines the interrupt capability of the GPIO input.</description>
                     <bitOffset>7</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>OUT_BUFF_TYPE</name>
                     <description>0 = Push-Pull, 1 = Open Drain</description>
                     <bitOffset>8</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>GPIO_DIR</name>
                     <description>Buffer direction when GPIO selected by pin mux 0 = Input, 1 = Output</description>
                     <bitOffset>9</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>GPIO_OUT_SEL</name>
                     <description>GPIO outputs registe select.0=GPIO ALTERNATE_GPIO_DATA 1=GPIO Output Register.</description>
                     <bitOffset>10</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>POL</name>
                     <description>1=Inverted; 0=Non-inverted</description>
                     <bitOffset>11</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>MUX_CTRL</name>
                     <description>00 = GPIO Function, 01 = Function 1, 10 = Function 2, 11 = Function 3.</description>
                     <bitOffset>12</bitOffset>
                     <bitWidth>3</bitWidth>
                  </field>
                  <field>
                     <name>INP_DIS</name>
                     <description>GPIO input disable</description>
                     <bitOffset>15</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>ALT_GPIO_DATA</name>
                     <description>GPIO Alternate Data Register.</description>
                     <bitOffset>16</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>GPIO_INP</name>
                     <description>GPIO input from pin, independent of the Mux selection for the pin or the Direction.</description>
                     <bitOffset>24</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <dim>8</dim>
               <dimIncrement>4</dimIncrement>
               <name>CTRL7[%s]</name>
               <description>GPIO Pin Control Register</description>
               <addressOffset>0xe0</addressOffset>
               <size>32</size>
               <resetValue>0x00008040</resetValue>
               <fields>
                  <field>
                     <name>PU_PD</name>
                     <description>These bits are used to enable an internal pull-up or pull-down resistor.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>PWR_GATING</name>
                     <description>The GPIO pin will be tristated when the selected power well is off.</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>INTR_DET</name>
                     <description>Determines the interrupt capability of the GPIO input.</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>3</bitWidth>
                  </field>
                  <field>
                     <name>EDGE_EN</name>
                     <description>Determines the interrupt capability of the GPIO input.</description>
                     <bitOffset>7</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>OUT_BUFF_TYPE</name>
                     <description>0 = Push-Pull, 1 = Open Drain</description>
                     <bitOffset>8</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>GPIO_DIR</name>
                     <description>Buffer direction when GPIO selected by pin mux 0 = Input, 1 = Output</description>
                     <bitOffset>9</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>GPIO_OUT_SEL</name>
                     <description>GPIO outputs registe select.0=GPIO ALTERNATE_GPIO_DATA 1=GPIO Output Register.</description>
                     <bitOffset>10</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>POL</name>
                     <description>1=Inverted; 0=Non-inverted</description>
                     <bitOffset>11</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>MUX_CTRL</name>
                     <description>00 = GPIO Function, 01 = Function 1, 10 = Function 2, 11 = Function 3.</description>
                     <bitOffset>12</bitOffset>
                     <bitWidth>3</bitWidth>
                  </field>
                  <field>
                     <name>INP_DIS</name>
                     <description>GPIO input disable</description>
                     <bitOffset>15</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>ALT_GPIO_DATA</name>
                     <description>GPIO Alternate Data Register.</description>
                     <bitOffset>16</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>GPIO_INP</name>
                     <description>GPIO input from pin, independent of the Mux selection for the pin or the Direction.</description>
                     <bitOffset>24</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <dim>8</dim>
               <dimIncrement>4</dimIncrement>
               <name>CTRL10[%s]</name>
               <description>GPIO Pin Control Register</description>
               <addressOffset>0x100</addressOffset>
               <size>32</size>
               <resetValue>0x00008040</resetValue>
               <fields>
                  <field>
                     <name>PU_PD</name>
                     <description>These bits are used to enable an internal pull-up or pull-down resistor.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>PWR_GATING</name>
                     <description>The GPIO pin will be tristated when the selected power well is off.</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>INTR_DET</name>
                     <description>Determines the interrupt capability of the GPIO input.</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>3</bitWidth>
                  </field>
                  <field>
                     <name>EDGE_EN</name>
                     <description>Determines the interrupt capability of the GPIO input.</description>
                     <bitOffset>7</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>OUT_BUFF_TYPE</name>
                     <description>0 = Push-Pull, 1 = Open Drain</description>
                     <bitOffset>8</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>GPIO_DIR</name>
                     <description>Buffer direction when GPIO selected by pin mux 0 = Input, 1 = Output</description>
                     <bitOffset>9</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>GPIO_OUT_SEL</name>
                     <description>GPIO outputs registe select.0=GPIO ALTERNATE_GPIO_DATA 1=GPIO Output Register.</description>
                     <bitOffset>10</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>POL</name>
                     <description>1=Inverted; 0=Non-inverted</description>
                     <bitOffset>11</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>MUX_CTRL</name>
                     <description>00 = GPIO Function, 01 = Function 1, 10 = Function 2, 11 = Function 3.</description>
                     <bitOffset>12</bitOffset>
                     <bitWidth>3</bitWidth>
                  </field>
                  <field>
                     <name>INP_DIS</name>
                     <description>GPIO input disable</description>
                     <bitOffset>15</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>ALT_GPIO_DATA</name>
                     <description>GPIO Alternate Data Register.</description>
                     <bitOffset>16</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>GPIO_INP</name>
                     <description>GPIO input from pin, independent of the Mux selection for the pin or the Direction.</description>
                     <bitOffset>24</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <dim>8</dim>
               <dimIncrement>4</dimIncrement>
               <name>CTRL11[%s]</name>
               <description>GPIO Pin Control Register</description>
               <addressOffset>0x120</addressOffset>
               <size>32</size>
               <resetValue>0x00008040</resetValue>
               <fields>
                  <field>
                     <name>PU_PD</name>
                     <description>These bits are used to enable an internal pull-up or pull-down resistor.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>PWR_GATING</name>
                     <description>The GPIO pin will be tristated when the selected power well is off.</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>INTR_DET</name>
                     <description>Determines the interrupt capability of the GPIO input.</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>3</bitWidth>
                  </field>
                  <field>
                     <name>EDGE_EN</name>
                     <description>Determines the interrupt capability of the GPIO input.</description>
                     <bitOffset>7</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>OUT_BUFF_TYPE</name>
                     <description>0 = Push-Pull, 1 = Open Drain</description>
                     <bitOffset>8</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>GPIO_DIR</name>
                     <description>Buffer direction when GPIO selected by pin mux 0 = Input, 1 = Output</description>
                     <bitOffset>9</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>GPIO_OUT_SEL</name>
                     <description>GPIO outputs registe select.0=GPIO ALTERNATE_GPIO_DATA 1=GPIO Output Register.</description>
                     <bitOffset>10</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>POL</name>
                     <description>1=Inverted; 0=Non-inverted</description>
                     <bitOffset>11</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>MUX_CTRL</name>
                     <description>00 = GPIO Function, 01 = Function 1, 10 = Function 2, 11 = Function 3.</description>
                     <bitOffset>12</bitOffset>
                     <bitWidth>3</bitWidth>
                  </field>
                  <field>
                     <name>INP_DIS</name>
                     <description>GPIO input disable</description>
                     <bitOffset>15</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>ALT_GPIO_DATA</name>
                     <description>GPIO Alternate Data Register.</description>
                     <bitOffset>16</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>GPIO_INP</name>
                     <description>GPIO input from pin, independent of the Mux selection for the pin or the Direction.</description>
                     <bitOffset>24</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <dim>8</dim>
               <dimIncrement>4</dimIncrement>
               <name>CTRL12[%s]</name>
               <description>GPIO Pin Control Register</description>
               <addressOffset>0x140</addressOffset>
               <size>32</size>
               <resetValue>0x00008040</resetValue>
               <fields>
                  <field>
                     <name>PU_PD</name>
                     <description>These bits are used to enable an internal pull-up or pull-down resistor.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>PWR_GATING</name>
                     <description>The GPIO pin will be tristated when the selected power well is off.</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>INTR_DET</name>
                     <description>Determines the interrupt capability of the GPIO input.</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>3</bitWidth>
                  </field>
                  <field>
                     <name>EDGE_EN</name>
                     <description>Determines the interrupt capability of the GPIO input.</description>
                     <bitOffset>7</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>OUT_BUFF_TYPE</name>
                     <description>0 = Push-Pull, 1 = Open Drain</description>
                     <bitOffset>8</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>GPIO_DIR</name>
                     <description>Buffer direction when GPIO selected by pin mux 0 = Input, 1 = Output</description>
                     <bitOffset>9</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>GPIO_OUT_SEL</name>
                     <description>GPIO outputs registe select.0=GPIO ALTERNATE_GPIO_DATA 1=GPIO Output Register.</description>
                     <bitOffset>10</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>POL</name>
                     <description>1=Inverted; 0=Non-inverted</description>
                     <bitOffset>11</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>MUX_CTRL</name>
                     <description>00 = GPIO Function, 01 = Function 1, 10 = Function 2, 11 = Function 3.</description>
                     <bitOffset>12</bitOffset>
                     <bitWidth>3</bitWidth>
                  </field>
                  <field>
                     <name>INP_DIS</name>
                     <description>GPIO input disable</description>
                     <bitOffset>15</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>ALT_GPIO_DATA</name>
                     <description>GPIO Alternate Data Register.</description>
                     <bitOffset>16</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>GPIO_INP</name>
                     <description>GPIO input from pin, independent of the Mux selection for the pin or the Direction.</description>
                     <bitOffset>24</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <dim>8</dim>
               <dimIncrement>4</dimIncrement>
               <name>CTRL13[%s]</name>
               <description>GPIO Pin Control Register</description>
               <addressOffset>0x160</addressOffset>
               <size>32</size>
               <resetValue>0x00008040</resetValue>
               <fields>
                  <field>
                     <name>PU_PD</name>
                     <description>These bits are used to enable an internal pull-up or pull-down resistor.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>PWR_GATING</name>
                     <description>The GPIO pin will be tristated when the selected power well is off.</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>INTR_DET</name>
                     <description>Determines the interrupt capability of the GPIO input.</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>3</bitWidth>
                  </field>
                  <field>
                     <name>EDGE_EN</name>
                     <description>Determines the interrupt capability of the GPIO input.</description>
                     <bitOffset>7</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>OUT_BUFF_TYPE</name>
                     <description>0 = Push-Pull, 1 = Open Drain</description>
                     <bitOffset>8</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>GPIO_DIR</name>
                     <description>Buffer direction when GPIO selected by pin mux 0 = Input, 1 = Output</description>
                     <bitOffset>9</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>GPIO_OUT_SEL</name>
                     <description>GPIO outputs registe select.0=GPIO ALTERNATE_GPIO_DATA 1=GPIO Output Register.</description>
                     <bitOffset>10</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>POL</name>
                     <description>1=Inverted; 0=Non-inverted</description>
                     <bitOffset>11</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>MUX_CTRL</name>
                     <description>00 = GPIO Function, 01 = Function 1, 10 = Function 2, 11 = Function 3.</description>
                     <bitOffset>12</bitOffset>
                     <bitWidth>3</bitWidth>
                  </field>
                  <field>
                     <name>INP_DIS</name>
                     <description>GPIO input disable</description>
                     <bitOffset>15</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>ALT_GPIO_DATA</name>
                     <description>GPIO Alternate Data Register.</description>
                     <bitOffset>16</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>GPIO_INP</name>
                     <description>GPIO input from pin, independent of the Mux selection for the pin or the Direction.</description>
                     <bitOffset>24</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <dim>8</dim>
               <dimIncrement>4</dimIncrement>
               <name>CTRL14[%s]</name>
               <description>GPIO Pin Control Register</description>
               <addressOffset>0x180</addressOffset>
               <size>32</size>
               <resetValue>0x00008040</resetValue>
               <fields>
                  <field>
                     <name>PU_PD</name>
                     <description>These bits are used to enable an internal pull-up or pull-down resistor.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>PWR_GATING</name>
                     <description>The GPIO pin will be tristated when the selected power well is off.</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>INTR_DET</name>
                     <description>Determines the interrupt capability of the GPIO input.</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>3</bitWidth>
                  </field>
                  <field>
                     <name>EDGE_EN</name>
                     <description>Determines the interrupt capability of the GPIO input.</description>
                     <bitOffset>7</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>OUT_BUFF_TYPE</name>
                     <description>0 = Push-Pull, 1 = Open Drain</description>
                     <bitOffset>8</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>GPIO_DIR</name>
                     <description>Buffer direction when GPIO selected by pin mux 0 = Input, 1 = Output</description>
                     <bitOffset>9</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>GPIO_OUT_SEL</name>
                     <description>GPIO outputs registe select.0=GPIO ALTERNATE_GPIO_DATA 1=GPIO Output Register.</description>
                     <bitOffset>10</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>POL</name>
                     <description>1=Inverted; 0=Non-inverted</description>
                     <bitOffset>11</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>MUX_CTRL</name>
                     <description>00 = GPIO Function, 01 = Function 1, 10 = Function 2, 11 = Function 3.</description>
                     <bitOffset>12</bitOffset>
                     <bitWidth>3</bitWidth>
                  </field>
                  <field>
                     <name>INP_DIS</name>
                     <description>GPIO input disable</description>
                     <bitOffset>15</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>ALT_GPIO_DATA</name>
                     <description>GPIO Alternate Data Register.</description>
                     <bitOffset>16</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>GPIO_INP</name>
                     <description>GPIO input from pin, independent of the Mux selection for the pin or the Direction.</description>
                     <bitOffset>24</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <dim>8</dim>
               <dimIncrement>4</dimIncrement>
               <name>CTRL15[%s]</name>
               <description>GPIO Pin Control Register</description>
               <addressOffset>0x1a0</addressOffset>
               <size>32</size>
               <resetValue>0x00008040</resetValue>
               <fields>
                  <field>
                     <name>PU_PD</name>
                     <description>These bits are used to enable an internal pull-up or pull-down resistor.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>PWR_GATING</name>
                     <description>The GPIO pin will be tristated when the selected power well is off.</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>INTR_DET</name>
                     <description>Determines the interrupt capability of the GPIO input.</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>3</bitWidth>
                  </field>
                  <field>
                     <name>EDGE_EN</name>
                     <description>Determines the interrupt capability of the GPIO input.</description>
                     <bitOffset>7</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>OUT_BUFF_TYPE</name>
                     <description>0 = Push-Pull, 1 = Open Drain</description>
                     <bitOffset>8</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>GPIO_DIR</name>
                     <description>Buffer direction when GPIO selected by pin mux 0 = Input, 1 = Output</description>
                     <bitOffset>9</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>GPIO_OUT_SEL</name>
                     <description>GPIO outputs registe select.0=GPIO ALTERNATE_GPIO_DATA 1=GPIO Output Register.</description>
                     <bitOffset>10</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>POL</name>
                     <description>1=Inverted; 0=Non-inverted</description>
                     <bitOffset>11</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>MUX_CTRL</name>
                     <description>00 = GPIO Function, 01 = Function 1, 10 = Function 2, 11 = Function 3.</description>
                     <bitOffset>12</bitOffset>
                     <bitWidth>3</bitWidth>
                  </field>
                  <field>
                     <name>INP_DIS</name>
                     <description>GPIO input disable</description>
                     <bitOffset>15</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>ALT_GPIO_DATA</name>
                     <description>GPIO Alternate Data Register.</description>
                     <bitOffset>16</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>GPIO_INP</name>
                     <description>GPIO input from pin, independent of the Mux selection for the pin or the Direction.</description>
                     <bitOffset>24</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <dim>8</dim>
               <dimIncrement>4</dimIncrement>
               <name>CTRL16[%s]</name>
               <description>GPIO Pin Control Register</description>
               <addressOffset>0x1c0</addressOffset>
               <size>32</size>
               <resetValue>0x00008040</resetValue>
               <fields>
                  <field>
                     <name>PU_PD</name>
                     <description>These bits are used to enable an internal pull-up or pull-down resistor.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>PWR_GATING</name>
                     <description>The GPIO pin will be tristated when the selected power well is off.</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>INTR_DET</name>
                     <description>Determines the interrupt capability of the GPIO input.</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>3</bitWidth>
                  </field>
                  <field>
                     <name>EDGE_EN</name>
                     <description>Determines the interrupt capability of the GPIO input.</description>
                     <bitOffset>7</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>OUT_BUFF_TYPE</name>
                     <description>0 = Push-Pull, 1 = Open Drain</description>
                     <bitOffset>8</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>GPIO_DIR</name>
                     <description>Buffer direction when GPIO selected by pin mux 0 = Input, 1 = Output</description>
                     <bitOffset>9</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>GPIO_OUT_SEL</name>
                     <description>GPIO outputs registe select.0=GPIO ALTERNATE_GPIO_DATA 1=GPIO Output Register.</description>
                     <bitOffset>10</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>POL</name>
                     <description>1=Inverted; 0=Non-inverted</description>
                     <bitOffset>11</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>MUX_CTRL</name>
                     <description>00 = GPIO Function, 01 = Function 1, 10 = Function 2, 11 = Function 3.</description>
                     <bitOffset>12</bitOffset>
                     <bitWidth>3</bitWidth>
                  </field>
                  <field>
                     <name>INP_DIS</name>
                     <description>GPIO input disable</description>
                     <bitOffset>15</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>ALT_GPIO_DATA</name>
                     <description>GPIO Alternate Data Register.</description>
                     <bitOffset>16</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>GPIO_INP</name>
                     <description>GPIO input from pin, independent of the Mux selection for the pin or the Direction.</description>
                     <bitOffset>24</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <dim>8</dim>
               <dimIncrement>4</dimIncrement>
               <name>CTRL17[%s]</name>
               <description>GPIO Pin Control Register</description>
               <addressOffset>0x1e0</addressOffset>
               <size>32</size>
               <resetValue>0x00008040</resetValue>
               <fields>
                  <field>
                     <name>PU_PD</name>
                     <description>These bits are used to enable an internal pull-up or pull-down resistor.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>PWR_GATING</name>
                     <description>The GPIO pin will be tristated when the selected power well is off.</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>INTR_DET</name>
                     <description>Determines the interrupt capability of the GPIO input.</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>3</bitWidth>
                  </field>
                  <field>
                     <name>EDGE_EN</name>
                     <description>Determines the interrupt capability of the GPIO input.</description>
                     <bitOffset>7</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>OUT_BUFF_TYPE</name>
                     <description>0 = Push-Pull, 1 = Open Drain</description>
                     <bitOffset>8</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>GPIO_DIR</name>
                     <description>Buffer direction when GPIO selected by pin mux 0 = Input, 1 = Output</description>
                     <bitOffset>9</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>GPIO_OUT_SEL</name>
                     <description>GPIO outputs registe select.0=GPIO ALTERNATE_GPIO_DATA 1=GPIO Output Register.</description>
                     <bitOffset>10</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>POL</name>
                     <description>1=Inverted; 0=Non-inverted</description>
                     <bitOffset>11</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>MUX_CTRL</name>
                     <description>00 = GPIO Function, 01 = Function 1, 10 = Function 2, 11 = Function 3.</description>
                     <bitOffset>12</bitOffset>
                     <bitWidth>3</bitWidth>
                  </field>
                  <field>
                     <name>INP_DIS</name>
                     <description>GPIO input disable</description>
                     <bitOffset>15</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>ALT_GPIO_DATA</name>
                     <description>GPIO Alternate Data Register.</description>
                     <bitOffset>16</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>GPIO_INP</name>
                     <description>GPIO input from pin, independent of the Mux selection for the pin or the Direction.</description>
                     <bitOffset>24</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <dim>8</dim>
               <dimIncrement>4</dimIncrement>
               <name>CTRL20[%s]</name>
               <description>GPIO Pin Control Register</description>
               <addressOffset>0x200</addressOffset>
               <size>32</size>
               <resetValue>0x00008040</resetValue>
               <fields>
                  <field>
                     <name>PU_PD</name>
                     <description>These bits are used to enable an internal pull-up or pull-down resistor.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>PWR_GATING</name>
                     <description>The GPIO pin will be tristated when the selected power well is off.</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>INTR_DET</name>
                     <description>Determines the interrupt capability of the GPIO input.</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>3</bitWidth>
                  </field>
                  <field>
                     <name>EDGE_EN</name>
                     <description>Determines the interrupt capability of the GPIO input.</description>
                     <bitOffset>7</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>OUT_BUFF_TYPE</name>
                     <description>0 = Push-Pull, 1 = Open Drain</description>
                     <bitOffset>8</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>GPIO_DIR</name>
                     <description>Buffer direction when GPIO selected by pin mux 0 = Input, 1 = Output</description>
                     <bitOffset>9</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>GPIO_OUT_SEL</name>
                     <description>GPIO outputs registe select.0=GPIO ALTERNATE_GPIO_DATA 1=GPIO Output Register.</description>
                     <bitOffset>10</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>POL</name>
                     <description>1=Inverted; 0=Non-inverted</description>
                     <bitOffset>11</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>MUX_CTRL</name>
                     <description>00 = GPIO Function, 01 = Function 1, 10 = Function 2, 11 = Function 3.</description>
                     <bitOffset>12</bitOffset>
                     <bitWidth>3</bitWidth>
                  </field>
                  <field>
                     <name>INP_DIS</name>
                     <description>GPIO input disable</description>
                     <bitOffset>15</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>ALT_GPIO_DATA</name>
                     <description>GPIO Alternate Data Register.</description>
                     <bitOffset>16</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>GPIO_INP</name>
                     <description>GPIO input from pin, independent of the Mux selection for the pin or the Direction.</description>
                     <bitOffset>24</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <dim>8</dim>
               <dimIncrement>4</dimIncrement>
               <name>CTRL21[%s]</name>
               <description>GPIO Pin Control Register</description>
               <addressOffset>0x220</addressOffset>
               <size>32</size>
               <resetValue>0x00008040</resetValue>
               <fields>
                  <field>
                     <name>PU_PD</name>
                     <description>These bits are used to enable an internal pull-up or pull-down resistor.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>PWR_GATING</name>
                     <description>The GPIO pin will be tristated when the selected power well is off.</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>INTR_DET</name>
                     <description>Determines the interrupt capability of the GPIO input.</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>3</bitWidth>
                  </field>
                  <field>
                     <name>EDGE_EN</name>
                     <description>Determines the interrupt capability of the GPIO input.</description>
                     <bitOffset>7</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>OUT_BUFF_TYPE</name>
                     <description>0 = Push-Pull, 1 = Open Drain</description>
                     <bitOffset>8</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>GPIO_DIR</name>
                     <description>Buffer direction when GPIO selected by pin mux 0 = Input, 1 = Output</description>
                     <bitOffset>9</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>GPIO_OUT_SEL</name>
                     <description>GPIO outputs registe select.0=GPIO ALTERNATE_GPIO_DATA 1=GPIO Output Register.</description>
                     <bitOffset>10</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>POL</name>
                     <description>1=Inverted; 0=Non-inverted</description>
                     <bitOffset>11</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>MUX_CTRL</name>
                     <description>00 = GPIO Function, 01 = Function 1, 10 = Function 2, 11 = Function 3.</description>
                     <bitOffset>12</bitOffset>
                     <bitWidth>3</bitWidth>
                  </field>
                  <field>
                     <name>INP_DIS</name>
                     <description>GPIO input disable</description>
                     <bitOffset>15</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>ALT_GPIO_DATA</name>
                     <description>GPIO Alternate Data Register.</description>
                     <bitOffset>16</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>GPIO_INP</name>
                     <description>GPIO input from pin, independent of the Mux selection for the pin or the Direction.</description>
                     <bitOffset>24</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <dim>8</dim>
               <dimIncrement>4</dimIncrement>
               <name>CTRL22[%s]</name>
               <description>GPIO Pin Control Register</description>
               <addressOffset>0x240</addressOffset>
               <size>32</size>
               <resetValue>0x00008040</resetValue>
               <fields>
                  <field>
                     <name>PU_PD</name>
                     <description>These bits are used to enable an internal pull-up or pull-down resistor.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>PWR_GATING</name>
                     <description>The GPIO pin will be tristated when the selected power well is off.</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>INTR_DET</name>
                     <description>Determines the interrupt capability of the GPIO input.</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>3</bitWidth>
                  </field>
                  <field>
                     <name>EDGE_EN</name>
                     <description>Determines the interrupt capability of the GPIO input.</description>
                     <bitOffset>7</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>OUT_BUFF_TYPE</name>
                     <description>0 = Push-Pull, 1 = Open Drain</description>
                     <bitOffset>8</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>GPIO_DIR</name>
                     <description>Buffer direction when GPIO selected by pin mux 0 = Input, 1 = Output</description>
                     <bitOffset>9</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>GPIO_OUT_SEL</name>
                     <description>GPIO outputs registe select.0=GPIO ALTERNATE_GPIO_DATA 1=GPIO Output Register.</description>
                     <bitOffset>10</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>POL</name>
                     <description>1=Inverted; 0=Non-inverted</description>
                     <bitOffset>11</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>MUX_CTRL</name>
                     <description>00 = GPIO Function, 01 = Function 1, 10 = Function 2, 11 = Function 3.</description>
                     <bitOffset>12</bitOffset>
                     <bitWidth>3</bitWidth>
                  </field>
                  <field>
                     <name>INP_DIS</name>
                     <description>GPIO input disable</description>
                     <bitOffset>15</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>ALT_GPIO_DATA</name>
                     <description>GPIO Alternate Data Register.</description>
                     <bitOffset>16</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>GPIO_INP</name>
                     <description>GPIO input from pin, independent of the Mux selection for the pin or the Direction.</description>
                     <bitOffset>24</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <dim>8</dim>
               <dimIncrement>4</dimIncrement>
               <name>CTRL23[%s]</name>
               <description>GPIO Pin Control Register</description>
               <addressOffset>0x260</addressOffset>
               <size>32</size>
               <resetValue>0x00008040</resetValue>
               <fields>
                  <field>
                     <name>PU_PD</name>
                     <description>These bits are used to enable an internal pull-up or pull-down resistor.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>PWR_GATING</name>
                     <description>The GPIO pin will be tristated when the selected power well is off.</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>INTR_DET</name>
                     <description>Determines the interrupt capability of the GPIO input.</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>3</bitWidth>
                  </field>
                  <field>
                     <name>EDGE_EN</name>
                     <description>Determines the interrupt capability of the GPIO input.</description>
                     <bitOffset>7</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>OUT_BUFF_TYPE</name>
                     <description>0 = Push-Pull, 1 = Open Drain</description>
                     <bitOffset>8</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>GPIO_DIR</name>
                     <description>Buffer direction when GPIO selected by pin mux 0 = Input, 1 = Output</description>
                     <bitOffset>9</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>GPIO_OUT_SEL</name>
                     <description>GPIO outputs registe select.0=GPIO ALTERNATE_GPIO_DATA 1=GPIO Output Register.</description>
                     <bitOffset>10</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>POL</name>
                     <description>1=Inverted; 0=Non-inverted</description>
                     <bitOffset>11</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>MUX_CTRL</name>
                     <description>00 = GPIO Function, 01 = Function 1, 10 = Function 2, 11 = Function 3.</description>
                     <bitOffset>12</bitOffset>
                     <bitWidth>3</bitWidth>
                  </field>
                  <field>
                     <name>INP_DIS</name>
                     <description>GPIO input disable</description>
                     <bitOffset>15</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>ALT_GPIO_DATA</name>
                     <description>GPIO Alternate Data Register.</description>
                     <bitOffset>16</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>GPIO_INP</name>
                     <description>GPIO input from pin, independent of the Mux selection for the pin or the Direction.</description>
                     <bitOffset>24</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <dim>8</dim>
               <dimIncrement>4</dimIncrement>
               <name>CTRL24[%s]</name>
               <description>GPIO Pin Control Register</description>
               <addressOffset>0x280</addressOffset>
               <size>32</size>
               <resetValue>0x00008040</resetValue>
               <fields>
                  <field>
                     <name>PU_PD</name>
                     <description>These bits are used to enable an internal pull-up or pull-down resistor.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>PWR_GATING</name>
                     <description>The GPIO pin will be tristated when the selected power well is off.</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>INTR_DET</name>
                     <description>Determines the interrupt capability of the GPIO input.</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>3</bitWidth>
                  </field>
                  <field>
                     <name>EDGE_EN</name>
                     <description>Determines the interrupt capability of the GPIO input.</description>
                     <bitOffset>7</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>OUT_BUFF_TYPE</name>
                     <description>0 = Push-Pull, 1 = Open Drain</description>
                     <bitOffset>8</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>GPIO_DIR</name>
                     <description>Buffer direction when GPIO selected by pin mux 0 = Input, 1 = Output</description>
                     <bitOffset>9</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>GPIO_OUT_SEL</name>
                     <description>GPIO outputs registe select.0=GPIO ALTERNATE_GPIO_DATA 1=GPIO Output Register.</description>
                     <bitOffset>10</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>POL</name>
                     <description>1=Inverted; 0=Non-inverted</description>
                     <bitOffset>11</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>MUX_CTRL</name>
                     <description>00 = GPIO Function, 01 = Function 1, 10 = Function 2, 11 = Function 3.</description>
                     <bitOffset>12</bitOffset>
                     <bitWidth>3</bitWidth>
                  </field>
                  <field>
                     <name>INP_DIS</name>
                     <description>GPIO input disable</description>
                     <bitOffset>15</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>ALT_GPIO_DATA</name>
                     <description>GPIO Alternate Data Register.</description>
                     <bitOffset>16</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>GPIO_INP</name>
                     <description>GPIO input from pin, independent of the Mux selection for the pin or the Direction.</description>
                     <bitOffset>24</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <dim>8</dim>
               <dimIncrement>4</dimIncrement>
               <name>CTRL25[%s]</name>
               <description>GPIO Pin Control Register</description>
               <addressOffset>0x2a0</addressOffset>
               <size>32</size>
               <resetValue>0x00008040</resetValue>
               <fields>
                  <field>
                     <name>PU_PD</name>
                     <description>These bits are used to enable an internal pull-up or pull-down resistor.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>PWR_GATING</name>
                     <description>The GPIO pin will be tristated when the selected power well is off.</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>INTR_DET</name>
                     <description>Determines the interrupt capability of the GPIO input.</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>3</bitWidth>
                  </field>
                  <field>
                     <name>EDGE_EN</name>
                     <description>Determines the interrupt capability of the GPIO input.</description>
                     <bitOffset>7</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>OUT_BUFF_TYPE</name>
                     <description>0 = Push-Pull, 1 = Open Drain</description>
                     <bitOffset>8</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>GPIO_DIR</name>
                     <description>Buffer direction when GPIO selected by pin mux 0 = Input, 1 = Output</description>
                     <bitOffset>9</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>GPIO_OUT_SEL</name>
                     <description>GPIO outputs registe select.0=GPIO ALTERNATE_GPIO_DATA 1=GPIO Output Register.</description>
                     <bitOffset>10</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>POL</name>
                     <description>1=Inverted; 0=Non-inverted</description>
                     <bitOffset>11</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>MUX_CTRL</name>
                     <description>00 = GPIO Function, 01 = Function 1, 10 = Function 2, 11 = Function 3.</description>
                     <bitOffset>12</bitOffset>
                     <bitWidth>3</bitWidth>
                  </field>
                  <field>
                     <name>INP_DIS</name>
                     <description>GPIO input disable</description>
                     <bitOffset>15</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>ALT_GPIO_DATA</name>
                     <description>GPIO Alternate Data Register.</description>
                     <bitOffset>16</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>GPIO_INP</name>
                     <description>GPIO input from pin, independent of the Mux selection for the pin or the Direction.</description>
                     <bitOffset>24</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <dim>1</dim>
               <dimIncrement>4</dimIncrement>
               <name>CTRL26[%s]</name>
               <description>GPIO Pin Control Register</description>
               <addressOffset>0x2c0</addressOffset>
               <size>32</size>
               <resetValue>0x00008040</resetValue>
               <fields>
                  <field>
                     <name>PU_PD</name>
                     <description>These bits are used to enable an internal pull-up or pull-down resistor.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>PWR_GATING</name>
                     <description>The GPIO pin will be tristated when the selected power well is off.</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>INTR_DET</name>
                     <description>Determines the interrupt capability of the GPIO input.</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>3</bitWidth>
                  </field>
                  <field>
                     <name>EDGE_EN</name>
                     <description>Determines the interrupt capability of the GPIO input.</description>
                     <bitOffset>7</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>OUT_BUFF_TYPE</name>
                     <description>0 = Push-Pull, 1 = Open Drain</description>
                     <bitOffset>8</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>GPIO_DIR</name>
                     <description>Buffer direction when GPIO selected by pin mux 0 = Input, 1 = Output</description>
                     <bitOffset>9</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>GPIO_OUT_SEL</name>
                     <description>GPIO outputs registe select.0=GPIO ALTERNATE_GPIO_DATA 1=GPIO Output Register.</description>
                     <bitOffset>10</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>POL</name>
                     <description>1=Inverted; 0=Non-inverted</description>
                     <bitOffset>11</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>MUX_CTRL</name>
                     <description>00 = GPIO Function, 01 = Function 1, 10 = Function 2, 11 = Function 3.</description>
                     <bitOffset>12</bitOffset>
                     <bitWidth>3</bitWidth>
                  </field>
                  <field>
                     <name>INP_DIS</name>
                     <description>GPIO input disable</description>
                     <bitOffset>15</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>ALT_GPIO_DATA</name>
                     <description>GPIO Alternate Data Register.</description>
                     <bitOffset>16</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>GPIO_INP</name>
                     <description>GPIO input from pin, independent of the Mux selection for the pin or the Direction.</description>
                     <bitOffset>24</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <dim>6</dim>
               <dimIncrement>4</dimIncrement>
               <name>PARIN[%s]</name>
               <description>The GPIO Input Registers.</description>
               <addressOffset>0x300</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <dim>6</dim>
               <dimIncrement>4</dimIncrement>
               <name>PAROUT[%s]</name>
               <description>The GPIO Output Registers.</description>
               <addressOffset>0x380</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <dim>8</dim>
               <dimIncrement>4</dimIncrement>
               <name>CTRL2P0[%s]</name>
               <description>The GPIO PIN_CTRL2 Registers</description>
               <addressOffset>0x500</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>SLEW_CTRL</name>
                     <description>Selects slew rate on the pin. 1=fast 0=slow</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>DRIV_STREN</name>
                     <description>Selects the drive strength on the pin. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <dim>8</dim>
               <dimIncrement>4</dimIncrement>
               <name>CTRL2P1[%s]</name>
               <description>The GPIO PIN_CTRL2 Registers</description>
               <addressOffset>0x520</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>SLEW_CTRL</name>
                     <description>Selects slew rate on the pin. 1=fast 0=slow</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>DRIV_STREN</name>
                     <description>Selects the drive strength on the pin. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <dim>8</dim>
               <dimIncrement>4</dimIncrement>
               <name>CTRL2P2[%s]</name>
               <description>The GPIO PIN_CTRL2 Registers</description>
               <addressOffset>0x540</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>SLEW_CTRL</name>
                     <description>Selects slew rate on the pin. 1=fast 0=slow</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>DRIV_STREN</name>
                     <description>Selects the drive strength on the pin. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <dim>8</dim>
               <dimIncrement>4</dimIncrement>
               <name>CTRL2P3[%s]</name>
               <description>The GPIO PIN_CTRL2 Registers</description>
               <addressOffset>0x560</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>SLEW_CTRL</name>
                     <description>Selects slew rate on the pin. 1=fast 0=slow</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>DRIV_STREN</name>
                     <description>Selects the drive strength on the pin. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <dim>8</dim>
               <dimIncrement>4</dimIncrement>
               <name>CTRL2P4[%s]</name>
               <description>The GPIO PIN_CTRL2 Registers</description>
               <addressOffset>0x580</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>SLEW_CTRL</name>
                     <description>Selects slew rate on the pin. 1=fast 0=slow</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>DRIV_STREN</name>
                     <description>Selects the drive strength on the pin. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <dim>8</dim>
               <dimIncrement>4</dimIncrement>
               <name>CTRL2P5[%s]</name>
               <description>The GPIO PIN_CTRL2 Registers</description>
               <addressOffset>0x5a0</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>SLEW_CTRL</name>
                     <description>Selects slew rate on the pin. 1=fast 0=slow</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>DRIV_STREN</name>
                     <description>Selects the drive strength on the pin. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <dim>8</dim>
               <dimIncrement>4</dimIncrement>
               <name>CTRL2P6[%s]</name>
               <description>The GPIO PIN_CTRL2 Registers</description>
               <addressOffset>0x5c0</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>SLEW_CTRL</name>
                     <description>Selects slew rate on the pin. 1=fast 0=slow</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>DRIV_STREN</name>
                     <description>Selects the drive strength on the pin. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <dim>8</dim>
               <dimIncrement>4</dimIncrement>
               <name>CTRL2P7[%s]</name>
               <description>The GPIO PIN_CTRL2 Registers</description>
               <addressOffset>0x5e0</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>SLEW_CTRL</name>
                     <description>Selects slew rate on the pin. 1=fast 0=slow</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>DRIV_STREN</name>
                     <description>Selects the drive strength on the pin. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <dim>8</dim>
               <dimIncrement>4</dimIncrement>
               <name>CTRL2P10[%s]</name>
               <description>The GPIO PIN_CTRL2 Registers</description>
               <addressOffset>0x600</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>SLEW_CTRL</name>
                     <description>Selects slew rate on the pin. 1=fast 0=slow</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>DRIV_STREN</name>
                     <description>Selects the drive strength on the pin. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <dim>8</dim>
               <dimIncrement>4</dimIncrement>
               <name>CTRL2P11[%s]</name>
               <description>The GPIO PIN_CTRL2 Registers</description>
               <addressOffset>0x620</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>SLEW_CTRL</name>
                     <description>Selects slew rate on the pin. 1=fast 0=slow</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>DRIV_STREN</name>
                     <description>Selects the drive strength on the pin. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <dim>8</dim>
               <dimIncrement>4</dimIncrement>
               <name>CTRL2P12[%s]</name>
               <description>The GPIO PIN_CTRL2 Registers</description>
               <addressOffset>0x640</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>SLEW_CTRL</name>
                     <description>Selects slew rate on the pin. 1=fast 0=slow</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>DRIV_STREN</name>
                     <description>Selects the drive strength on the pin. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <dim>8</dim>
               <dimIncrement>4</dimIncrement>
               <name>CTRL2P13[%s]</name>
               <description>The GPIO PIN_CTRL2 Registers</description>
               <addressOffset>0x660</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>SLEW_CTRL</name>
                     <description>Selects slew rate on the pin. 1=fast 0=slow</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>DRIV_STREN</name>
                     <description>Selects the drive strength on the pin. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <dim>8</dim>
               <dimIncrement>4</dimIncrement>
               <name>CTRL2P14[%s]</name>
               <description>The GPIO PIN_CTRL2 Registers</description>
               <addressOffset>0x680</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>SLEW_CTRL</name>
                     <description>Selects slew rate on the pin. 1=fast 0=slow</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>DRIV_STREN</name>
                     <description>Selects the drive strength on the pin. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <dim>8</dim>
               <dimIncrement>4</dimIncrement>
               <name>CTRL2P15[%s]</name>
               <description>The GPIO PIN_CTRL2 Registers</description>
               <addressOffset>0x6a0</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>SLEW_CTRL</name>
                     <description>Selects slew rate on the pin. 1=fast 0=slow</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>DRIV_STREN</name>
                     <description>Selects the drive strength on the pin. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <dim>8</dim>
               <dimIncrement>4</dimIncrement>
               <name>CTRL2P16[%s]</name>
               <description>The GPIO PIN_CTRL2 Registers</description>
               <addressOffset>0x6c0</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>SLEW_CTRL</name>
                     <description>Selects slew rate on the pin. 1=fast 0=slow</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>DRIV_STREN</name>
                     <description>Selects the drive strength on the pin. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <dim>8</dim>
               <dimIncrement>4</dimIncrement>
               <name>CTRL2P17[%s]</name>
               <description>The GPIO PIN_CTRL2 Registers</description>
               <addressOffset>0x6e0</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>SLEW_CTRL</name>
                     <description>Selects slew rate on the pin. 1=fast 0=slow</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>DRIV_STREN</name>
                     <description>Selects the drive strength on the pin. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <dim>8</dim>
               <dimIncrement>4</dimIncrement>
               <name>CTRL2P20[%s]</name>
               <description>The GPIO PIN_CTRL2 Registers</description>
               <addressOffset>0x700</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>SLEW_CTRL</name>
                     <description>Selects slew rate on the pin. 1=fast 0=slow</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>DRIV_STREN</name>
                     <description>Selects the drive strength on the pin. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <dim>8</dim>
               <dimIncrement>4</dimIncrement>
               <name>CTRL2P21[%s]</name>
               <description>The GPIO PIN_CTRL2 Registers</description>
               <addressOffset>0x720</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>SLEW_CTRL</name>
                     <description>Selects slew rate on the pin. 1=fast 0=slow</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>DRIV_STREN</name>
                     <description>Selects the drive strength on the pin. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <dim>8</dim>
               <dimIncrement>4</dimIncrement>
               <name>CTRL2P22[%s]</name>
               <description>The GPIO PIN_CTRL2 Registers</description>
               <addressOffset>0x740</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>SLEW_CTRL</name>
                     <description>Selects slew rate on the pin. 1=fast 0=slow</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>DRIV_STREN</name>
                     <description>Selects the drive strength on the pin. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <dim>8</dim>
               <dimIncrement>4</dimIncrement>
               <name>CTRL2P23[%s]</name>
               <description>The GPIO PIN_CTRL2 Registers</description>
               <addressOffset>0x760</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>SLEW_CTRL</name>
                     <description>Selects slew rate on the pin. 1=fast 0=slow</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>DRIV_STREN</name>
                     <description>Selects the drive strength on the pin. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <dim>8</dim>
               <dimIncrement>4</dimIncrement>
               <name>CTRL2P24[%s]</name>
               <description>The GPIO PIN_CTRL2 Registers</description>
               <addressOffset>0x780</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>SLEW_CTRL</name>
                     <description>Selects slew rate on the pin. 1=fast 0=slow</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>DRIV_STREN</name>
                     <description>Selects the drive strength on the pin. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <dim>8</dim>
               <dimIncrement>4</dimIncrement>
               <name>CTRL2P25[%s]</name>
               <description>The GPIO PIN_CTRL2 Registers</description>
               <addressOffset>0x7a0</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>SLEW_CTRL</name>
                     <description>Selects slew rate on the pin. 1=fast 0=slow</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>DRIV_STREN</name>
                     <description>Selects the drive strength on the pin. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <dim>1</dim>
               <dimIncrement>4</dimIncrement>
               <name>CTRL2P26[%s]</name>
               <description>The GPIO PIN_CTRL2 Registers</description>
               <addressOffset>0x7c0</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>SLEW_CTRL</name>
                     <description>Selects slew rate on the pin. 1=fast 0=slow</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>DRIV_STREN</name>
                     <description>Selects the drive strength on the pin. 00 = 2mA, 01 = 4mA, 10 = 8mA, 11 = 12mA</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
               </fields>
            </register>
         </registers>
      </peripheral>
      <peripheral>
         <name>WDT</name>
         <version>881.0</version>
         <description>The function of the Watchdog Timer is to provide a mechanism to detect if the internal embedded controller has failed.</description>
         <groupName>WDT</groupName>
         <prependToName>WDT_</prependToName>
         <baseAddress>0x40000400</baseAddress>
         <addressBlock>
            <offset>0</offset>
            <size>0x15</size>
            <usage>registers</usage>
         </addressBlock>
         <interrupt>
            <name>GIRQ21</name>
            <value>13</value>
         </interrupt>
         <interrupt>
            <name>WDT</name>
            <value>171</value>
         </interrupt>
         <registers>
            <register>
               <name>LOAD</name>
               <description>Writing this field reloads the Watch Dog Timer counter.</description>
               <addressOffset>0x0</addressOffset>
               <size>16</size>
               <resetValue>0xFFFF</resetValue>
            </register>
            <register>
               <name>CTRL</name>
               <description>WDT Control Register</description>
               <addressOffset>0x4</addressOffset>
               <size>16</size>
               <resetValue>0x0000</resetValue>
               <fields>
                  <field>
                     <name>WDT_EN</name>
                     <description>WDT Block enabled</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>WDT_STS</name>
                     <description>WDT_STATUS is set by hardware if the last reset of the device was caused by an underflow of the WDT. This bit must\n      be cleared by the EC firmware writing a '1' to this bit. Writing a '0' to this bit has no effect.</description>
                     <bitOffset>1</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>HIB_TMR0_STL</name>
                     <description>This bit enables the WDT Stall function if the Hibernation Timer 0 is active.\n      1=The WDT is stalled while the Hibernation Timer 0 is active\n      0=The WDT is not affected by Hibernation Timer 0.</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>WK_TMR_STL</name>
                     <description>This bit enables the WDT Stall function if the Week Timer is active.\n      1=The WDT is stalled while the Week Timer is active\n      0=The WDT is not affected by the Week Timer.</description>
                     <bitOffset>3</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>JTAG_STL</name>
                     <description>This bit enables the WDT Stall function if JTAG or SWD debug functions are active\n      1=The WDT is stalled while either JTAG or SWD is active\n      0=The WDT is not affected by the JTAG debug interface.</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>WDT_RST</name>
                     <description>If the WDT_RESET bit is set and the watch dog timer expires, the Watch dog module will         generate interrupt and clear the WDT_RESET to 0b.</description>
                     <bitOffset>9</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>KICK</name>
               <description>The WDT Kick Register is a strobe. Reads of this register return 0. Writes to this register cause the WDT to reload\n     the WDT Load Register value and start decrementing when the WDT_ENABLE bit in the WDT Control Register is set to '1'. When the WDT_ENABLE\n     bit in the WDT Control Register is cleared to '0', writes to the WDT Kick Register have no effect.</description>
               <addressOffset>0x8</addressOffset>
               <size>8</size>
               <access>write-only</access>
               <resetValue>0x00</resetValue>
            </register>
            <register>
               <name>CNT</name>
               <description>This read-only register provides the current WDT count.</description>
               <addressOffset>0xC</addressOffset>
               <size>16</size>
               <access>read-only</access>
               <resetValue>0xFFFF</resetValue>
            </register>
            <register>
               <name>STS</name>
               <description>This register provides the current WDT count.</description>
               <addressOffset>0x10</addressOffset>
               <size>8</size>
               <resetValue>0x00</resetValue>
               <fields>
                  <field>
                     <name>WDT_EV_IRQ</name>
                     <description>WDT_EVENT_IRQ : This bit indicates the status of interrupt from Watch dog module.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>IEN</name>
               <description>Watch Dog Interrupt Enable Register.\n</description>
               <addressOffset>0x14</addressOffset>
               <size>8</size>
               <resetValue>0x00</resetValue>
               <fields>
                  <field>
                     <name>WDT_INTEN</name>
                     <description>WDT_Int_Enable: This is the interrupt enables bit for WDT_INT interrupt.\n                   1= WDT_INT Interrupt Enable                   0= WDT_INT Interrupt Disabled</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
         </registers>
      </peripheral>
      <peripheral>
         <name>TIMER16_0</name>
         <version>108a1.0</version>
         <description>This 16-bit timer block offers a simple mechanism for firmware to maintain a time base</description>
         <groupName>TIMER16</groupName>
         <prependToName>TIMER16_</prependToName>
         <baseAddress>0x40000C00</baseAddress>
         <addressBlock>
            <offset>0</offset>
            <size>0x14</size>
            <usage>registers</usage>
         </addressBlock>
         <interrupt>
            <name>GIRQ23</name>
            <value>14</value>
         </interrupt>
         <interrupt>
            <name>TIMER16_0</name>
            <value>136</value>
         </interrupt>
         <registers>
            <register>
               <name>CNT</name>
               <description>This is the value of the Timer counter. This is updated by Hardware but may be set by Firmware.</description>
               <addressOffset>0x0</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>PRLD</name>
               <description>This is the value of the Timer pre-load for the counter. This is used by H/W when the counter is to be restarted\n    automatically; this will become the new value of the counter upon restart.</description>
               <addressOffset>0x4</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>STS</name>
               <description>This is the interrupt status that fires when the timer reaches its limit</description>
               <addressOffset>0x8</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>EVT_INT</name>
                     <description>This is the interrupt status that fires when the timer reaches its limit. This is the interrupt status that fires when\n        the timer reaches its limit. This may be level or a self clearing signal cycle pulse, based on the AUTO_RESTART bit in the Timer\n        Control Register. If the timer is set to automatically restart, it will provide a pulse, otherwise a level is provided.(R/WC)</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>IEN</name>
               <description>This is the interrupt enable for the status EVENT_INTERRUPT bit in the Timer Status Register</description>
               <addressOffset>0xC</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>EN</name>
                     <description>This is the interrupt enable for the status EVENT_INTERRUPT bit in the Timer Status Register.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>CTRL</name>
               <description>Timer Control Register</description>
               <addressOffset>0x10</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>EN</name>
                     <description>This enables the block for operation. 1=This block will function normally;\n     0=This block will gate its clock and go into its lowest power state</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>CNT_UP</name>
                     <description>This selects the counter direction. When the counter in incrementing the counter will saturate and trigger the event\n     when it reaches all F's. When the counter is decrementing the counter will saturate when it reaches 0h. 1=The counter will increment;\n     0=The counter will decrement</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>AU_RESTRT</name>
                     <description>This will select the action taken upon completing a count.\n     1=The counter will automatically restart the count, using the contents of the Timer Preload Register to load the Timer Count Register.\n     The interrupt will be set in edge mode\n     0=The counter will simply enter a done state and wait for further control inputs. The interrupt will be set in level mode.</description>
                     <bitOffset>3</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>SFT_RST</name>
                     <description>This is a soft reset. This is self clearing 1 cycle after it is written. Firmware does not need\n     to wait before reconfiguring the Basic Timer following soft reset.</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>STRT</name>
                     <description>This bit triggers the timer counter. The counter will operate until it hits its terminating condition. This will\n     clear this bit. It should be noted that when operating in restart mode, there is no terminating condition for the counter, so\n     this bit will never clear. Clearing this bit will halt the timer counter.</description>
                     <bitOffset>5</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>RLD</name>
                     <description>This bit reloads the counter without interrupting it operation. This will not function if the timer has already\n     completed (when the START bit in this register is '0'). This is used to periodically prevent the timer from firing when an\n     event occurs. Usage while the timer is off may result in erroneous behaviour.</description>
                     <bitOffset>6</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>HLT</name>
                     <description>This is a halt bit. This will halt the timer as long as it is active. Once the halt is inactive, the timer will\n     start from where it left off. 1=Timer is halted. It stops counting. The clock divider will also be reset. 0=Timer runs normally.</description>
                     <bitOffset>7</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>PRESCALE</name>
                     <description>This is used to divide down the system clock through clock enables to lower the power consumption of the block and allow\n     slow timers. Updating this value during operation may result in erroneous clock enable pulses until the clock divider restarts.\n     The number of clocks per clock enable pulse is (Value + 1); a setting of 0 runs at the full clock speed, while a setting of 1\n     runs at half speed.</description>
                     <bitOffset>16</bitOffset>
                     <bitWidth>16</bitWidth>
                  </field>
               </fields>
            </register>
         </registers>
      </peripheral>
      <peripheral derivedFrom="TIMER16_0">
         <name>TIMER16_1</name>
         <baseAddress>0x40000C20</baseAddress>
         <interrupt>
            <name>TIMER16_1</name>
            <value>137</value>
         </interrupt>
      </peripheral>
      <peripheral>
         <name>TIMER32_0</name>
         <version>108b1.0</version>
         <description>This 32-bit timer block offers a simple mechanism for firmware to maintain a time base</description>
         <groupName>TIMER32</groupName>
         <prependToName>TIMER32_</prependToName>
         <baseAddress>0x40000C80</baseAddress>
         <addressBlock>
            <offset>0</offset>
            <size>0x14</size>
            <usage>registers</usage>
         </addressBlock>
         <interrupt>
            <name>TIMER32_0</name>
            <value>140</value>
         </interrupt>
         <registers>
            <register>
               <name>CNT</name>
               <description>This is the value of the Timer counter. This is updated by Hardware but may be set by Firmware.</description>
               <addressOffset>0x0</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>PRLD</name>
               <description>This is the value of the Timer pre-load for the counter. This is used by H/W when the counter is to be restarted\n    automatically; this will become the new value of the counter upon restart.</description>
               <addressOffset>0x4</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>STS</name>
               <description>This is the interrupt status that fires when the timer reaches its limit</description>
               <addressOffset>0x8</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>EVT_INT</name>
                     <description>This is the interrupt status that fires when the timer reaches its limit. This is the interrupt status that fires when\n        the timer reaches its limit. This may be level or a self clearing signal cycle pulse, based on the AUTO_RESTART bit in the Timer\n        Control Register. If the timer is set to automatically restart, it will provide a pulse, otherwise a level is provided.(R/WC)</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>IEN</name>
               <description>This is the interrupt enable for the status EVENT_INTERRUPT bit in the Timer Status Register</description>
               <addressOffset>0xC</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>EN</name>
                     <description>This is the interrupt enable for the status EVENT_INTERRUPT bit in the Timer Status Register.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>CTRL</name>
               <description>Timer Control Register</description>
               <addressOffset>0x10</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>EN</name>
                     <description>This enables the block for operation. 1=This block will function normally;\n     0=This block will gate its clock and go into its lowest power state</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>CNT_UP</name>
                     <description>This selects the counter direction. When the counter in incrementing the counter will saturate and trigger the event\n     when it reaches all F's. When the counter is decrementing the counter will saturate when it reaches 0h. 1=The counter will increment;\n     0=The counter will decrement</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>AU_RESTRT</name>
                     <description>This will select the action taken upon completing a count.\n     1=The counter will automatically restart the count, using the contents of the Timer Preload Register to load the Timer Count Register.\n     The interrupt will be set in edge mode\n     0=The counter will simply enter a done state and wait for further control inputs. The interrupt will be set in level mode.</description>
                     <bitOffset>3</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>SFT_RST</name>
                     <description>This is a soft reset. This is self clearing 1 cycle after it is written. Firmware does not need\n     to wait before reconfiguring the Basic Timer following soft reset.</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>STRT</name>
                     <description>This bit triggers the timer counter. The counter will operate until it hits its terminating condition. This will\n     clear this bit. It should be noted that when operating in restart mode, there is no terminating condition for the counter, so\n     this bit will never clear. Clearing this bit will halt the timer counter.</description>
                     <bitOffset>5</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>RLD</name>
                     <description>This bit reloads the counter without interrupting it operation. This will not function if the timer has already\n     completed (when the START bit in this register is '0'). This is used to periodically prevent the timer from firing when an\n     event occurs. Usage while the timer is off may result in erroneous behaviour.</description>
                     <bitOffset>6</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>HLT</name>
                     <description>This is a halt bit. This will halt the timer as long as it is active. Once the halt is inactive, the timer will\n     start from where it left off. 1=Timer is halted. It stops counting. The clock divider will also be reset. 0=Timer runs normally.</description>
                     <bitOffset>7</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>PRESCALE</name>
                     <description>This is used to divide down the system clock through clock enables to lower the power consumption of the block and allow\n     slow timers. Updating this value during operation may result in erroneous clock enable pulses until the clock divider restarts.\n     The number of clocks per clock enable pulse is (Value + 1); a setting of 0 runs at the full clock speed, while a setting of 1\n     runs at half speed.</description>
                     <bitOffset>16</bitOffset>
                     <bitWidth>16</bitWidth>
                  </field>
               </fields>
            </register>
         </registers>
      </peripheral>
      <peripheral derivedFrom="TIMER32_0">
         <name>TIMER32_1</name>
         <baseAddress>0x40000CA0</baseAddress>
         <interrupt>
            <name>TIMER32_1</name>
            <value>141</value>
         </interrupt>
      </peripheral>
      <peripheral>
         <name>CCT</name>
         <version>121.0</version>
         <description>This is a 16-bit auto-reloading timer/counter.</description>
         <groupName>CCT</groupName>
         <prependToName>CCT_</prependToName>
         <baseAddress>0x40001000</baseAddress>
         <addressBlock>
            <offset>0</offset>
            <size>0x34</size>
            <usage>registers</usage>
         </addressBlock>
         <interrupt>
            <name>CCT</name>
            <value>146</value>
         </interrupt>
         <interrupt>
            <name>CCT_CAP0</name>
            <value>147</value>
         </interrupt>
         <interrupt>
            <name>CCT_CAP1</name>
            <value>148</value>
         </interrupt>
         <interrupt>
            <name>CCT_CAP2</name>
            <value>149</value>
         </interrupt>
         <interrupt>
            <name>CCT_CAP3</name>
            <value>150</value>
         </interrupt>
         <interrupt>
            <name>CCT_CAP4</name>
            <value>151</value>
         </interrupt>
         <interrupt>
            <name>CCT_CAP5</name>
            <value>152</value>
         </interrupt>
         <interrupt>
            <name>CCT_CMP0</name>
            <value>153</value>
         </interrupt>
         <interrupt>
            <name>CCT_CMP1</name>
            <value>154</value>
         </interrupt>
         <registers>
            <register>
               <name>CTRL</name>
               <description>This register controls the capture and compare timer.</description>
               <addressOffset>0x0</addressOffset>
               <size>32</size>
               <resetValue>0x03030000</resetValue>
               <fields>
                  <field>
                     <name>ACT</name>
                     <description>This bit is used to start the capture and compare timer running and power it down.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>FREE_EN</name>
                     <description>Free-Running Timer Enable. This bit is used to start and stop the free running timer.</description>
                     <bitOffset>1</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>FREE_RST</name>
                     <description>Free Running Timer Reset. This bit stops the timer and resets the internal counter to 0000_0000h.</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>TCLK</name>
                     <description>This 3-bit field sets the clock source for the Free-Running Counter.</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>3</bitWidth>
                  </field>
                  <field>
                     <name>CMP_EN0</name>
                     <description>Compare Enable for Compare 0 Register.</description>
                     <bitOffset>8</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>CMP_EN1</name>
                     <description>Compare Enable for Compare 1 Register.</description>
                     <bitOffset>9</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>CMP_SET1</name>
                     <description>When read, returns the current value off the Compare Timer Output 1 state.</description>
                     <bitOffset>16</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>CMP_SET0</name>
                     <description>When read, returns the current value off the Compare Timer Output 0 state.</description>
                     <bitOffset>17</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>CMP_CLR1</name>
                     <description>When read, returns the current value off the Compare Timer Output 1 state.</description>
                     <bitOffset>24</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>CMP_CLR0</name>
                     <description>When read, returns the current value off the Compare Timer Output 0 state.</description>
                     <bitOffset>25</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>CAP0_CTRL</name>
               <description>This register is used to configure capture and compare timers 0-3.</description>
               <addressOffset>0x4</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>CAP_EDGE0</name>
                     <description>This field selects the edge type that triggers the capture of the Free Running Counter into Capture Register 0.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>FILTER_BYP0</name>
                     <description>This bit enables bypassing the input noise filter for Capture Register 0, so that the input signal goes directly into the timer.</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>FCLK_SEL0</name>
                     <description>This 3-bit field sets the clock source for the input filter for Capture Register 0.</description>
                     <bitOffset>5</bitOffset>
                     <bitWidth>3</bitWidth>
                  </field>
                  <field>
                     <name>CAP_EDGE1</name>
                     <description>This field selects the edge type that triggers the capture of the Free Running Counter into Capture Register 1.</description>
                     <bitOffset>8</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>FILTER_BYP1</name>
                     <description>This bit enables bypassing the input noise filter for Capture Register 1, so that the input signal goes directly into the timer.</description>
                     <bitOffset>10</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>FCLK_SEL1</name>
                     <description>This 3-bit field sets the clock source for the input filter for Capture Register 1.</description>
                     <bitOffset>13</bitOffset>
                     <bitWidth>3</bitWidth>
                  </field>
                  <field>
                     <name>CAP_EDGE2</name>
                     <description>This field selects the edge type that triggers the capture of the Free Running Counter into Capture Register 2.</description>
                     <bitOffset>16</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>FILTER_BYP2</name>
                     <description>This bit enables bypassing the input noise filter for Capture Register 2, so that the input signal goes directly into the timer.</description>
                     <bitOffset>18</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>FCLK_SEL2</name>
                     <description>This 3-bit field sets the clock source for the input filter for Capture Register 2.</description>
                     <bitOffset>21</bitOffset>
                     <bitWidth>3</bitWidth>
                  </field>
                  <field>
                     <name>CAP_EDGE3</name>
                     <description>This field selects the edge type that triggers the capture of the Free Running Counter into Capture Register 3.</description>
                     <bitOffset>24</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>FILTER_BYP3</name>
                     <description>This bit enables bypassing the input noise filter for Capture Register 3, so that the input signal goes directly into the timer.</description>
                     <bitOffset>26</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>FCLK_SEL3</name>
                     <description>This 3-bit field sets the clock source for the input filter for Capture Register 3.</description>
                     <bitOffset>29</bitOffset>
                     <bitWidth>3</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>CAP1_CTRL</name>
               <description>This register is used to configure capture and compare timers 4-5.</description>
               <addressOffset>0x8</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>CAP_EDGE4</name>
                     <description>This field selects the edge type that triggers the capture of the Free Running Counter into Capture Register 4.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>FILTER_BYP4</name>
                     <description>This bit enables bypassing the input noise filter for Capture Register 4, so that the input signal goes directly into the timer.</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>FCLK_SEL4</name>
                     <description>This 3-bit field sets the clock source for the input filter for Capture Register 4.</description>
                     <bitOffset>5</bitOffset>
                     <bitWidth>3</bitWidth>
                  </field>
                  <field>
                     <name>CAP_EDGE5</name>
                     <description>This field selects the edge type that triggers the capture of the Free Running Counter into Capture Register 5.</description>
                     <bitOffset>8</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>FILTER_BYP5</name>
                     <description>This bit enables bypassing the input noise filter for Capture Register 5, so that the input signal goes directly into the timer.</description>
                     <bitOffset>10</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>FCLK_SEL5</name>
                     <description>This 3-bit field sets the clock source for the input filter for Capture Register 5.</description>
                     <bitOffset>13</bitOffset>
                     <bitWidth>3</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>FREE_RUN</name>
               <description>This register contains the current value of the Free Running Timer.</description>
               <addressOffset>0xC</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>TMR</name>
                     <description>This register contains the current value of the Free Running Timer.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>32</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>CAP0</name>
               <description>This register saves the value copied from the Free Running timer on a programmed edge of ICT0.</description>
               <addressOffset>0x10</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>CAP_0</name>
                     <description>This register saves the value copied from the Free Running timer on a programmed edge of ICT0.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>32</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>CAP1</name>
               <description>This register saves the value copied from the Free Running timer on a programmed edge of ICT1.</description>
               <addressOffset>0x14</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>CAP_1</name>
                     <description>This register saves the value copied from the Free Running timer on a programmed edge of ICT1.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>32</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>CAP2</name>
               <description>This register saves the value copied from the Free Running timer on a programmed edge of ICT0.</description>
               <addressOffset>0x18</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>CAP_2</name>
                     <description>This register saves the value copied from the Free Running timer on a programmed edge of ICT2.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>32</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>CAP3</name>
               <description>This register saves the value copied from the Free Running timer on a programmed edge of ICT0.</description>
               <addressOffset>0x1C</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>CAP_3</name>
                     <description>This register saves the value copied from the Free Running timer on a programmed edge of ICT3.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>32</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>CAP4</name>
               <description>This register saves the value copied from the Free Running timer on a programmed edge of ICT4.</description>
               <addressOffset>0x20</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>CAP_4</name>
                     <description>This register saves the value copied from the Free Running timer on a programmed edge of ICT4.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>32</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>CAP5</name>
               <description>This register saves the value copied from the Free Running timer on a programmed edge of ICT5.</description>
               <addressOffset>0x24</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>CAP_5</name>
                     <description>This register saves the value copied from the Free Running timer on a programmed edge of ICT5.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>32</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>COMP0</name>
               <description>A COMPARE 0 interrupt is generated when this register matches the value in the Free Running Timer.</description>
               <addressOffset>0x28</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>COMP_0</name>
                     <description>A COMPARE 0 interrupt is generated when this register matches the value in the Free Running Timer.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>32</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>COMP1</name>
               <description>A COMPARE 1 interrupt is generated when this register matches the value in the Free Running Timer.</description>
               <addressOffset>0x2C</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>COMP_1</name>
                     <description>A COMPARE 1 interrupt is generated when this register matches the value in the Free Running Timer.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>32</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>MUX_SEL</name>
               <description>This register selects the pin mapping to the capture register.</description>
               <addressOffset>0x30</addressOffset>
               <size>32</size>
               <resetValue>0x00543210</resetValue>
               <fields>
                  <field>
                     <name>CAP0</name>
                     <description>Mux Select for Capture 0 register.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>4</bitWidth>
                  </field>
                  <field>
                     <name>CAP1</name>
                     <description>Mux Select for Capture 1 register.</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>4</bitWidth>
                  </field>
                  <field>
                     <name>CAP2</name>
                     <description>Mux Select for Capture 2 register.</description>
                     <bitOffset>8</bitOffset>
                     <bitWidth>4</bitWidth>
                  </field>
                  <field>
                     <name>CAP3</name>
                     <description>Mux Select for Capture 3 register.</description>
                     <bitOffset>12</bitOffset>
                     <bitWidth>4</bitWidth>
                  </field>
                  <field>
                     <name>CAP4</name>
                     <description>Mux Select for Capture 4 register.</description>
                     <bitOffset>16</bitOffset>
                     <bitWidth>4</bitWidth>
                  </field>
                  <field>
                     <name>CAP5</name>
                     <description>Mux Select for Capture 5 register.</description>
                     <bitOffset>20</bitOffset>
                     <bitWidth>4</bitWidth>
                  </field>
               </fields>
            </register>
         </registers>
      </peripheral>
      <peripheral>
         <name>HTM0</name>
         <version>291.0</version>
         <description>The Hibernation Timer can generate a wake event to the Embedded Controller (EC) when it is in a hibernation mode</description>
         <groupName>HTM</groupName>
         <prependToName>HTM_</prependToName>
         <baseAddress>0x40009800</baseAddress>
         <addressBlock>
            <offset>0</offset>
            <size>0xA</size>
            <usage>registers</usage>
         </addressBlock>
         <interrupt>
            <name>HTMR0</name>
            <value>112</value>
         </interrupt>
         <registers>
            <register>
               <name>PRLD</name>
               <description>[15:0] This register is used to set the Hibernation Timer Preload value.</description>
               <addressOffset>0x0</addressOffset>
               <size>16</size>
               <resetValue>0x0000</resetValue>
            </register>
            <register>
               <name>CTRL</name>
               <description>HTimer Control Register</description>
               <addressOffset>0x4</addressOffset>
               <size>16</size>
               <resetValue>0x0000</resetValue>
               <fields>
                  <field>
                     <name>CTRL</name>
                     <description>1= The Hibernation Timer has a resolution of 0.125s per LSB, which yields a maximum time in excess of 2 hours.\n     0= The Hibernation Timer has a resolution of 30.5us per LSB, which yields a maximum time of ~2seconds.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>CNT</name>
               <description>The current state of the Hibernation Timer.</description>
               <addressOffset>0x8</addressOffset>
               <size>16</size>
               <access>read-only</access>
               <resetValue>0x0000</resetValue>
            </register>
         </registers>
      </peripheral>
      <peripheral derivedFrom="HTM0">
         <name>HTM1</name>
         <baseAddress>0x40009820</baseAddress>
         <interrupt>
            <name>HTMR1</name>
            <value>113</value>
         </interrupt>
      </peripheral>
      <peripheral>
         <name>RTOS</name>
         <version>1401.0</version>
         <description>RTOS is a 32-bit timer designed to operate on the 32kHz oscillator which is available during all chip sleep states.</description>
         <groupName>RTOS</groupName>
         <prependToName>RTOS_</prependToName>
         <baseAddress>0x40007400</baseAddress>
         <addressBlock>
            <offset>0</offset>
            <size>0x10</size>
            <usage>registers</usage>
         </addressBlock>
         <interrupt>
            <name>TMR</name>
            <value>111</value>
         </interrupt>
         <registers>
            <register>
               <name>CNT</name>
               <description>RTOS Timer Count Register.</description>
               <addressOffset>0x0</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>CNTR</name>
                     <description>This register contains the current value of the RTOS Timer counter. This register should be read as a DWORD. There is no latching mechanism \n        of the upper bytes implemented if the register is accessed as a byte or word. Reading the register with byte or word operations may give incorrect results.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>32</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>PRLD</name>
               <description>RTOS Timer Preload Register</description>
               <addressOffset>0x4</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>PRELOAD</name>
                     <description>The this register is loaded into the RTOS Timer counter either when the TIMER_START bit is written with a 1, or when the timer counter counts down to 0 and the AUTO_RELOAD bit is 1.\n      This register must be programmed with a new count value before the TIMER_START bit is set to 1. If this register is updated while the counter is operating, the new count value will only take effect if\n      the counter transitions form 1 to 0 while the AUTO_RELOAD bit is set.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>32</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>CTRL</name>
               <description>RTOS Timer Control Register</description>
               <addressOffset>0x8</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>BLK_EN</name>
                     <description>1=RTOS timer counter is enabled\n     0=RTOS timer disabled. All register bits are reset to their default state</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>AU_RELOAD</name>
                     <description>1=The the RTOS Timer Preload Register is loaded into the timer counter and the counter is restarted when the counter transitions from 1 to 0\n     0=The timer counter halts when it transitions from 1 to 0 and will not restart.</description>
                     <bitOffset>1</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>TMR_STRT</name>
                     <description>Writing a 1 to this bit will load the timer counter with the RTOS Timer Preload Register and start counting. If the Preload Register is 0, counting will not start and this bit will be cleared to 0.\n     Writing a 0 to this bit will halt the counter and clear its contents to 0. The RTOS timer interrupt will not be generated. This bit is automatically cleared if the AUTO_RELOAD bit is 0 and the\n     timer counter transitions from 1 to 0.</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>EXT_HW_HALT_EN</name>
                     <description>1=The timer counter is halted when the external HALT signal is asserted. Counting is always enabled if HALT is de-asserted.\n     0=The HALT signal does not affect the RTOS Timer</description>
                     <bitOffset>3</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>FW_TMR_HALT</name>
                     <description>1=The timer counter is halted. If the counter was running, clearing this bit will restart the counter from the value at which it halted\n     0=The timer counter, if enabled, will continue to run</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>SOFTIRQ</name>
               <description>Soft Interrupt Register</description>
               <addressOffset>0xC</addressOffset>
               <size>32</size>
               <access>write-only</access>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>SWI0</name>
                     <description>Software Interrupt. A write of a '1' to this bit will generate an SWI interrupt to the EC.\n     Writes of a '0' have no effect. Reads return '0'.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>SWI1</name>
                     <description>Software Interrupt. A write of a '1' to this bit will generate an SWI interrupt to the EC.\n     Writes of a '0' have no effect. Reads return '0'.</description>
                     <bitOffset>1</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>SWI2</name>
                     <description>Software Interrupt. A write of a '1' to this bit will generate an SWI interrupt to the EC.\n     Writes of a '0' have no effect. Reads return '0'.</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>SWI3</name>
                     <description>Software Interrupt. A write of a '1' to this bit will generate an SWI interrupt to the EC.\n     Writes of a '0' have no effect. Reads return '0'.</description>
                     <bitOffset>3</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
         </registers>
      </peripheral>
      <peripheral>
         <name>RTC</name>
         <version>1261.0</version>
         <description>This is the set of registers that are automatically counted by hardware every 1 second while the block is enabled</description>
         <groupName>RTC</groupName>
         <prependToName>RTC_</prependToName>
         <baseAddress>0x400F5000</baseAddress>
         <addressBlock>
            <offset>0</offset>
            <size>0x20</size>
            <usage>registers</usage>
         </addressBlock>
         <interrupt>
            <name>RTC</name>
            <value>119</value>
         </interrupt>
         <interrupt>
            <name>RTC_ALARM</name>
            <value>120</value>
         </interrupt>
         <registers>
            <register>
               <name>SEC</name>
               <description>Seconds Register</description>
               <addressOffset>0x0</addressOffset>
               <size>8</size>
               <resetValue>0x00</resetValue>
            </register>
            <register>
               <name>SEC_ALARM</name>
               <description>Seconds Alarm Register</description>
               <addressOffset>0x1</addressOffset>
               <size>8</size>
               <resetValue>0x00</resetValue>
            </register>
            <register>
               <name>MIN</name>
               <description>Minutes Register</description>
               <addressOffset>0x2</addressOffset>
               <size>8</size>
               <resetValue>0x00</resetValue>
            </register>
            <register>
               <name>MIN_ALARM</name>
               <description>Minutes Alarm Register</description>
               <addressOffset>0x3</addressOffset>
               <size>8</size>
               <resetValue>0x00</resetValue>
            </register>
            <register>
               <name>HR</name>
               <description>Hours Register</description>
               <addressOffset>0x4</addressOffset>
               <size>8</size>
               <resetValue>0x00</resetValue>
            </register>
            <register>
               <name>HR_ALARM</name>
               <description>Hours Alarm Register</description>
               <addressOffset>0x5</addressOffset>
               <size>8</size>
               <resetValue>0x00</resetValue>
            </register>
            <register>
               <name>DAY_OF_WK</name>
               <description>Day of Week Register</description>
               <addressOffset>0x6</addressOffset>
               <size>8</size>
               <resetValue>0x00</resetValue>
            </register>
            <register>
               <name>DAY_OF_MON</name>
               <description>Day of Month Register</description>
               <addressOffset>0x7</addressOffset>
               <size>8</size>
               <resetValue>0x00</resetValue>
            </register>
            <register>
               <name>MONTH</name>
               <description>Month Register</description>
               <addressOffset>0x8</addressOffset>
               <size>8</size>
               <resetValue>0x00</resetValue>
            </register>
            <register>
               <name>YEAR</name>
               <description>Year Register</description>
               <addressOffset>0x9</addressOffset>
               <size>8</size>
               <resetValue>0x00</resetValue>
            </register>
            <register>
               <name>REGA</name>
               <description>Register A</description>
               <addressOffset>0xA</addressOffset>
               <size>8</size>
               <resetValue>0x00</resetValue>
            </register>
            <register>
               <name>REGB</name>
               <description>Register B</description>
               <addressOffset>0xB</addressOffset>
               <size>8</size>
               <resetValue>0x00</resetValue>
            </register>
            <register>
               <name>REGC</name>
               <description>Register C</description>
               <addressOffset>0xC</addressOffset>
               <size>8</size>
               <resetValue>0x00</resetValue>
            </register>
            <register>
               <name>REGD</name>
               <description>Register D</description>
               <addressOffset>0xD</addressOffset>
               <size>8</size>
               <resetValue>0x00</resetValue>
            </register>
            <register>
               <name>CTRL</name>
               <description>RTC Control Register</description>
               <addressOffset>0x10</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>BLK_EN</name>
                     <description>BLOCK_ENABLE This bit must be '1' in order for the block to function internally. Registers may be initialized first, before\n      setting this bit to '1' to start operation.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>SOFT_RST</name>
                     <description>SOFT_RESET A '1' written to this bit position will trigger the RTC_RST reset, resetting the block and all registers except\n      this one and the Test Register. This bit is self-clearing at the end of the reset, one cycle of Host Bus Clock later, and so requires\n      no waiting.</description>
                     <bitOffset>1</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>TEST</name>
                     <description>TEST</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>ALM_EN</name>
                     <description>ALARM_ENABLE  1=Enables the Alarm features, 0=Disables the Alarm features</description>
                     <bitOffset>3</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>WK_ALARM</name>
               <description>Week Alarm Register[7:0] - ALARM_DAY_OF_WEEK This register, if written to a value in the range 1- -7, will inhibit the Alarm\n     interrupt unless this field matches the contents of the Day of Week Register also.</description>
               <addressOffset>0x14</addressOffset>
               <size>32</size>
               <resetValue>0x000000FF</resetValue>
            </register>
            <register>
               <name>DAYLT_SAVF</name>
               <description>Daylight Savings Forward Register</description>
               <addressOffset>0x18</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>DST_MON</name>
                     <description>This field matches the Month Register.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>8</bitWidth>
                  </field>
                  <field>
                     <name>DST_DAY_OF_WK</name>
                     <description>This field matches the Day of Week Register bits[2:0].</description>
                     <bitOffset>8</bitOffset>
                     <bitWidth>3</bitWidth>
                  </field>
                  <field>
                     <name>DST_WK</name>
                     <description>5=Last week of month, 4 =Fourth week of month, 3=Third week of month, 2=Second week of month, 1=First week of month</description>
                     <bitOffset>16</bitOffset>
                     <bitWidth>3</bitWidth>
                  </field>
                  <field>
                     <name>DST_HR</name>
                     <description>This field holds the matching value for bits[6:0] of the Hours register. The written value will be interpreted according\n      to the 24/12 Hour mode and DM mode settings at the time of writing.</description>
                     <bitOffset>24</bitOffset>
                     <bitWidth>7</bitWidth>
                  </field>
                  <field>
                     <name>DST_AM_PM</name>
                     <description>This bit selects AM vs. PM, to match bit[7] of the Hours Register if 12-Hour mode is selected in Register B at the time\n      of writing.</description>
                     <bitOffset>31</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>DAYLT_SAVB</name>
               <description>Daylight Savings Backward Register</description>
               <addressOffset>0x1C</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>DST_MON</name>
                     <description>This field matches the Month Register.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>8</bitWidth>
                  </field>
                  <field>
                     <name>DST_DAY_OF_WK</name>
                     <description>This field matches the Day of Week Register bits[2:0].</description>
                     <bitOffset>8</bitOffset>
                     <bitWidth>3</bitWidth>
                  </field>
                  <field>
                     <name>DST_WK</name>
                     <description>5=Last week of month, 4 =Fourth week of month, 3=Third week of month, 2=Second week of month, 1=First week of month</description>
                     <bitOffset>16</bitOffset>
                     <bitWidth>3</bitWidth>
                  </field>
                  <field>
                     <name>DST_HR</name>
                     <description>This field holds the matching value for bits[6:0] of the Hours register. The written value will be interpreted according\n      to the 24/12 Hour mode and DM mode settings at the time of writing.</description>
                     <bitOffset>24</bitOffset>
                     <bitWidth>7</bitWidth>
                  </field>
                  <field>
                     <name>DST_AM_PM</name>
                     <description>This bit selects AM vs. PM, to match bit[7] of the Hours Register if 12-Hour mode is selected in Register B at the time\n      of writing.</description>
                     <bitOffset>31</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
         </registers>
      </peripheral>
      <peripheral>
         <name>WEEK</name>
         <version>761.0</version>
         <description>The Week Timer and the Sub-Week Timer assert the Power-Up Event Output which automatically powers-up the system from the G3 state</description>
         <groupName>WEEK</groupName>
         <prependToName>WEEK_</prependToName>
         <baseAddress>0x4000AC80</baseAddress>
         <addressBlock>
            <offset>0</offset>
            <size>0x1C</size>
            <usage>registers</usage>
         </addressBlock>
         <interrupt>
            <name>WK</name>
            <value>114</value>
         </interrupt>
         <interrupt>
            <name>WKSUB</name>
            <value>115</value>
         </interrupt>
         <interrupt>
            <name>WKSEC</name>
            <value>116</value>
         </interrupt>
         <interrupt>
            <name>WKSUBSEC</name>
            <value>117</value>
         </interrupt>
         <interrupt>
            <name>SYSPWR</name>
            <value>118</value>
         </interrupt>
         <registers>
            <register>
               <name>CTRL</name>
               <description>Control Register</description>
               <addressOffset>0x0</addressOffset>
               <size>32</size>
               <resetValue>0x00000001</resetValue>
               <fields>
                  <field>
                     <name>WT_EN</name>
                     <description>The WT_ENABLE bit is used to start and stop the Week Alarm Counter Register and the Clock Divider Register.\n     The value in the Counter Register is held when the WT_ENABLE bit is not asserted (0) and the count is resumed from the last value when the bit is asserted (1).\n     The 15-Bit Clock Divider is reset to 00h and the Week Alarm Interface is in its lowest power consumption state when the WT_ENABLE bit is not asserted.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>PWRUP_EN</name>
                     <description>This bit controls the state of the Power-Up Event Output and enables Week POWER-UP Event decoding in the VBAT-Powered Control Interface.\n     1=Power-Up Event Output Enabled\n     0=Power-Up Event Output Disabled and Reset</description>
                     <bitOffset>6</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>ALARM_CNT</name>
               <description>Week Alarm Counter Register</description>
               <addressOffset>0x4</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>WK_CNTR</name>
                     <description>While the WT_ENABLE bit is 1, this register is incremented at a 1 Hz rate. Writes of this register may require one second\n     to take effect. Reads return the current state of the register. Reads and writes complete independently of the state of WT_ENABLE.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>28</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>TMR_COMP</name>
               <description>Week Timer Compare Register</description>
               <addressOffset>0x8</addressOffset>
               <size>32</size>
               <resetValue>0x0FFFFFFF</resetValue>
               <fields>
                  <field>
                     <name>WK_COMP</name>
                     <description>A Week Alarm Interrupt and a Week Alarm Power-Up Event are asserted when the Week Alarm Counter Register is greater than\n     or equal to the contents of this register. Reads and writes complete independently of the state of WT_ENABLE.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>28</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>CLKDIV</name>
               <description>Clock Divider Register</description>
               <addressOffset>0xC</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>DIV</name>
                     <description>Reads of this register return the current state of the Week Timer 15- bit clock divider.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>15</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>SS_INTR_SEL</name>
               <description>Sub-Second Programmable Interrupt Select Register</description>
               <addressOffset>0x10</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>SPISR</name>
                     <description>This field determines the rate at which Sub-Second interrupt events are generated.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>4</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>SWK_CTRL</name>
               <description>Sub-Week Control Register</description>
               <addressOffset>0x14</addressOffset>
               <size>32</size>
               <access>read-only</access>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>SWKTMR_PWRUP_EVT_STS</name>
                     <description>This bit is set to 1 when the Sub-Week Alarm Counter Register decrements from 1 to 0 and the POWERUP_EN is 1.\n     Writes of 1 clear this bit. Writes of 0 have no effect. Note: This bit MUST be cleared to remove a Sub-Week Timer Power-Up Event.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>WKTMR_PWRUP_EVT_STS</name>
                     <description>This bit is set to 1 when the Week Alarm Counter Register is greater than or equal the contents of the Week Timer Compare\n     Register and the POWERUP_EN is 1. Writes of 1 clear this bit. Writes of 0 have no effect.\n     Note: This bit does not have to be cleared to remove a Week Timer Power-Up Event.</description>
                     <bitOffset>1</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>TEST</name>
                     <description>Test</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>TEST0</name>
                     <description>Test</description>
                     <bitOffset>5</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>AU_RLD</name>
                     <description>1= No reload occurs when the Sub-Week Counter expires\n     0= Reloads the SUBWEEK_COUNTER_LOAD field into the Sub- Week Counter when the counter expires.</description>
                     <bitOffset>6</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>SWK_TICK</name>
                     <description>This field selects the clock source for the Sub-Week Counter.</description>
                     <bitOffset>7</bitOffset>
                     <bitWidth>3</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>SWK_ALARM</name>
               <description>Sub-Week Alarm Counter Register</description>
               <addressOffset>0x18</addressOffset>
               <size>32</size>
               <access>read-only</access>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>CNTR_LOAD</name>
                     <description>Writes with a non-zero value to this field reload the 9-bit Sub-Week Alarm counter. Writes of 0 disable the counter.\n     If the Sub-Week Alarm counter decrements to 0 and the AUTO_RELOAD bit is set, the value in this field is automatically loaded into the Sub-Week Alarm counter.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>9</bitWidth>
                  </field>
                  <field>
                     <name>CNTR_STS</name>
                     <description>Reads of this register return the current state of the 9-bit Sub-Week Alarm counter.</description>
                     <bitOffset>16</bitOffset>
                     <bitWidth>9</bitWidth>
                  </field>
               </fields>
            </register>
         </registers>
      </peripheral>
      <peripheral>
         <name>TACH0</name>
         <version>661.0</version>
         <description>This block monitors TACH output signals from various types of fans, and determines their speed.</description>
         <groupName>TACH</groupName>
         <prependToName>TACH_</prependToName>
         <baseAddress>0x40006000</baseAddress>
         <addressBlock>
            <offset>0</offset>
            <size>0x10</size>
            <usage>registers</usage>
         </addressBlock>
         <interrupt>
            <name>TACH0</name>
            <value>71</value>
         </interrupt>
         <registers>
            <register>
               <name>CTRL</name>
               <description>TACHx Control Register</description>
               <addressOffset>0x0</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>OUTOF_LIM_EN</name>
                     <description>TACH_OUT_OF_LIMIT_ENABLE  This bit is used to enable the TACH_OUT_OF_LIMIT_STATUS bit in the TACHx Status Register to generate an interrupt event.\n                  1=Enable interrupt output from Tach block\n                  0=Disable interrupt output from Tach block (default)</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>EN</name>
                     <description>TACH_ENABLE  1= TACH Monitoring enabled, clocks enabled. 0= TACH Idle, clocks gated</description>
                     <bitOffset>1</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>FILT_EN</name>
                     <description>FILTER_ENABLE  This filter is used to remove high frequency glitches from Tach Input. When this filter is enabled, Tach input pulses less than two 100kHz_- Clk periods wide get filtered.\n                  1= Filter enabled\n                  0= Filter disabled (default)\n                  It is recommended that the Tach input filter always be enabled.</description>
                     <bitOffset>8</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>RD_MOD_SEL</name>
                     <description>TACH_READING_MODE_SELECT\n                  1=Counter is incremented on the rising edge of the 100kHz_Clk input. The counter is latched into the TACHX_COUNTER field and reset when the programmed number of edges is detected.\n                  0=Counter is incremented when Tach Input transitions from low-tohigh state (default)</description>
                     <bitOffset>10</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>EDGES</name>
                     <description>TACH_EDGES A Tach signal is a square wave with a 50 percent duty cycle. Typically, two Tach periods represents one revolution of the fan. A Tach period consists of three Tach edges. This programmed value represents the number of Tach edges that will be used to determine the interval for which the number of 100kHz_Clk pulses will be counted\n                  11b=9 Tach edges (4 Tach periods)\n                  10b=5 Tach edges (2 Tach periods)\n                  01b=3 Tach edges (1 Tach period)\n                  00b=2 Tach edges (1/2 Tach period)</description>
                     <bitOffset>11</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>CNT_RDY_INT_EN</name>
                     <description>COUNT_READY_INT_EN 1=Enable Count Ready interrupt from Tach block, 0=Disable Count Ready interrupt from Tach block</description>
                     <bitOffset>14</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>IN_INT_EN</name>
                     <description>TACH_INPUT_INT_EN 1=Enable Tach Input toggle interrupt from Tach block, 0=Disable Tach Input toggle interrupt from Tach block</description>
                     <bitOffset>15</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>CNTR</name>
                     <description>This 16-bit field contains the latched value of the internal Tach pulse counter, which may be configured by the Tach Reading Mode Select field to operate as a free-running counter or to be gated by the Tach input signal.</description>
                     <bitOffset>16</bitOffset>
                     <bitWidth>16</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>STS</name>
               <description>TACHx Status Register</description>
               <addressOffset>0x4</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>OUTOF_LIM_STS</name>
                     <description>TACH_OUT_OF_LIMIT_STATUS  1=Tach is outside of limits, 0=Tach is within limits (R/WC)</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>PIN_STS</name>
                     <description>TACH_PIN_STATUS  1= Tach Input is high, 0= Tach Input is low</description>
                     <bitOffset>1</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>TOG_STS</name>
                     <description>TOGGLE_STATUS  1=Tach Input changed state (this bit is set on a low-to-high or high-tolow transition), 0=Tach stable (R/WC)</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>CNT_RDY_STS</name>
                     <description>COUNT_READY_STATUS  1=Reading ready, 0=Reading not ready</description>
                     <bitOffset>3</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>LIM_HI</name>
               <description>TACH HIGH LIMIT Register</description>
               <addressOffset>0x8</addressOffset>
               <size>32</size>
               <resetValue>0x0000FFFF</resetValue>
               <fields>
                  <field>
                     <name>T_HIGH</name>
                     <description>This value is compared with the value in the TACHX_COUNTER field. If the value in the counter is greater than the value\n     programmed in this register, the TACH_OUT_OF_LIMIT_STATUS bit will be set. The TACH_OUT_OF_LIMIT_STATUS status event may be enabled\n     to generate an interrupt to the embedded controller via the TACH_OUT_OF_LIMIT_ENABLE bit in the TACHx Control Register.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>16</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>LIM_LO</name>
               <description>TACHx Low Limit Register</description>
               <addressOffset>0xC</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>T_LOW</name>
                     <description>This value is compared with the value in the TACHX_COUNTER field of the TACHx Control Register. If the value in the counter\n     is less than the value programmed in this register, the TACH_OUT_OF_LIMIT_STATUS bit will be set. The TACH_OUT_OF_LIMIT_STATUS\n     status event may be enabled to generate an interrupt to the embedded controller via the TACH_OUT_OF_LIMIT_ENABLE bit in the TACHx\n     Control Register To disable the TACH_OUT_OF_LIMIT_STATUS low event, program 0000h into this register.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>16</bitWidth>
                  </field>
               </fields>
            </register>
         </registers>
      </peripheral>
      <peripheral derivedFrom="TACH0">
         <name>TACH1</name>
         <baseAddress>0x40006010</baseAddress>
         <interrupt>
            <name>TACH1</name>
            <value>72</value>
         </interrupt>
      </peripheral>
      <peripheral>
         <name>PWM0</name>
         <version>541.0</version>
         <description>The PWM block generates an arbitrary duty cycle output at frequencies from less than 0.1 Hz to 24 MHz</description>
         <groupName>PWM</groupName>
         <prependToName>PWM_</prependToName>
         <baseAddress>0x40005800</baseAddress>
         <addressBlock>
            <offset>0</offset>
            <size>0xC</size>
            <usage>registers</usage>
         </addressBlock>
         <registers>
            <register>
               <name>CNT_ON</name>
               <description>This field determines both the frequency and duty cycle of the PWM signal. Setting this field to a value of n will\n    cause the On time of the PWM to be n+1 cycles of the PWM Clock Source.\n    When this field is set to zero and the PWMX_COUNTER_OFF_TIME is not set to zero, the PWM_OUTPUT is held low (Full Off).</description>
               <addressOffset>0x0</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>CNT_OFF</name>
               <description>This field determine both the frequency and duty cycle of the PWM signal. Setting this field to a value of n will\n    cause the Off time of the PWM to be n+1 cycles of the PWM Clock Source.\n    When this field is set to zero, the PWM_OUTPUT is held high (Full On).</description>
               <addressOffset>0x4</addressOffset>
               <size>32</size>
               <resetValue>0x0000FFFF</resetValue>
            </register>
            <register>
               <name>CFG</name>
               <description>PWMx CONFIGURATION REGISTER</description>
               <addressOffset>0x8</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>PWM_EN</name>
                     <description>When the PWM_ENABLE is set to 0 the internal counters are reset and the internal state machine is set to the OFF state.\n     In addition, the PWM_OUTPUT signal is set to the inactive state as determined by the Invert bit. The PWMx Counter ON Time Register\n     and PWMx Counter OFF Time Register are not affected by the PWM_ENABLE bit and may be read and written while the PWM enable bit is 0.\n     1=Enabled (default); 0=Disabled (gates clocks to save power).</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>CLK_SEL</name>
                     <description>This bit determines the clock source used by the PWM duty cycle and frequency control logic.\n                  1=CLOCK_LOW\n                  0=CLOCK_HIGH</description>
                     <bitOffset>1</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>INV</name>
                     <description>1= PWM_OUTPUT ON State is active low; 0=PWM_OUTPUT ON State is active high.</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>CLK_PRE_DIV</name>
                     <description>The Clock source for the 16-bit down counter (see PWMx Counter ON Time Register and PWMx Counter OFF Time Register)\n     is determined by bit D1 of this register. The Clock source is then divided by the value of Pre-Divider+1 and the resulting\n     signal determines the rate at which the down counter will be decremented. For example, a Pre-Divider value of 1 divides\n     the input clock by 2 and a value of 2 divides the input clock by 3. A Pre-Divider of 0 will disable the Pre-Divider option.</description>
                     <bitOffset>3</bitOffset>
                     <bitWidth>4</bitWidth>
                  </field>
               </fields>
            </register>
         </registers>
      </peripheral>
      <peripheral derivedFrom="PWM0">
         <name>PWM2</name>
         <baseAddress>0x40005820</baseAddress>
      </peripheral>
      <peripheral derivedFrom="PWM0">
         <name>PWM3</name>
         <baseAddress>0x40005830</baseAddress>
      </peripheral>
      <peripheral derivedFrom="PWM0">
         <name>PWM5</name>
         <baseAddress>0x40005850</baseAddress>
      </peripheral>
      <peripheral derivedFrom="PWM0">
         <name>PWM6</name>
         <baseAddress>0x40005860</baseAddress>
      </peripheral>
      <peripheral derivedFrom="PWM0">
         <name>PWM7</name>
         <baseAddress>0x40005870</baseAddress>
      </peripheral>
      <peripheral>
         <name>ADC</name>
         <version>1771.0</version>
         <description>This block is designed to convert external analog voltage readings into digital values.</description>
         <groupName>ADC</groupName>
         <prependToName>ADC_</prependToName>
         <baseAddress>0x40007C00</baseAddress>
         <addressBlock>
            <offset>0</offset>
            <size>0x90</size>
            <usage>registers</usage>
         </addressBlock>
         <interrupt>
            <name>ADC_SNGL</name>
            <value>78</value>
         </interrupt>
         <interrupt>
            <name>ADC_RPT</name>
            <value>79</value>
         </interrupt>
         <registers>
            <register>
               <name>CTRL</name>
               <description>The ADC Control Register is used to control the behavior of the Analog to Digital Converter.</description>
               <addressOffset>0x0</addressOffset>
               <size>32</size>
               <resetValue>0x00010106</resetValue>
               <fields>
                  <field>
                     <name>ACT</name>
                     <description>0: The ADC is disabled and placed in its lowest power state. 1: ADC block is enabled for operation.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>STRT_SIN</name>
                     <description>(START_SINGLE) 0: The ADC Single Mode is disabled. 1: The ADC Single Mode is enabled. Note: This bit is self-clearing</description>
                     <bitOffset>1</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>STRT_RPT</name>
                     <description>0: The ADC Repeat Mode is disabled. 1: The ADC Repeat Mode is enabled.</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>PWR_SAV_DIS</name>
                     <description>0: Power saving feature is enabled. 1: Power saving feature is disabled.</description>
                     <bitOffset>3</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>SFT_RST</name>
                     <description>(SOFT_RESET) 1: writing one causes a reset of the ADC block hardware (not the registers) 0: writing zero takes the ADC block out of reset</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>RPT_DONE_STS</name>
                     <description>0: ADC repeat-sample conversion is not complete. 1: ADC repeat-sample conversion is completed. (R/WC)</description>
                     <bitOffset>6</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>SIN_DONE_STS</name>
                     <description>0: ADC single-sample conversion is not complete. 1: ADC single-sample conversion is completed. (R/WC)</description>
                     <bitOffset>7</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>DELAY</name>
               <description>The ADC Delay register determines the delay from setting Start_Repeat in the ADC Control Register and the start of a conversion cycle. This register also controls the interval between conversion cycles in repeat mode.</description>
               <addressOffset>0x4</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>STRT_DLY</name>
                     <description>This field determines the starting delay before a conversion cycle is begun when Start_Repeat is written with a 1.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>16</bitWidth>
                  </field>
                  <field>
                     <name>RPT_DLY</name>
                     <description>This field determines the interval between conversion cycles when Start_Repeat is 1.</description>
                     <bitOffset>16</bitOffset>
                     <bitWidth>16</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>CHAN_STS</name>
               <description>The ADC Status Register indicates whether the ADC has completed a conversion cycle. All bits are cleared by being written with a 1. \n            0: conversion of the corresponding ADC channel is not complete\n            1: conversion of the corresponding ADC channel is complete</description>
               <addressOffset>0x8</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>STS</name>
                     <description>All bits are cleared by being written with a '1'. 1=conversion of the corresponding ADC channel is complete;\n      0=conversion of the corresponding ADC channel is not complete. For enabled single cycles, the SINGLE_DONE_STATUS bit in the\n      ADC Control Register is also set after all enabled channel conversion are done; for enabled repeat cycles, the REPEAT_DONE_STATUS\n      in the ADC Control Register is also set after all enabled channel conversion are done.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>16</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>SNG_EN</name>
               <description>The ADC Single Register is used to control which ADC channel is captured during a Single-Sample conversion cycle initiated by the Start_Single bit in the ADC Control Register. \n            APPLICATION NOTE: Do not change the bits in this register in the middle of a conversion cycle to insure proper operation.\n            0: single cycle conversions for this channel are disabled\n            1: single cycle conversions for this channel are enabled</description>
               <addressOffset>0xC</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>S_EN</name>
                     <description>Each bit in this field enables the corresponding ADC channel when a single cycle of conversions is started when the\n      START_SINGLE bit in the ADC Control Register is written with a 1. 1=single cycle conversions for this channel are enabled\n      0=single cycle conversions for this channel are disabled. Note: If this register is changed while a conversion.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>16</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>REPT_EN</name>
               <description>The ADC Repeat Register is used to control which ADC channels are captured during a repeat conversion cycle initiated by the Start_Repeat bit in the ADC Control Register.</description>
               <addressOffset>0x10</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>R_EN</name>
                     <description>Each bit in this field enables the corresponding ADC channel for each pass of the Repeated ADC Conversion that is\n      controlled by bit START_REPEAT in the ADC Control Register. 1=repeat conversions for this channel are enabled;\n      0=repeat conversions for this channel are disabled</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>16</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <dim>16</dim>
               <dimIncrement>4</dimIncrement>
               <name>CHAN_RD[%s]</name>
               <description>All 16 ADC channels return their results into a 32-bit reading register. In each case the low 10 bits of the reading register\n     return the result of the Analog to Digital conversion and the upper 22 bits return 0.</description>
               <addressOffset>0x14</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>CFG</name>
               <description>The ADC Configuration Register is used to configure the ADC clock timing.</description>
               <addressOffset>0x7C</addressOffset>
               <size>32</size>
               <resetValue>0x00000101</resetValue>
               <fields>
                  <field>
                     <name>CLKLW_TIM</name>
                     <description>These bits define the low time count of the ADC clock.\n         0= not used.\n         1= 1 System Clock.\n         2= 2 System Clock.\n</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>8</bitWidth>
                  </field>
                  <field>
                     <name>CLKHIGH_TIM</name>
                     <description>These bits define the high time count of the ADC clock.\n         0= not used.\n         1= 1 System Clock.\n         2= 2 System Clock.\n</description>
                     <bitOffset>8</bitOffset>
                     <bitWidth>8</bitWidth>
                  </field>
                  <field>
                     <name>CLKDUMY_TIM</name>
                     <description>These bits define the dummy cycles of the ADC clock.\n         Valid Values are from 0x0 to 0xF.\n</description>
                     <bitOffset>16</bitOffset>
                     <bitWidth>4</bitWidth>
                  </field>
                  <field>
                     <name>PWRUP_DLY</name>
                     <description>These bits define the power up delay in number of micro-seconds.\n         Valid Values are from 0x0 to 0xF.\n</description>
                     <bitOffset>20</bitOffset>
                     <bitWidth>4</bitWidth>
                  </field>
                  <field>
                     <name>DUMYCYC_GAP</name>
                     <description>These bits define the number of micro-seconds between consective Starts.\n</description>
                     <bitOffset>24</bitOffset>
                     <bitWidth>8</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>VREF_CHAN</name>
               <description>The ADC Channel Register is used to configure the reference voltage to the clock timing.\n</description>
               <addressOffset>0x80</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>SEL0</name>
                     <description>These bits define the reference voltage for Channel 0.\n         0h= VREF0\n         1h= VREF1\n         2h= Reserved\n         3h= Reserved\n</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>SEL1</name>
                     <description>These bits define the reference voltage for Channel 1.\n         0h= VREF0\n         1h= VREF1\n         2h= Reserved\n         3h= Reserved\n</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>SEL2</name>
                     <description>These bits define the reference voltage for Channel 2.\n         0h= VREF0\n         1h= VREF1\n         2h= Reserved\n         3h= Reserved\n</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>SEL3</name>
                     <description>These bits define the reference voltage for Channel 3.\n         0h= VREF0\n         1h= VREF1\n         2h= Reserved\n         3h= Reserved\n</description>
                     <bitOffset>6</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>SEL4</name>
                     <description>These bits define the reference voltage for Channel 4.\n         0h= VREF0\n         1h= VREF1\n         2h= Reserved\n         3h= Reserved\n</description>
                     <bitOffset>8</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>SEL5</name>
                     <description>These bits define the reference voltage for Channel 5.\n         0h= VREF0\n         1h= VREF1\n         2h= Reserved\n         3h= Reserved\n</description>
                     <bitOffset>10</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>SEL6</name>
                     <description>These bits define the reference voltage for Channel 6.\n         0h= VREF0\n         1h= VREF1\n         2h= Reserved\n         3h= Reserved\n</description>
                     <bitOffset>12</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>SEL7</name>
                     <description>These bits define the reference voltage for Channel 7.\n         0h= VREF0\n         1h= VREF1\n         2h= Reserved\n         3h= Reserved\n</description>
                     <bitOffset>14</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>SEL8</name>
                     <description>These bits define the reference voltage for Channel 8.\n         0h= VREF0\n         1h= VREF1\n         2h= Reserved\n         3h= Reserved\n</description>
                     <bitOffset>16</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>SEL9</name>
                     <description>These bits define the reference voltage for Channel 9.\n         0h= VREF0\n         1h= VREF1\n         2h= Reserved\n         3h= Reserved\n</description>
                     <bitOffset>18</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>SEL10</name>
                     <description>These bits define the reference voltage for Channel 10.\n         0h= VREF0\n         1h= VREF1\n         2h= Reserved\n         3h= Reserved\n</description>
                     <bitOffset>20</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>SEL11</name>
                     <description>These bits define the reference voltage for Channel 11.\n         0h= VREF0\n         1h= VREF1\n         2h= Reserved\n         3h= Reserved\n</description>
                     <bitOffset>22</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>SEL12</name>
                     <description>These bits define the reference voltage for Channel 12.\n         0h= VREF0\n         1h= VREF1\n         2h= Reserved\n         3h= Reserved\n</description>
                     <bitOffset>24</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>SEL13</name>
                     <description>These bits define the reference voltage for Channel 13.\n         0h= VREF0\n         1h= VREF1\n         2h= Reserved\n         3h= Reserved\n</description>
                     <bitOffset>26</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>SEL14</name>
                     <description>These bits define the reference voltage for Channel 14.\n         0h= VREF0\n         1h= VREF1\n         2h= Reserved\n         3h= Reserved\n</description>
                     <bitOffset>28</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>SEL15</name>
                     <description>These bits define the reference voltage for Channel 15.\n         0h= VREF0\n         1h= VREF1\n         2h= Reserved\n         3h= Reserved\n</description>
                     <bitOffset>30</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>VREF_CTRL</name>
               <description>This is the VREF Control Register</description>
               <addressOffset>0x84</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>CHRG_DLY</name>
                     <description>This field represnts the delay time to charge up the external VREF capacitor.\n</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>16</bitWidth>
                  </field>
                  <field>
                     <name>SWITCH_DLY</name>
                     <description>This field represnts the delay time interval between switching VREF Selects.\n</description>
                     <bitOffset>16</bitOffset>
                     <bitWidth>13</bitWidth>
                  </field>
                  <field>
                     <name>PADCTRL</name>
                     <description>This fields give the choice to the application whether to float the unused PAD's or to Drive them to 0.\n         1= Drive unused PAD's Low 0b\n         0= Leave unused PAD's Floating.\n</description>
                     <bitOffset>29</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>SELSTAT</name>
                     <description>This fields gives information about the current VREF selected.\n         0x0= VREF0\n         0x1= VREF1\n         0x2= Reserved\n         0x3= Reserved\n</description>
                     <bitOffset>30</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>SAR_CTRL</name>
               <description>This is the SAR ADC Control Register.\n</description>
               <addressOffset>0x88</addressOffset>
               <size>32</size>
               <resetValue>0x00000006</resetValue>
               <fields>
                  <field>
                     <name>SEL_DIFF</name>
                     <description>This field select between Single ended / Differential input.\n    0= ADC core is enabled for single ended input operation.\n    1= ADC core is enabled for differential input operation.\n</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>SEL_RES</name>
                     <description>This field select the ADC Resolution (10/12 bits).\n    0x0= Reserved.\n    0x1= Reserved.\n    0x2= 10 bit ADC resolution.\n    0x3= 12 bit ADC resolution.\n</description>
                     <bitOffset>1</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>SHIFT_DAT</name>
                     <description>This field defined if the ADC output is Right or Left Justified.\n         1= adc_dout is not shifted and lower bits are set to 0.\n         0= adc_dout is shifted right following resolution selected.\n</description>
                     <bitOffset>3</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>EN_ASYN_SMPL</name>
                     <description>This field enables asynchronous sampling.\n         0= Async Sampling Disabled.\n         1= Async Sampling Enabled.\n</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>EN_SERIAL</name>
                     <description>This field enables serial output (dout) from ADC.\n         0= Parallel dout.\n         1= Serial dout.\n</description>
                     <bitOffset>5</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>WARM_UP_DLY</name>
                     <description>This field represents the warmup delay number in microseconds.\n</description>
                     <bitOffset>7</bitOffset>
                     <bitWidth>9</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>SAR_CFG</name>
               <description>This is the SAR ADC Configuration Register.\n</description>
               <addressOffset>0x8C</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>EN_CMBF</name>
                     <description>Enable Common Mode Buffer Amplifier.\n    0= Common Mode Buffer Amplifier is high all the time.\n    1= Controls Common Mode Buffer Amplifier during power cycling.\n</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>DIS_DOUT</name>
                     <description>Disable Parallel Output.\n    0= Enable Parallel Output.\n    1= Disable Parallel Output.\n</description>
                     <bitOffset>1</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>EN_DITHER</name>
                     <description>Enable Dithering.\n    0= Disable Dither.\n    1= Enable Dither.\n</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>FAZ_AU_ZERO</name>
                     <description>Enable F_AZ AUTOZEROING.\n    1= Disable f_az autozeroing.\n    0= Enable f_az autozeroing.\n</description>
                     <bitOffset>3</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>SAZ_AU_ZERO</name>
                     <description>Enable S_AZ AUTOZEROING.\n    1= Disable S_AZ autozeroing.\n    0= Enable S_AZ autozeroing.\n</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>LAZ_AU_ZERO</name>
                     <description>Enable L_AZ AUTOZEROING.\n    1= Disable L_AZ autozeroing.\n    0= Enable L_AZ autozeroing.\n</description>
                     <bitOffset>5</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>EN_RADC</name>
                     <description>Enable RADC.\n    1 = RDAC remains high during power cycling.\n    0 = Controls RDAC during power cycling.\n</description>
                     <bitOffset>6</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>REGEN_DLY</name>
                     <description>This register defines the delay between regen and latch.\n</description>
                     <bitOffset>9</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>CLK_DIV</name>
                     <description>This register defines the programmable ADC Clock divider value.         Divider ratios of 256,128,64,32,16 are supported.\n</description>
                     <bitOffset>11</bitOffset>
                     <bitWidth>5</bitWidth>
                  </field>
                  <field>
                     <name>IADC_RANGE2</name>
                     <description>This register controls the current consumption for the whole ADC.\n</description>
                     <bitOffset>20</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>IADC_RANGE1</name>
                     <description>This register controls the current consumption for the whole ADC.\n</description>
                     <bitOffset>22</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>ICMBF_STG1</name>
                     <description>This register controls the bias current for the 1st stage of the comparator.\n</description>
                     <bitOffset>24</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>ICMBF_STG2</name>
                     <description>This register controls the bias current for the 2nd stage of the comparator.\n</description>
                     <bitOffset>26</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>ICMBF</name>
                     <description>This register controls the bias current for common mode buffer amplifier.\n</description>
                     <bitOffset>28</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>EN_EXT_BIAS</name>
                     <description>EN external bias.\n    1 = Disables internal switched cap bias circuit.\n    0 = Enables internal switched cap bias circuit.\n</description>
                     <bitOffset>31</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
         </registers>
      </peripheral>
      <peripheral>
         <name>LED0</name>
         <version>1111.0</version>
         <description>The LED is implemented using a PWM that can be driven either by the 48 MHz clock or by a 32.768 KHz clock input.</description>
         <groupName>LED</groupName>
         <prependToName>LED_</prependToName>
         <baseAddress>0x4000B800</baseAddress>
         <addressBlock>
            <offset>0</offset>
            <size>0x18</size>
            <usage>registers</usage>
         </addressBlock>
         <interrupt>
            <name>LED0</name>
            <value>83</value>
         </interrupt>
         <registers>
            <register>
               <name>CFG</name>
               <description>LED Configuration</description>
               <addressOffset>0x0</addressOffset>
               <size>32</size>
               <resetValue>0x00001400</resetValue>
               <fields>
                  <field>
                     <name>CTRL</name>
                     <description>CONTROL 3=PWM is always on\n                  2=LED blinking (standard PWM)\n                  1=LED breathing configuration\n                  0=PWM is always off. All internal registers and counters are reset to 0. Clocks are gated</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>CLK_SRC</name>
                     <description>1=Clock source is the 48 MHz clock, 0=Clock source is the 32.768 KHz clock</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>SYNCH</name>
                     <description>SYNCHRONIZE  When this bit is '1', all counters for all LEDs are reset to their initial values. When this bit is '0' in the LED Configuration Register for all LEDs, then all counters for LEDs that are configured to blink or breathe will increment or decrement, as required.</description>
                     <bitOffset>3</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>PWM_SIZE</name>
                     <description>PWM_SIZE This bit controls the behavior of PWM:\n                  3=Reserved\n                  2=PWM is configured as a 6-bit PWM\n                  1=PWM is configured as a 7-bit PWM\n                  0=PWM is configured as an 8-bit PWM</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>EN_UPDATE</name>
                     <description>ENABLE_UPDATE  This bit is set to 1 when written with a '1'. Writes of '0' have no effect. Hardware clears this bit to 0 when the breathing configuration registers are updated at the end of a PWM period. The current state of the bit is readable any time.</description>
                     <bitOffset>6</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>RST</name>
                     <description>RESET  Writes of '1' to this bit resets the PWM registers to their default values. This bit is self clearing. Writes of '0' to this bit have no effect.</description>
                     <bitOffset>7</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>WDT_RELOAD</name>
                     <description>WDT_RELOAD  The PWM Watchdog Timer counter reload value. On system reset, it defaults to 14h, which corresponds to a 4 second Watchdog timeout value.</description>
                     <bitOffset>8</bitOffset>
                     <bitWidth>8</bitWidth>
                  </field>
                  <field>
                     <name>SYMMETRY</name>
                     <description>SYMMETRY  1=The rising and falling ramp times are in Asymmetric mode.\n                  0=The rising and falling ramp times are in Symmetric mode.</description>
                     <bitOffset>16</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>LIMIT</name>
               <description>LED Limits This register may be written at any time. Values written into the register are held in an holding register, which is transferred into the actual register at the end of a PWM period. The two byte fields may be written independently. Reads of this register return the current contents and not the value of the holding register.</description>
               <addressOffset>0x4</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>MIN</name>
                     <description>In breathing mode, when the current duty cycle is less than or equal to this value the breathing apparatus holds the current duty cycle for the period specified by the field LD in register LED_DELAY, then starts incrementing the current duty cycle In blinking mode, this field defines the duty cycle of the blink function.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>8</bitWidth>
                  </field>
                  <field>
                     <name>MAX</name>
                     <description>In breathing mode, when the current duty cycle is greater than or equal to this value the breathing apparatus holds the current duty cycle for the period specified by the field HD in register LED_DELAY, then starts decrementing the current duty cycle</description>
                     <bitOffset>8</bitOffset>
                     <bitWidth>8</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>DLY</name>
               <description>LED Delay</description>
               <addressOffset>0x8</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>LOW_PULSE</name>
                     <description>The number of PWM periods to wait before updating the current duty cycle when the current duty cycle is greater than or equal to the value MIN in register LED_LIMIT.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>12</bitWidth>
                  </field>
                  <field>
                     <name>HIGH_PULSE</name>
                     <description>In breathing mode, the number of PWM periods to wait before updating the current duty cycle when the current duty cycle is greater than or equal to the value MAX in register LED_LIMIT.</description>
                     <bitOffset>12</bitOffset>
                     <bitWidth>12</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>STEP</name>
               <description>This register has eight segment fields which provide the amount the current duty cycle is adjusted at the end of every PWM period. Segment field selection is decoded based on the segment index. The segment index equation utilized depends on the SYMMETRY bit in the LED Configuration Register Register)              . In Symmetric Mode the Segment_Index[2:0] = Duty Cycle Bits[7:5]\n              . In Asymmetric Mode the Segment_Index[2:0] is the bit concatenation of following: Segment_Index[2] = (FALLING RAMP TIME in Figure 30-3, Clipping Example) and Segment_Index[1:0] = Duty Cycle Bits[7:6].</description>
               <addressOffset>0xC</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>S0</name>
                     <description>Amount the current duty cycle is adjusted at the end of every PWM period when the segment index is equal to 000.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>4</bitWidth>
                  </field>
                  <field>
                     <name>S1</name>
                     <description>Amount the current duty cycle is adjusted at the end of every PWM period when the segment index is equal to 001.</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>4</bitWidth>
                  </field>
                  <field>
                     <name>S2</name>
                     <description>Amount the current duty cycle is adjusted at the end of every PWM period when the segment index is equal to 010.</description>
                     <bitOffset>8</bitOffset>
                     <bitWidth>4</bitWidth>
                  </field>
                  <field>
                     <name>S3</name>
                     <description>Amount the current duty cycle is adjusted at the end of every PWM period when the segment index is equal to 011.</description>
                     <bitOffset>12</bitOffset>
                     <bitWidth>4</bitWidth>
                  </field>
                  <field>
                     <name>S4</name>
                     <description>Amount the current duty cycle is adjusted at the end of every PWM period when the segment index is equal to 100.</description>
                     <bitOffset>16</bitOffset>
                     <bitWidth>4</bitWidth>
                  </field>
                  <field>
                     <name>S5</name>
                     <description>Amount the current duty cycle is adjusted at the end of every PWM period when the segment index is equal to 101</description>
                     <bitOffset>20</bitOffset>
                     <bitWidth>4</bitWidth>
                  </field>
                  <field>
                     <name>S6</name>
                     <description>Amount the current duty cycle is adjusted at the end of every PWM period when the segment index is equal to 110.</description>
                     <bitOffset>24</bitOffset>
                     <bitWidth>4</bitWidth>
                  </field>
                  <field>
                     <name>S7</name>
                     <description>Amount the current duty cycle is adjusted at the end of every PWM period when the segment index is equal to 111.</description>
                     <bitOffset>28</bitOffset>
                     <bitWidth>4</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>INTRVL</name>
               <description>LED Update Interval</description>
               <addressOffset>0x10</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>I0</name>
                     <description>The number of PWM periods between updates to current duty cycle when the segment index is equal to 000b.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>4</bitWidth>
                  </field>
                  <field>
                     <name>I1</name>
                     <description>The number of PWM periods between updates to current duty cycle when the segment index is equal to 001b.</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>4</bitWidth>
                  </field>
                  <field>
                     <name>I2</name>
                     <description>The number of PWM periods between updates to current duty cycle when the segment index is equal to 010b.</description>
                     <bitOffset>8</bitOffset>
                     <bitWidth>4</bitWidth>
                  </field>
                  <field>
                     <name>I3</name>
                     <description>The number of PWM periods between updates to current duty cycle when the segment index is equal to 011b.</description>
                     <bitOffset>12</bitOffset>
                     <bitWidth>4</bitWidth>
                  </field>
                  <field>
                     <name>I4</name>
                     <description>The number of PWM periods between updates to current duty cycle when the segment index is equal to 100b.</description>
                     <bitOffset>16</bitOffset>
                     <bitWidth>4</bitWidth>
                  </field>
                  <field>
                     <name>I5</name>
                     <description>The number of PWM periods between updates to current duty cycle when the segment index is equal to 101b.</description>
                     <bitOffset>20</bitOffset>
                     <bitWidth>4</bitWidth>
                  </field>
                  <field>
                     <name>I6</name>
                     <description>The number of PWM periods between updates to current duty cycle when the segment index is equal to 110b.</description>
                     <bitOffset>24</bitOffset>
                     <bitWidth>4</bitWidth>
                  </field>
                  <field>
                     <name>I7</name>
                     <description>The number of PWM periods between updates to current duty cycle when the segment index is equal to 111b.</description>
                     <bitOffset>28</bitOffset>
                     <bitWidth>4</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>OUTDLY</name>
               <description>LED Output Delay</description>
               <addressOffset>0x14</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>DELAY</name>
                     <description>The delay, in counts of the clock defined in Clock Source (CLKSRC), in which output transitions are delayed.\n     When this field is 0, there is no added transition delay. When the LED is programmed to be Always On or Always Off, the\n     Output Delay field has no effect.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>8</bitWidth>
                  </field>
               </fields>
            </register>
         </registers>
      </peripheral>
      <peripheral derivedFrom="LED0">
         <name>LED1</name>
         <baseAddress>0x4000B900</baseAddress>
         <interrupt>
            <name>LED1</name>
            <value>84</value>
         </interrupt>
      </peripheral>
      <peripheral>
         <name>SMB0</name>
         <version>311.0</version>
         <description>The SMBus interface can handle standard SMBus 2.0 protocols as well as I2C interface.</description>
         <groupName>SMB</groupName>
         <prependToName>SMB_</prependToName>
         <baseAddress>0x40004000</baseAddress>
         <addressBlock>
            <offset>0</offset>
            <size>0x79</size>
            <usage>registers</usage>
         </addressBlock>
         <interrupt>
            <name>GIRQ13</name>
            <value>5</value>
         </interrupt>
         <interrupt>
            <name>I2CSMB0</name>
            <value>20</value>
         </interrupt>
         <registers>
            <register>
               <name>WCTRL</name>
               <description>Control Register</description>
               <addressOffset>0x0</addressOffset>
               <size>32</size>
               <access>write-only</access>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>ACK</name>
                     <description>The Acknowledge bit (ACK) must normally be asserted ('1'). This causes the controller to send an acknowledge automatically after each byte (this occurs during the 9th clock pulse). The ACK bit must not be asserted ('0') when the controller is operating in master/receiver mode and requires no further data to be sent from the slave transmitter. This causes a negative acknowledge on the I2C bus, which halts further transmission from the slave device.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>STO</name>
                     <description>See STA description</description>
                     <bitOffset>1</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>STA</name>
                     <description>The STA and STO bits control the generation of the I2C Start condition and the transmission of the Slave Address and R/nW bit (from the Data Register), generation of repeated Start condition, and generation of the Stop condition</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>ENI</name>
                     <description>Enable Interrupt bit (ENI) controls the Interrupt Interface</description>
                     <bitOffset>3</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>ESO</name>
                     <description>The Enable Serial Output bit (ESO) enables and disables the SMB Controller Core serial data output (SDAT)</description>
                     <bitOffset>6</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>PIN</name>
                     <description>The Pending Interrupt Not (PIN) bit serves as a software reset function. Writing the PIN bit to a logic '1' de-asserts all status bits except for the nBB bit which is not affected by the PIN bit. The PIN bit is a self-clearing bit. Writing this bit to a logic '0' has no effect.</description>
                     <bitOffset>7</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>RSTS</name>
               <description>Status Register</description>
               <addressOffset>0x0</addressOffset>
               <size>32</size>
               <access>read-only</access>
               <resetValue>0x00000081</resetValue>
               <fields>
                  <field>
                     <name>NBB</name>
                     <description>The Bus Busy bit (NBB) is a read-only flag indicating when the bus is in use. A zero indicates that the bus is busy and access is not possible.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>LAB</name>
                     <description>The Lost Arbitration Bit (LAB) is set when, in multi-master operation, arbitration is lost to another master on the bus</description>
                     <bitOffset>1</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>AAS</name>
                     <description>The Addressed As Slave bit (AAS) is valid only when PIN is asserted ('0'). When acting as slave, AAS is set when an incoming address over the bus matches the value in the Own Address Register or if the 'general call' address (00h) has been received</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>LRB_AD0</name>
                     <description>The Last Received Bit  or Address 0 (general call) bit (LRB/AD0) serves a dual function and is valid only while the PIN bit is asserted ('0').\n                When the AAS bit is not asserted ('0') (i.e., not addressed as a slave), the LRB/AD0 holds the value of the last received bit over the bus.\n                When the AAS bit is asserted ('1') (i.e., addressed as slave), the SMB Controller Core has been addressed as a slave.</description>
                     <bitOffset>3</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>BER</name>
                     <description>When Bus Error (BER) is asserted, a misplaced START or STOP condition or Bus Time-Outs have been detected.</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>STS</name>
                     <description>When in slave receiver mode, STS is asserted ('1') when an externally generated STOP condition is detected. Note that STS is used only in slave receiver mode.</description>
                     <bitOffset>5</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>SAD</name>
                     <description>SMBus Address Decoded (SAD)</description>
                     <bitOffset>6</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>PIN</name>
                     <description>Pending Interrupt bit</description>
                     <bitOffset>7</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>OWN_ADDR</name>
               <description>Own Address Register\n           Note that the Data Register and Own Address fields are offset by one bit, so that programming Own Address 1 with a value of 55h will result in the value AAh being recognized as the SMB Controller Core slave address.</description>
               <addressOffset>0x4</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>ADDR1</name>
                     <description>The Own Address 1 bits configure one of the two addresses to which the SMB Controller Core will respond when addressed as a slave.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>7</bitWidth>
                  </field>
                  <field>
                     <name>ADDR2</name>
                     <description>The Own Address 2 bits configure one of the two addresses to which the SMB Controller Core will respond when addressed as a slave.</description>
                     <bitOffset>8</bitOffset>
                     <bitWidth>7</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>I2CDATA</name>
               <description>This register holds the data that are either shifted out to or shifted in from the I2C port.</description>
               <addressOffset>0x8</addressOffset>
               <size>8</size>
               <resetValue>0x00</resetValue>
            </register>
            <register>
               <dim>3</dim>
               <dimIncrement>1</dimIncrement>
               <name>RSVD1[%s]</name>
               <description>Reserved</description>
               <addressOffset>0x9</addressOffset>
               <size>8</size>
               <access>read-only</access>
               <resetValue>0x00</resetValue>
            </register>
            <register>
               <name>MCMD</name>
               <description>SMBus Master Command Register</description>
               <addressOffset>0xC</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>MRUN</name>
                     <description>While this bit is 1, transfer bytes over SMBus. As long as WriteCount is non-zero, a byte from the Master Transmit Buffer is transmitted to the slave device and WriteCount is decremented.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>MPROCEED</name>
                     <description>When this bit is 0, the Master State Machine does not transition out of the IDLE or PAUSE states. When this bit is 1, the Master State Machine immediately transitions to the WAIT-BUSBUSY and MRUN-RECEIVE states, respectively.</description>
                     <bitOffset>1</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>START0</name>
                     <description>If this bit is 1, send a Start bit on the SMBus before the first byte of the WriteCount is sent to the SMBus transmitter.</description>
                     <bitOffset>8</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>STARTN</name>
                     <description>If this bit is 1, send a Start bit just before the last byte of the WriteCount is sent to the SMBus transmitter.</description>
                     <bitOffset>9</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>STOP</name>
                     <description>If this bit is 1, send a Stop bit after the transaction completes.</description>
                     <bitOffset>10</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>PEC_TERM</name>
                     <description>If this bit is 1, a copy of the PEC register is transmitted when WriteCount is 0. After the PEC register is read, both the PEC register and this bit are cleared to 0.</description>
                     <bitOffset>11</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>READM</name>
                     <description>If this bit is 1, then the ReadCount field is replaced by the byte that is read from the SMBus when ReadCount[7:0] is 1. After ReadCount[7:0] is updated, this bit is cleared to 0.</description>
                     <bitOffset>12</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>RD_PEC</name>
                     <description>If this bit is 0, reading from the SMBus stops when ReadCount reaches 0. If this bit is 1, reading continues when ReadCount is 0 for one more byte.</description>
                     <bitOffset>13</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>WR_CNT</name>
                     <description>This field is a count of the number of bytes to transmit to the SMBus from the SMBus Master Transmit Buffer Register It is decremented by 1 for each byte written to the SMBus from the SMBus Master Transmit Buffer Register.</description>
                     <bitOffset>16</bitOffset>
                     <bitWidth>8</bitWidth>
                  </field>
                  <field>
                     <name>RD_CNT</name>
                     <description>This field is a count of the number of bytes to read in from the SMBus to the SMBus Master Receive Buffer Register and must be greater than 0 in order for the Master State Machine to initiate a read phase. It is decremented by 1 for each byte read from the SMBus into the SMBus Master Receive Buffer Register. It can be overwritten by the first byte read in from the SMBus.</description>
                     <bitOffset>24</bitOffset>
                     <bitWidth>8</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>SCMD</name>
               <description>SMBus Slave Command Register</description>
               <addressOffset>0x10</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>SRUN</name>
                     <description>Setting this bit to 1 enables the Slave State Machine to operate.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>SPROCEED</name>
                     <description>When this bit is 0, the Slave State Machine does not transition out of the IDLE, REPEAT_START_WRITE or REPEAT_START_READ states. When this bit is 1, the Slave State Machine immediately transitions to the START_WAIT, RECEIVE and TRANSMIT states, respectively.</description>
                     <bitOffset>1</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>PEC</name>
                     <description>If Slave_WriteCount is 0 and Slave_PEC is 1 when the Master requests data, the PEC Register is copied to the DATA register. After the PEC Register is copied to the SMBus, the PEC Register is cleared and Slave_PEC is set to 0.</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>WR_CNT</name>
                     <description>This field is set to the number of bytes software expects to send to the Master.</description>
                     <bitOffset>8</bitOffset>
                     <bitWidth>8</bitWidth>
                  </field>
                  <field>
                     <name>RD_CNT</name>
                     <description>This field is decremented each time a byte is copied from DATA to the SMBus Slave Receive Buffer Register.</description>
                     <bitOffset>16</bitOffset>
                     <bitWidth>8</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>PEC</name>
               <description>Packet Error Check (PEC) Register</description>
               <addressOffset>0x14</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>PEC</name>
                     <description>The SMBus Packet Error Check (PEC) byte.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>8</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>RSHTM</name>
               <description>Repeated Start Hold Time Register</description>
               <addressOffset>0x18</addressOffset>
               <size>32</size>
               <resetValue>0x0000004D</resetValue>
               <fields>
                  <field>
                     <name>RSHTM</name>
                     <description>This is the value of the timing requirement tHd:Sta in the I2C specification for a repeated START bit. This is used to hold\n      the clock until the Hold Time for the repeated Start Bit has been satisfied.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>8</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>RSVD2</name>
               <description>Reserved</description>
               <addressOffset>0x1C</addressOffset>
               <size>32</size>
               <access>read-only</access>
               <resetValue>0x00</resetValue>
            </register>
            <register>
               <name>COMPL</name>
               <description>Completion Register</description>
               <addressOffset>0x20</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>DTEN</name>
                     <description>When DTEN is asserted ('1'), Device Time-out checking is enabled. When DTEN is not asserted ('0'), Device Time-out checking is disabled.</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>MCEN</name>
                     <description>When MCEN is asserted ('1'), Master Cumulative Time-Out checking is enabled. When MCEN is not asserted ('0'), Master Cumulative Time-Out checking is disabled.</description>
                     <bitOffset>3</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>SCEN</name>
                     <description>When SCEN is asserted ('1'), Slave Cumulative Time-Out checking is enabled. When SCEN is not asserted ('0'), Slave Cumulative Time-Out checking is disabled.</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>BIDEN</name>
                     <description>When BIDEN is asserted ('1'), Bus Idle Detect Time-Out checking is enabled. When BIDEN is not asserted ('0'), Bus Idle Detect Time-Out checking is disabled.</description>
                     <bitOffset>5</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>TIMERR</name>
                     <description>The Time-out Error Detected bit (TIMERR) is asserted ('1') whenever any of the enabled time-out error detect status bits (CHDH, CHDL, SCTO, MCTO and DTO) are asserted.</description>
                     <bitOffset>6</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>DTO</name>
                     <description>DTO is the Device Time-out bit. (R/WC)</description>
                     <bitOffset>8</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>MCTO</name>
                     <description>MCTO is the Master Cumulative Time-out bit. (R/WC)</description>
                     <bitOffset>9</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>SCTO</name>
                     <description>SCTO is the Slave Cumulative Time-out bit(R/WC)</description>
                     <bitOffset>10</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>CHDL</name>
                     <description>CHDL is the clock high time-out detect bit(R/WC)</description>
                     <bitOffset>11</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>CHDH</name>
                     <description>CHDH is the bus idle time-out detect bit(R/WC)</description>
                     <bitOffset>12</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>BER</name>
                     <description>If this bit is 1, the BER bit in the Status register was set while either the Slave state machine or the Master state machine was not in the Idle state.(R/WC)</description>
                     <bitOffset>13</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>LAB</name>
                     <description>If this bit is 1, the LAB bit in the Status register was set while either the Slave state machine or the Master state machine was not in the Idle state.(R/WC)</description>
                     <bitOffset>14</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>SNAKR</name>
                     <description>If this bit is 1, the Slave state machine sent a NACK to the transmitting Master while the Slave was receiving data from the SMBus interface.</description>
                     <bitOffset>16</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>STR</name>
                     <description>0: Slave has just finished the receive phase of a transaction. \n                1: Slave has just finished the transmit phase of a transaction.</description>
                     <bitOffset>17</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>SPROT</name>
                     <description>If this bit is 1, the WriteCount[7:0] counter in the Slave state machine either counted down to 0 before the Master sent a NACK signal, or the Slave received a NACK signal before the counter reached 0.</description>
                     <bitOffset>19</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>REP_RD</name>
                     <description>If this bit is 1, the Slave State Machine stopped because it detected a Repeat Start bit, with bit[0] of the byte containing the slave address equal to 1, indicating that the Master requested a Read operation.</description>
                     <bitOffset>20</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>REP_WR</name>
                     <description>If this bit is 1, the Slave State Machine stopped because it detected a Repeat Start bit, with bit[0] of the byte containing the slave address equal to 0, indicating that the Master requested a Write operation.</description>
                     <bitOffset>21</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>MNAKX</name>
                     <description>If this bit is 1, the Master state machine received a NACK from the receiving Slave while the Master was transmitting data over the SMBus interface. (R/WC)</description>
                     <bitOffset>24</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>MTR</name>
                     <description>0: Master has just finished the receive phase of a transaction. \n                1: Master has just finished the transmit phase of a transaction.</description>
                     <bitOffset>25</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>IDLE</name>
                     <description>This bit is set when the I2C bus becomes idle (on the rising edge of nBB). (R/WC)</description>
                     <bitOffset>29</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>MDONE</name>
                     <description>If this bit is 1, Master State machine completed operation and returned to the Idle state. It is cleared when written with a 1. Writes of a 0 have no effect. (R/WC)</description>
                     <bitOffset>30</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>SDONE</name>
                     <description>If this bit is 1, Slave State machine completed operation and returned to the Idle state. It is cleared when written with a 1. Writes of a 0 have no effect.(R/WC)</description>
                     <bitOffset>31</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>IDLSC</name>
               <description>Idle Scaling Register</description>
               <addressOffset>0x24</addressOffset>
               <size>32</size>
               <resetValue>0x01FC01ED</resetValue>
               <fields>
                  <field>
                     <name>FAIR_BUS_IDL_MIN</name>
                     <description>This field defines the number of ticks of the baud clock required to satisfy the fairness protocol. The default value for this field sets the idle window to 31us, which is the appropriate value for a 100 KHz bus</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>12</bitWidth>
                  </field>
                  <field>
                     <name>FAIR_IDL_DLY</name>
                     <description>This field defines the number of ticks of the baud clock required to program the delay. The default value for this field sets the delay period to 32us, which is the appropriate value for a 100 KHz bus</description>
                     <bitOffset>16</bitOffset>
                     <bitWidth>12</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>CFG</name>
               <description>Configuration Register</description>
               <addressOffset>0x28</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>PORT_SEL</name>
                     <description>The PORT SEL [3:0] bits determine which one of 16 possible bus ports apply to the active 2-wire SDAT and SCLK bus pair.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>4</bitWidth>
                  </field>
                  <field>
                     <name>TCEN</name>
                     <description>When the Timing Check Enable bit (TCEN) is asserted ('1'), Bus Time-Outs are enabled</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>SLOW_CLK</name>
                     <description>When this bit is 1, the base period for the Bus Clock Register is multiplied by 4, and thus the frequency is divided by 4.</description>
                     <bitOffset>5</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>TEST</name>
                     <description>Must be always written with 0.</description>
                     <bitOffset>6</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>PECEN</name>
                     <description>When the PEC Enable bit (PECEN) is asserted ('1'), Hardware PEC Support is enabled</description>
                     <bitOffset>7</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>FEN</name>
                     <description>Input filtering enable. Input filtering is required by the I2C specification if external filtering is not available.\n      1=Input filtering is enabled; 0=Input filtering is disabled.</description>
                     <bitOffset>8</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>RST</name>
                     <description>When RESET is asserted ('1'), all logic and registers except for the RESET bit itself are initialized to the power-on default state.</description>
                     <bitOffset>9</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>EN</name>
                     <description>When ENAB (Enable) is not asserted ('0') (default), the SMB Controller Core is disabled and in the lowest power consumption state (Disabled State).\n                The ENAB bit must be asserted ('1') for normal operation.</description>
                     <bitOffset>10</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>DSA</name>
                     <description>0: Slave Address I2C Compatibility Mode (default). 1: SMBus Address Decode Mode</description>
                     <bitOffset>11</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>FAIR</name>
                     <description>If this bit is 1, the MCTP Fairness protocol is in effect.</description>
                     <bitOffset>12</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>TEST0</name>
                     <description>Must be always written with 0.</description>
                     <bitOffset>13</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>GC_DIS</name>
                     <description>This is the General Call Disable bit.\n                0: the response to the General Call address as a slave is enabled\n                1: the response to the General Call address as a slave is disabled.</description>
                     <bitOffset>14</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>CFG_PROMIS</name>
                     <description>This bit define the Mode of SM Bus Controler Mode of operation.         0= Normal Operation.         1=  Promiscuous Mode Enable.</description>
                     <bitOffset>15</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>FLUSH_SXBUF</name>
                     <description>A write of a 1 to this bit forces the SMBus Slave Transmit Buffer Register to be marked empty. A write of 0 has no effect. This is a self-clearing bit.</description>
                     <bitOffset>16</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>FLUSH_SRBUF</name>
                     <description>A write of a 1 to this bit forces the SMBus Slave Receive Buffer Register to be marked empty. A write of 0 has no effect. This is a self-clearing bit.</description>
                     <bitOffset>17</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>FLUSH_MXBUF</name>
                     <description>A write of a 1 to this bit forces the SMBus Master Transmit Buffer Register to be marked empty. A write of 0 has no effect. This is a self-clearing bit.</description>
                     <bitOffset>18</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>FLUSH_MRBUF</name>
                     <description>A write of a 1 to this bit forces the SMBus Master Receive Buffer Register to be marked empty. A write of 0 has no effect. This is a self-clearing bit.</description>
                     <bitOffset>19</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>EN_AAS</name>
                     <description>0: Disable the AAS, 1: Enable the AAS Interrupt</description>
                     <bitOffset>28</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>ENIDI</name>
                     <description>If this bit is 1, the Idle interrupt is enabled. If this bit is 0, the Idle interrupt is disabled.</description>
                     <bitOffset>29</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>ENMI</name>
                     <description>If this bit is 1, the Master Done interrupt is enabled. If this bit is 0, the Master Done interrupt is disabled.</description>
                     <bitOffset>30</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>ENSI</name>
                     <description>If this bit is 1, the Slave Done interrupt is enabled. If this bit is 0, the Slave Done interrupt is disabled</description>
                     <bitOffset>31</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>BUSCLK</name>
               <description>Bus Clock Register</description>
               <addressOffset>0x2C</addressOffset>
               <size>32</size>
               <resetValue>0x00004F4F</resetValue>
               <fields>
                  <field>
                     <name>LOW_PER</name>
                     <description>This field defines the number of I2C Baud Clock periods that make up the low phase of the I2C/SMBus bus clock.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>8</bitWidth>
                  </field>
                  <field>
                     <name>HIGH_PER</name>
                     <description>This field defines the number of I2C Baud Clock periods that make up the high phase of the I2C/SMBus bus clock.</description>
                     <bitOffset>8</bitOffset>
                     <bitWidth>8</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>BLKID</name>
               <description>Block ID Register</description>
               <addressOffset>0x30</addressOffset>
               <size>8</size>
               <access>read-only</access>
               <resetValue>0x11</resetValue>
               <fields>
                  <field>
                     <name>ID</name>
                     <description>Block ID.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>8</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>BLKREV</name>
               <description>Revision Register</description>
               <addressOffset>0x34</addressOffset>
               <size>8</size>
               <access>read-only</access>
               <resetValue>0x00</resetValue>
               <fields>
                  <field>
                     <name>REV</name>
                     <description>Block Revision Number</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>8</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>BBCTRL</name>
               <description>Bit-Bang Control Register</description>
               <addressOffset>0x38</addressOffset>
               <size>32</size>
               <resetValue>0x00000060</resetValue>
               <fields>
                  <field>
                     <name>BBEN</name>
                     <description>Bit-Bang Mode Enable. 0 - Bit Bang Mode Disabled. 1 - Bit Bang Mode Enabled</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>CLDIR</name>
                     <description>Bit-Bang Clock Direction. The CLDIR bit controls the direction of SCLK. 0 - Input, 1 - Output</description>
                     <bitOffset>1</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>DADIR</name>
                     <description>Bit-Bang Data Direction. The DADIR bit controls the direction of SDAT. 0 - Input. 1 - Output</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>BBCLK</name>
                     <description>Bit-Bang Clock. The BBCLK bit controls the state of SCLK when BBEN = and CLDIR = '1'</description>
                     <bitOffset>3</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>BBDAT</name>
                     <description>Bit-Bang Data. The BBDAT bit controls the state of SDAT when BBEN = and DADIR = '1'</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>BBCLKI</name>
                     <description>Bit-Bang Clock In. The BBCLKI bit always returns the state of SCLK.</description>
                     <bitOffset>5</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>BBDATI</name>
                     <description>Bit-Bang Data In. The BBDATI bit always returns the state of SDAT</description>
                     <bitOffset>6</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>TEST</name>
               <description>Test</description>
               <addressOffset>0x3C</addressOffset>
               <size>8</size>
               <access>read-only</access>
               <resetValue>0x05</resetValue>
               <fields>
                  <field>
                     <name>TEST</name>
                     <description>This register must not be written, or undesirable results may occur.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>8</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>DATATM</name>
               <description>Data Timing Register</description>
               <addressOffset>0x40</addressOffset>
               <size>32</size>
               <resetValue>0x0C4D5006</resetValue>
               <fields>
                  <field>
                     <name>DATA_HOLD</name>
                     <description>The Data Hold [7:0] timer determines the SDAT hold time following SCLK driven low.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>8</bitWidth>
                  </field>
                  <field>
                     <name>RESTART_SETUP</name>
                     <description>The Restart Setup [7:0] timer determines the SDAT setup time from the rising edge of SCLK for a repeated START condition.</description>
                     <bitOffset>8</bitOffset>
                     <bitWidth>8</bitWidth>
                  </field>
                  <field>
                     <name>STOP_SETUP</name>
                     <description>The Stop Setup [7:0] timer determines the SDAT setup time from the rising edge of SCLK for a STOP condition.</description>
                     <bitOffset>16</bitOffset>
                     <bitWidth>8</bitWidth>
                  </field>
                  <field>
                     <name>FIRST_START_HOLD</name>
                     <description>This field determines the SCL hold time following SDA driven low during the first START bit in a transfer. It is the parameter\n      THD:STA in the I2C Specification for an initial START bit. Repeated START hold time is determined by the Repeated START Hold Time Register.</description>
                     <bitOffset>24</bitOffset>
                     <bitWidth>8</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>TMOUTSC</name>
               <description>Time-Out Scaling Register</description>
               <addressOffset>0x44</addressOffset>
               <size>32</size>
               <resetValue>0x4B9CC2C7</resetValue>
               <fields>
                  <field>
                     <name>CLK_HIGH_TIM_OUT</name>
                     <description>Clock High time out period = Clock High Time-Out [7:0] x Baud_Clock_Period x 2</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>8</bitWidth>
                  </field>
                  <field>
                     <name>SLV_CUM_TIM_OUT</name>
                     <description>Slave Cumulative Time-Out duration = Slave Cum Time-Out [7:0] x Baud_Clock_Period x 1024</description>
                     <bitOffset>8</bitOffset>
                     <bitWidth>8</bitWidth>
                  </field>
                  <field>
                     <name>MAST_CUM_TIM_OUT</name>
                     <description>Master Cumulative Time-Out duration = Master Cum Time-Out [7:0] x Baud_Clock_Period x 512</description>
                     <bitOffset>16</bitOffset>
                     <bitWidth>8</bitWidth>
                  </field>
                  <field>
                     <name>BUS_IDLE_MIN</name>
                     <description>Bus Idle Minimum time = Bus Idle Min [7:0] x Baud_Clock_Period</description>
                     <bitOffset>24</bitOffset>
                     <bitWidth>8</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>SLV_TXB</name>
               <description>SMBus Slave Transmit Buffer Register</description>
               <addressOffset>0x48</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>STXB</name>
                     <description>SLAVE_TRANSMIT_BUFFER</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>8</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>SLV_RXB</name>
               <description>SMBus Slave Receive Buffer Register</description>
               <addressOffset>0x4C</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>SRXB</name>
                     <description>SLAVE_RECEIVE_BUFFER</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>8</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>MTR_TXB</name>
               <description>SMBus Master Transmit Buffer Register</description>
               <addressOffset>0x50</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>MTXB</name>
                     <description>MASTER_TRANSMIT_BUFFER</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>8</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>MTR_RXB</name>
               <description>SMBus Master Receive Buffer Register</description>
               <addressOffset>0x54</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>MRXB</name>
                     <description>MASTER_RECEIVE_BUFFER</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>8</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>WAKE_STS</name>
               <description>WAKE STATUS Register</description>
               <addressOffset>0x60</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>START_BIT_DET</name>
                     <description>This bit is set to '1' when a START bit is detected while the controller is enabled. This bit is cleared to '0' when\n      written with a '1'. Writes of '0' have no effect. (R/WC)</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>WAKE_EN</name>
               <description>WAKE ENABLE Register</description>
               <addressOffset>0x64</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>START_DET_INT_EN</name>
                     <description>Enable Start Bit Detection Interrupt. The Start Bit Detection Interrupt is wake-capable.\n      1=Start Bit Detection Interrupt enabled; 0=Start Bit Detection Interrupt disabled</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>SLV_ADDR</name>
               <description>This is the Slave Address Register</description>
               <addressOffset>0x6C</addressOffset>
               <size>8</size>
               <resetValue>0x00</resetValue>
               <fields>
                  <field>
                     <name>SADDR</name>
                     <description>This register stores value of address + LSB direction after the 8th clock of the Address Byte.\n</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>8</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>PRM_STS</name>
               <description>This is the Promiscuous Interrupt Register</description>
               <addressOffset>0x70</addressOffset>
               <size>8</size>
               <resetValue>0x00</resetValue>
               <fields>
                  <field>
                     <name>ADDR_INTR</name>
                     <description>This is the Promiscuous Address Status interrupt and is set on the 8th clock of the I2C Address.\n         This bit will hold the Clock line low till this register bit is cleared. This is Write 1 to clear.\n         R/W1C.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>PRM_IEN</name>
               <description>This is the Promiscuous Interrupt Enable Register</description>
               <addressOffset>0x74</addressOffset>
               <size>8</size>
               <resetValue>0x00</resetValue>
               <fields>
                  <field>
                     <name>ADDR</name>
                     <description>This is the Promiscuous interrupt enable register.\n         1= Interrupt Enable. \n         0= Interrupt Disabled. \n</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>PRM_CTRL</name>
               <description>This is the Promiscuous Control Register</description>
               <addressOffset>0x78</addressOffset>
               <size>8</size>
               <resetValue>0x00</resetValue>
               <fields>
                  <field>
                     <name>ACK_NAK</name>
                     <description>This is the Promiscuous ACK / NAK response register.\n         1= ACK. \n         0= NAK. \n</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
         </registers>
      </peripheral>
      <peripheral derivedFrom="SMB0">
         <name>SMB1</name>
         <baseAddress>0x40004400</baseAddress>
         <interrupt>
            <name>I2CSMB1</name>
            <value>21</value>
         </interrupt>
      </peripheral>
      <peripheral derivedFrom="SMB0">
         <name>SMB2</name>
         <baseAddress>0x40004800</baseAddress>
         <interrupt>
            <name>I2CSMB2</name>
            <value>22</value>
         </interrupt>
      </peripheral>
      <peripheral derivedFrom="SMB0">
         <name>SMB3</name>
         <baseAddress>0x40004C00</baseAddress>
         <interrupt>
            <name>I2CSMB3</name>
            <value>23</value>
         </interrupt>
      </peripheral>
      <peripheral derivedFrom="SMB0">
         <name>SMB4</name>
         <baseAddress>0x40005000</baseAddress>
         <interrupt>
            <name>I2CSMB4</name>
            <value>158</value>
         </interrupt>
      </peripheral>
      <peripheral>
         <name>I2C0</name>
         <version>311.0</version>
         <description>The I2C interface can handle standard I2C interface.</description>
         <groupName>I2C</groupName>
         <prependToName>I2C_</prependToName>
         <baseAddress>0x40005100</baseAddress>
         <addressBlock>
            <offset>0</offset>
            <size>0x79</size>
            <usage>registers</usage>
         </addressBlock>
         <interrupt>
            <name>I2C0</name>
            <value>168</value>
         </interrupt>
         <registers>
            <register>
               <name>WCTRL</name>
               <description>Control Register</description>
               <addressOffset>0x0</addressOffset>
               <size>32</size>
               <access>write-only</access>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>ACK</name>
                     <description>The Acknowledge bit (ACK) must normally be asserted ('1'). This causes the controller to send an acknowledge automatically after each byte (this occurs during the 9th clock pulse). The ACK bit must not be asserted ('0') when the controller is operating in master/receiver mode and requires no further data to be sent from the slave transmitter. This causes a negative acknowledge on the I2C bus, which halts further transmission from the slave device.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>STO</name>
                     <description>See STA description</description>
                     <bitOffset>1</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>STA</name>
                     <description>The STA and STO bits control the generation of the I2C Start condition and the transmission of the Slave Address and R/nW bit (from the Data Register), generation of repeated Start condition, and generation of the Stop condition</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>ENI</name>
                     <description>Enable Interrupt bit (ENI) controls the Interrupt Interface</description>
                     <bitOffset>3</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>ESO</name>
                     <description>The Enable Serial Output bit (ESO) enables and disables the SMB Controller Core serial data output (SDAT)</description>
                     <bitOffset>6</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>PIN</name>
                     <description>The Pending Interrupt Not (PIN) bit serves as a software reset function. Writing the PIN bit to a logic '1' de-asserts all status bits except for the nBB bit which is not affected by the PIN bit. The PIN bit is a self-clearing bit. Writing this bit to a logic '0' has no effect.</description>
                     <bitOffset>7</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>RSTS</name>
               <description>Status Register</description>
               <addressOffset>0x0</addressOffset>
               <size>32</size>
               <access>read-only</access>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>NBB</name>
                     <description>The Bus Busy bit (NBB) is a read-only flag indicating when the bus is in use. A zero indicates that the bus is busy and access is not possible.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>LAB</name>
                     <description>The Lost Arbitration Bit (LAB) is set when, in multi-master operation, arbitration is lost to another master on the bus</description>
                     <bitOffset>1</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>AAS</name>
                     <description>The Addressed As Slave bit (AAS) is valid only when PIN is asserted ('0'). When acting as slave, AAS is set when an incoming address over the bus matches the value in the Own Address Register or if the 'general call' address (00h) has been received</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>LRB_AD0</name>
                     <description>The (Last Received Bit)  or (Address 0) (general call) bit (LRB/AD0) serves a dual function and is valid only while the PIN bit is asserted ('0').\n                When the AAS bit is not asserted ('0') (i.e., not addressed as a slave), the LRB/AD0 holds the value of the last received bit over the bus.\n                When the AAS bit is asserted ('1') (i.e., addressed as slave), the SMB Controller Core has been addressed as a slave.</description>
                     <bitOffset>3</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>BER</name>
                     <description>When Bus Error (BER) is asserted, a misplaced START or STOP condition or Bus Time-Outs have been detected.</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>STS</name>
                     <description>When in slave receiver mode, STS is asserted ('1') when an externally generated STOP condition is detected. Note that STS is used only in slave receiver mode.</description>
                     <bitOffset>5</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>SAD</name>
                     <description>SMBus Address Decoded (SAD)</description>
                     <bitOffset>6</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>PIN</name>
                     <description>Pending Interrupt bit</description>
                     <bitOffset>7</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>OWN_ADDR</name>
               <description>Own Address Register\n           Note that the Data Register and Own Address fields are offset by one bit, so that programming Own Address 1 with a value of 55h will result in the value AAh being recognized as the SMB Controller Core slave address.</description>
               <addressOffset>0x4</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>ADDR1</name>
                     <description>The Own Address 1 bits configure one of the two addresses to which the SMB Controller Core will respond when addressed as a slave.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>7</bitWidth>
                  </field>
                  <field>
                     <name>ADDR2</name>
                     <description>The Own Address 2 bits configure one of the two addresses to which the SMB Controller Core will respond when addressed as a slave.</description>
                     <bitOffset>8</bitOffset>
                     <bitWidth>7</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>I2CDATA</name>
               <description>This register holds the data that are either shifted out to or shifted in from the I2C port.</description>
               <addressOffset>0x8</addressOffset>
               <size>8</size>
               <resetValue>0x00</resetValue>
            </register>
            <register>
               <name>RSHTM</name>
               <description>Repeated Start Hold Time Register</description>
               <addressOffset>0x18</addressOffset>
               <size>32</size>
               <resetValue>0x0000004D</resetValue>
               <fields>
                  <field>
                     <name>RSHTM</name>
                     <description>This is the value of the timing requirement tHd:Sta in the I2C specification for a repeated START bit. This is used to hold\n      the clock until the Hold Time for the repeated Start Bit has been satisfied.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>8</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>RSVD1</name>
               <description>Reserved</description>
               <addressOffset>0x1C</addressOffset>
               <size>32</size>
               <access>read-only</access>
               <resetValue>0x00</resetValue>
            </register>
            <register>
               <name>COMPL</name>
               <description>Completion Register</description>
               <addressOffset>0x20</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>DTEN</name>
                     <description>When DTEN is asserted ('1'), Device Time-out checking is enabled. When DTEN is not asserted ('0'), Device Time-out checking is disabled.</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>MCEN</name>
                     <description>When MCEN is asserted ('1'), Master Cumulative Time-Out checking is enabled. When MCEN is not asserted ('0'), Master Cumulative Time-Out checking is disabled.</description>
                     <bitOffset>3</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>SCEN</name>
                     <description>When SCEN is asserted ('1'), Slave Cumulative Time-Out checking is enabled. When SCEN is not asserted ('0'), Slave Cumulative Time-Out checking is disabled.</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>BIDEN</name>
                     <description>When BIDEN is asserted ('1'), Bus Idle Detect Time-Out checking is enabled. When BIDEN is not asserted ('0'), Bus Idle Detect Time-Out checking is disabled.</description>
                     <bitOffset>5</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>TIMERR</name>
                     <description>The Time-out Error Detected bit (TIMERR) is asserted ('1') whenever any of the enabled time-out error detect status bits (CHDH, CHDL, SCTO, MCTO and DTO) are asserted.</description>
                     <bitOffset>6</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>DTO</name>
                     <description>DTO is the Device Time-out bit. (R/WC)</description>
                     <bitOffset>8</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>MCTO</name>
                     <description>MCTO is the Master Cumulative Time-out bit. (R/WC)</description>
                     <bitOffset>9</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>SCTO</name>
                     <description>SCTO is the Slave Cumulative Time-out bit(R/WC)</description>
                     <bitOffset>10</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>CHDL</name>
                     <description>CHDL is the clock high time-out detect bit(R/WC)</description>
                     <bitOffset>11</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>CHDH</name>
                     <description>CHDH is the bus idle time-out detect bit(R/WC)</description>
                     <bitOffset>12</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>BER</name>
                     <description>If this bit is 1, the BER bit in the Status register was set while either the Slave state machine or the Master state machine was not in the Idle state.(R/WC)</description>
                     <bitOffset>13</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>LAB</name>
                     <description>If this bit is 1, the LAB bit in the Status register was set while either the Slave state machine or the Master state machine was not in the Idle state.(R/WC)</description>
                     <bitOffset>14</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>SNAKR</name>
                     <description>If this bit is 1, the Slave state machine sent a NACK to the transmitting Master while the Slave was receiving data from the SMBus interface.</description>
                     <bitOffset>16</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>STR</name>
                     <description>0: Slave has just finished the receive phase of a transaction. \n                1: Slave has just finished the transmit phase of a transaction.</description>
                     <bitOffset>17</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>REP_RD</name>
                     <description>If this bit is 1, the Slave State Machine stopped because it detected a Repeat Start bit, with bit[0] of the byte containing the slave address equal to 1, indicating that the Master requested a Read operation.</description>
                     <bitOffset>20</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>REP_WR</name>
                     <description>If this bit is 1, the Slave State Machine stopped because it detected a Repeat Start bit, with bit[0] of the byte containing the slave address equal to 0, indicating that the Master requested a Write operation.</description>
                     <bitOffset>21</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>MNAKX</name>
                     <description>If this bit is 1, the Master state machine received a NACK from the receiving Slave while the Master was transmitting data over the SMBus interface. (R/WC)</description>
                     <bitOffset>24</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>MTR</name>
                     <description>0: Master has just finished the receive phase of a transaction. \n                1: Master has just finished the transmit phase of a transaction.</description>
                     <bitOffset>25</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>IDLE</name>
                     <description>This bit is set when the I2C bus becomes idle (on the rising edge of nBB). (R/WC)</description>
                     <bitOffset>29</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>MDONE</name>
                     <description>If this bit is 1, Master State machine completed operation and returned to the Idle state. It is cleared when written with a 1. Writes of a 0 have no effect. (R/WC)</description>
                     <bitOffset>30</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>SDONE</name>
                     <description>If this bit is 1, Slave State machine completed operation and returned to the Idle state. It is cleared when written with a 1. Writes of a 0 have no effect.(R/WC)</description>
                     <bitOffset>31</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>RSVD2</name>
               <description>Reserved</description>
               <addressOffset>0x24</addressOffset>
               <size>32</size>
               <access>read-only</access>
               <resetValue>0x00</resetValue>
            </register>
            <register>
               <name>CFG</name>
               <description>Configuration Register</description>
               <addressOffset>0x28</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>PORT_SEL</name>
                     <description>The PORT SEL [3:0] bits determine which one of 16 possible bus ports apply to the active 2-wire SDAT and SCLK bus pair.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>4</bitWidth>
                  </field>
                  <field>
                     <name>TCEN</name>
                     <description>When the Timing Check Enable bit (TCEN) is asserted ('1'), Bus Time-Outs are enabled</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>SLOW_CLK</name>
                     <description>When this bit is 1, the base period for the Bus Clock Register is multiplied by 4, and thus the frequency is divided by 4.</description>
                     <bitOffset>5</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>TEST</name>
                     <description>Must be always written with 0.</description>
                     <bitOffset>6</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>FEN</name>
                     <description>Input filtering enable. Input filtering is required by the I2C specification if external filtering is not available.\n      1=Input filtering is enabled; 0=Input filtering is disabled.</description>
                     <bitOffset>8</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>RST</name>
                     <description>When RESET is asserted ('1'), all logic and registers except for the RESET bit itself are initialized to the power-on default state.</description>
                     <bitOffset>9</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>EN</name>
                     <description>When ENAB (Enable) is not asserted ('0') (default), the SMB Controller Core is disabled and in the lowest power consumption state (Disabled State).\n                The ENAB bit must be asserted ('1') for normal operation.</description>
                     <bitOffset>10</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>TEST0</name>
                     <description>Must be always written with 0.</description>
                     <bitOffset>11</bitOffset>
                     <bitWidth>3</bitWidth>
                  </field>
                  <field>
                     <name>GC_DIS</name>
                     <description>This is the General Call Disable bit.\n                0: the response to the General Call address as a slave is enabled\n                1: the response to the General Call address as a slave is disabled.</description>
                     <bitOffset>14</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>CNFG_PROMIS</name>
                     <description>This is the configur Promiscuous bit.\n                0: Normal operation is enabled. \n         1: Promiscuous Mode enabled , General Call Address disabled, Promiscuous Address Interrupt function enabled.    Stall 9th clock of address byte enabled.  Address byte ACK/NAK done by Promiscuous ACK setting.\n</description>
                     <bitOffset>15</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>BUSCLK</name>
               <description>Bus Clock Register</description>
               <addressOffset>0x2C</addressOffset>
               <size>32</size>
               <resetValue>0x00004F4F</resetValue>
               <fields>
                  <field>
                     <name>LOW_PER</name>
                     <description>This field defines the number of I2C Baud Clock periods that make up the low phase of the I2C/SMBus bus clock.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>8</bitWidth>
                  </field>
                  <field>
                     <name>HIGH_PER</name>
                     <description>This field defines the number of I2C Baud Clock periods that make up the high phase of the I2C/SMBus bus clock.</description>
                     <bitOffset>8</bitOffset>
                     <bitWidth>8</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>BLKID</name>
               <description>Block ID Register</description>
               <addressOffset>0x30</addressOffset>
               <size>8</size>
               <access>read-only</access>
               <resetValue>0x00</resetValue>
               <fields>
                  <field>
                     <name>ID</name>
                     <description>Block ID.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>8</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>BLKREV</name>
               <description>Revision Register</description>
               <addressOffset>0x34</addressOffset>
               <size>8</size>
               <access>read-only</access>
               <resetValue>0x00</resetValue>
               <fields>
                  <field>
                     <name>REV</name>
                     <description>Block Revision Number</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>8</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>BB_CTRL</name>
               <description>Bit-Bang Control Register</description>
               <addressOffset>0x38</addressOffset>
               <size>32</size>
               <resetValue>0x00000060</resetValue>
               <fields>
                  <field>
                     <name>BBEN</name>
                     <description>Bit-Bang Mode Enable. 0 - Bit Bang Mode Disabled. 1 - Bit Bang Mode Enabled</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>CLDIR</name>
                     <description>Bit-Bang Clock Direction. The CLDIR bit controls the direction of SCLK. 0 - Input, 1 - Output</description>
                     <bitOffset>1</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>DADIR</name>
                     <description>Bit-Bang Data Direction. The DADIR bit controls the direction of SDAT. 0 - Input. 1 - Output</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>BBCLK</name>
                     <description>Bit-Bang Clock. The BBCLK bit controls the state of SCLK when BBEN = and CLDIR = '1'</description>
                     <bitOffset>3</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>BBDAT</name>
                     <description>Bit-Bang Data. The BBDAT bit controls the state of SDAT when BBEN = and DADIR = '1'</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>BBCLKI</name>
                     <description>Bit-Bang Clock In. The BBCLKI bit always returns the state of SCLK.</description>
                     <bitOffset>5</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>BBDATI</name>
                     <description>Bit-Bang Data In. The BBDATI bit always returns the state of SDAT</description>
                     <bitOffset>6</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>CLKSYNC</name>
               <description>This is Clock Sync Register. This register must not be written, or undesirable results may occur.\n</description>
               <addressOffset>0x3C</addressOffset>
               <size>8</size>
               <access>read-only</access>
               <resetValue>0x00</resetValue>
               <fields>
                  <field>
                     <name>CLK_SYNC</name>
                     <description>This register must not be written, or undesirable results may occur.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>8</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>DATATM</name>
               <description>Data Timing Register</description>
               <addressOffset>0x40</addressOffset>
               <size>32</size>
               <resetValue>0x0C4D5006</resetValue>
               <fields>
                  <field>
                     <name>DATA_HOLD</name>
                     <description>The Data Hold [7:0] timer determines the SDAT hold time following SCLK driven low.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>8</bitWidth>
                  </field>
                  <field>
                     <name>RESTART_SETUP</name>
                     <description>The Restart Setup [7:0] timer determines the SDAT setup time from the rising edge of SCLK for a repeated START condition.</description>
                     <bitOffset>8</bitOffset>
                     <bitWidth>8</bitWidth>
                  </field>
                  <field>
                     <name>STOP_SETUP</name>
                     <description>The Stop Setup [7:0] timer determines the SDAT setup time from the rising edge of SCLK for a STOP condition.</description>
                     <bitOffset>16</bitOffset>
                     <bitWidth>8</bitWidth>
                  </field>
                  <field>
                     <name>FIRST_START_HOLD</name>
                     <description>This field determines the SCL hold time following SDA driven low during the first START bit in a transfer. It is the parameter\n      THD:STA in the I2C Specification for an initial START bit. Repeated START hold time is determined by the Repeated START Hold Time Register.</description>
                     <bitOffset>24</bitOffset>
                     <bitWidth>8</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>TMOUTSC</name>
               <description>Time-Out Scaling Register</description>
               <addressOffset>0x44</addressOffset>
               <size>32</size>
               <resetValue>0x4B9CC2C7</resetValue>
               <fields>
                  <field>
                     <name>BUS_IDLE_MIN</name>
                     <description>Bus Idle Minimum time = Bus Idle Min [7:0] x Baud_Clock_Period</description>
                     <bitOffset>24</bitOffset>
                     <bitWidth>8</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>WAKE_STS</name>
               <description>WAKE STATUS Register</description>
               <addressOffset>0x60</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>START_BIT_DET</name>
                     <description>This bit is set to '1' when a START bit is detected while the controller is enabled. This bit is cleared to '0' when\n      written with a '1'. Writes of '0' have no effect. (R/WC)</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>WAKE_EN</name>
               <description>WAKE ENABLE Register</description>
               <addressOffset>0x64</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>START_DET_INT_EN</name>
                     <description>Enable Start Bit Detection Interrupt. The Start Bit Detection Interrupt is wake-capable.\n         1=Start Bit Detection Interrupt enabled. \n         0=Start Bit Detection Interrupt disabled.\n</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>SLV_ADDR</name>
               <description>This is the Slave Address Register.\n</description>
               <addressOffset>0x6C</addressOffset>
               <size>8</size>
               <resetValue>0x00</resetValue>
               <fields>
                  <field>
                     <name>SADDR</name>
                     <description>This register stores the value of the Slave Address and Direction Bit from the 1st byte of a Slave transfer.\n    This is loaded immediately upon receipt of the address byte, before the ACK/NAK 9th clock. \n</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>8</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>PRM_STS</name>
               <description>This is the Promiscuous Interrupt Register. This register bit will be functional only in Promiscuous mode.\n</description>
               <addressOffset>0x70</addressOffset>
               <size>8</size>
               <resetValue>0x00</resetValue>
               <fields>
                  <field>
                     <name>ADDR_INTR</name>
                     <description>This is the Promiscuous Address Status interrupt. This bit is functional only in Promiscuous mode. This bit is set \n         on the 8th clock of the I2C Address. This bit will hold the Clock line low till this register bit is cleared. In other words, \n         Software should read the address program ACK/NAK and clear this bit for the ACK/NAK clock to appear on the I2C clock (SCL) line. \n         This is Write 1 to clear. R/W1C.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>PRM_IEN</name>
               <description>This is the Promiscuous Interrupt Enable Register.\n</description>
               <addressOffset>0x74</addressOffset>
               <size>8</size>
               <resetValue>0x00</resetValue>
               <fields>
                  <field>
                     <name>ADDR</name>
                     <description>This is the Promiscuous interrupt enable register.\n         1= Interrupt Enable. \n         0= Interrupt Disabled. \n</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>PRM_CTRL</name>
               <description>This is the Promiscuous Control Register. This register is functional only in Promiscuous mode.\n</description>
               <addressOffset>0x78</addressOffset>
               <size>8</size>
               <resetValue>0x00</resetValue>
               <fields>
                  <field>
                     <name>ACK_NAK</name>
                     <description>This is the Promiscuous ACK / NAK response register. This bit has no effect in Normal mode of operation.\n         1= ACK the address byte. \n         0= NAK the address byte. \n</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
         </registers>
      </peripheral>
      <peripheral derivedFrom="I2C0">
         <name>I2C1</name>
         <baseAddress>0x40005200</baseAddress>
         <interrupt>
            <name>I2C1</name>
            <value>169</value>
         </interrupt>
      </peripheral>
      <peripheral derivedFrom="I2C0">
         <name>I2C2</name>
         <baseAddress>0x40005300</baseAddress>
         <interrupt>
            <name>I2C2</name>
            <value>170</value>
         </interrupt>
      </peripheral>
      <peripheral>
         <name>QMSPI</name>
         <version>1471.0</version>
         <description>The QMSPI may be used to communicate with various peripheral devices that use a Serial Peripheral Interface</description>
         <groupName>QMSPI</groupName>
         <prependToName>QMSPI_</prependToName>
         <baseAddress>0x40070000</baseAddress>
         <addressBlock>
            <offset>0</offset>
            <size>0x88</size>
            <usage>registers</usage>
         </addressBlock>
         <interrupt>
            <name>GIRQ18</name>
            <value>10</value>
         </interrupt>
         <interrupt>
            <name>QMSPI</name>
            <value>91</value>
         </interrupt>
         <registers>
            <register>
               <name>MODE</name>
               <description>QMSPI Mode Register</description>
               <addressOffset>0x0</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>ACT</name>
                     <description>This bit is used to activate the QMSPI block.\n     1=Enabled. The block is fully operational\n                 0=Disabled. Clocks are gated to conserve power and the output signals are set to their inactive state.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>SOFT_RST</name>
                     <description>Writing this bit with a 1 will reset the Quad SPI block. It is self-clearing.</description>
                     <bitOffset>1</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>CPOL</name>
                     <description>Polarity of the SPI clock line when there are no transactions in process. 1=SPI Clock starts High; 0=SPI Clock starts Low.</description>
                     <bitOffset>8</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>CHPA_MOSI</name>
                     <description>Clock phase of the Master data out. Common SPI modes require this field to be programmed with the same value as CHPA_MISO in this register.\n     e.g. Mode 0: CPOL=0; CHPA_MISO=0; CHPA_MOSI=0; Mode 3: CPOL=1; CHPA_MISO=1; CHPA_MOSI=1. See datasheet for alternate mode settings.\n                 If CPOL=1: 1=Data changes on the falling edge of the SPI clock; 0=Data changes on the rising edge of the SPI clock\n                 If CPOL=0: 1=Data changes on the rising edge of the SPI clock; 0=Data changes on the falling edge of the SPI clock</description>
                     <bitOffset>9</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>CHPA_MISO</name>
                     <description>Clock phase of the Master data in. Common SPI modes require this field to be programmed with the same value as CHPA_MOSI in this register.\n     e.g. Mode 0: CPOL=0; CHPA_MISO=0; CHPA_MOSI=0; Mode 3: CPOL=1; CHPA_MISO=1; CHPA_MOSI=1. See datasheet for alternate mode settings.\n                 If CPOL=1: 1=Data are captured on the rising edge of the SPI clock; 0=Data are captured on the falling edge of the SPI clock\n                 If CPOL=0: 1=Data are captured on the falling edge of the SPI clock; 0=Data are captured on the rising edge of the SPI clock</description>
                     <bitOffset>10</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>CLK_DIV</name>
                     <description>The SPI clock divide in number of system clocks. A value of 1 divides the master clock by 1, a value of 255 divides the master clock by 255. A value of 0 divides the master clock by 256.</description>
                     <bitOffset>16</bitOffset>
                     <bitWidth>9</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>CTRL</name>
               <description>QMSPI SPI Control</description>
               <addressOffset>0x4</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>TX_MODE</name>
                     <description>This field sets the transmission mode. If this field is set for Dual Mode or Quad Mode then either \n     TX_TRANSFER_ENABLE or RX_TRANSFER_ENABLE must be 0.\n                  3=Reserved; 2=Quad Mode; 1=Dual Mode; 0=Single/Duplex Mode.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>TX_TRANS_EN</name>
                     <description>This field bit selects the transmit function of the SPI interface.\n                 3=Transmit Enabled in 1 Mode. The MOSI or IO Bus will send out only 1's. The Transmit Buffer will not be used.\n                 2=Transmit Enabled in 0 Mode. The MOSI or IO Bus will send out only 0's. The Transmit Buffer will not be used.\n                 1=Transmit Enabled. Data will be fetched from the Transmit Buffer and sent out on the MOSI or IO Bus.\n                 0=Transmit is Disabled. Not data is sent. This will cause the MOSI be to be undriven, or the IO bus to be undriven if Receive is also disabled.</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>TX_DMA_EN</name>
                     <description>This bit enables DMA support for Transmit Transfer. If enabled, DMA will be requested to fill the FIFO until either\n     the interface reaches TRANSFER_LENGTH or the DMA sends a termination request. The size defined here must match DMA programmed access size.\n     1=DMA is enabled.and set to 1 Byte\n                 2=DMA is enabled and set to 2 Bytes\n                 3=DMA is enabled and set to 4 Bytes.\n     0=DMA is disabled. All data in the Transmit Buffer must be emptied by firmware</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>RX_TRANS_EN</name>
                     <description>This bit enables the receive function of the SPI interface.\n                 1=Receive is enabled. Data received from the SPI Slave is stored in the Receive Buffer\n                 0=Receive is disabled</description>
                     <bitOffset>6</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>RX_DMA_EN</name>
                     <description>This bit enables DMA support for Receive Transfer. If enabled, DMA will be requested to empty the FIFO until either the interface\n                 reaches TRANSFER_LENGTH or the DMA sends a termination request. The size defined here must match DMA programmed access size.\n                 1=DMA is enabled.and set to 1 Byte\n                 2=DMA is enabled and set to 2 Bytes\n                 3=DMA is enabled and set to 4 Bytes\n                 0=DMA is disabled. All data in the Receive Buffer must be emptied by firmware</description>
                     <bitOffset>7</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>CLOSE_TRANS_EN</name>
                     <description>This selects what action is taken at the end of a transfer. When the transaction closes, the Chip Select de-asserts, the SPI \n     interface returns to IDLE and the DMA interface terminates When Description Buffers are in use this bit must be set only on the Last Buffer.\n     1=The transaction is terminated\n     0=The transaction is not terminated</description>
                     <bitOffset>9</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>TRANS_UNITS</name>
                     <description>3=TRANSFER_LENGTH defined in units of 16-byte segments\n     2=TRANSFER_LENGTH defined in units of 4-byte segments\n     1=TRANSFER_LENGTH defined in units of bytes\n     0=TRANSFER_LENGTH defined in units of bits.</description>
                     <bitOffset>10</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>DESCR_BUFF_PTR</name>
                     <description>This field selects the first buffer used if Description Buffers are enabled.</description>
                     <bitOffset>12</bitOffset>
                     <bitWidth>4</bitWidth>
                  </field>
                  <field>
                     <name>DESCR_BUFF_EN</name>
                     <description>This enables the Description Buffers to be used.\n     1=Description Buffers in use. The first buffer is defined in DESCRIPTION_BUFFER_POINTER\n     0=Description Buffers disabled.</description>
                     <bitOffset>16</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>TRANS_LEN</name>
                     <description>The length of the SPI transfer. The count is in bytes or bits, depending on the value of TRANSFER_LENGTH_BITS.\n     A value of 0 means an infinite length transfer.</description>
                     <bitOffset>17</bitOffset>
                     <bitWidth>15</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>EXE</name>
               <description>QMSPI Execute Register</description>
               <addressOffset>0x8</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>START</name>
                     <description>Writing a 1 to this bit will start the SPI transfer. Writing a 0 to this bit has no effect. This bit is self-clearing.\n     This bit must not be set to 1 if the field STOP in this register is set to 1.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>STOP</name>
                     <description>Writing a 1 to this bit will stop any transfer in progress at the next byte boundary. Writing a 0 to this bit has no effect.\n     This bit is self clearing. This bit must not be set to 1 if the field START in this register is set to 1.</description>
                     <bitOffset>1</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>CLR_DAT_BUFF</name>
                     <description>Writing a 1 to this bit will clear out the Transmit and Receive FIFOs. Any data stored in the FIFOs is discarded and all count fields are reset.\n     Writing a 0 to this bit has no effect. This bit is self clearing.</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>IFCTRL</name>
               <description>QMSPI Interface Control Register</description>
               <addressOffset>0xC</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>WR_PRCT_OUT_VAL</name>
                     <description>This bit sets the value on the WRITE PROTECT SPI Output Port if it is driven.\n                 1=WRITE PROTECT is driven to 1; 0=WRITE PROTECT is driven to 0</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>WR_PRCT_OUT_EN</name>
                     <description>1=WRITE PROTECT SPI Output Port is driven\n                 0=WRITE PROTECT SPI Output Port is not driven</description>
                     <bitOffset>1</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>HLD_OUT_VAL</name>
                     <description>This bit sets the value on the HOLD SPI Output Port if it is driven.\n                 1=HOLD is driven to 1; 0=HOLD is driven to 0.</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>HLD_OUT_EN</name>
                     <description>1=HOLD SPI Output Port is driven\n                 0=HOLD SPI Output Port is not driven.</description>
                     <bitOffset>3</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>PD_ON_NOT_SEL</name>
                     <description>1=Enable pull-down resistors on Receive pins while the SPI Chip Select signal is not asserted\n     0=No pull-down resistors enabled on Receive pins</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>PU_ON_NOTSEL</name>
                     <description>1=Enable pull-up resistors on Receive pins while the SPI Chip Select signal is not asserted\n     0=No pull-up resistors enabled on Receive pins.</description>
                     <bitOffset>5</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>PD_ON_NOTDRIVEN</name>
                     <description>1=Enable pull-down resistors on Transmit pins while the pins are not driven\n     0=No pull-down resistors enabled ion Transmit pins.</description>
                     <bitOffset>6</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>PU_ON_NOTDRIVEN</name>
                     <description>1=Enable pull-up resistors on Transmit pins while the pins are not driven\n     0=No pull-up resistors enabled ion Transmit pins.</description>
                     <bitOffset>7</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>STS</name>
               <description>QMSPI Status Register</description>
               <addressOffset>0x10</addressOffset>
               <size>32</size>
               <resetValue>0x00002200</resetValue>
               <fields>
                  <field>
                     <name>TRANS_COMPL</name>
                     <description>In Manual Mode (neither DMA nor Description Buffers are enabled), this bit will be set to 1 when the transfer matches TRANSFER_LENGTH.\n                 If DMA Mode is enabled, this bit will be set to 1 when DMA_COMPLETE is set to 1. In Description Buffer Mode, this bit will be set to 1 only when the Last Buffer completes its transfer.\n     In all cases, this bit will be set to 1 if the STOP bit is set to 1 and the controller has completed the current 8 bits being copied.\n                 1=Transfer completed; 0=Transfer not complete.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>DMA_COMPL</name>
                     <description>This field has no meaning if DMA is not enabled. This bit will be set to 1 when the DMA controller asserts the DONE signal to the SPI controller.\n     This occurs either when the SPI controller has closed the DMA transfer, or the DMA channel has completed its count. If both Transmit and Receive DMA transfers are\n      active, then this bit will only assert after both have completed. If CLOSE_TRANSFER_ENABLE is enabled, DMA_COMPLETE and TRANSFER_COMPLETE will be asserted simultaneously.\n     This status is not inhibited by the description buffers, so it can fire on all valid description buffers while operating in that mode.\n                 1=DMA completed; 0=DMA not completed.</description>
                     <bitOffset>1</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>TX_BUFF_ERR</name>
                     <description>1=Overflow error occurred (attempt to write to a full Transmit Buffer)\n                 0=No overflow occurred.</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>RX_BUFF_ERR</name>
                     <description>1=Underflow error occurred (attempt to read from an empty Receive Buffer)\n                 0=No underflow occurred.</description>
                     <bitOffset>3</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>PRGM_ERR</name>
                     <description>This bit if a programming error is detected.\n     1=Programming Error detected; 0=No programming error detected.</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>TX_BUFF_FULL</name>
                     <description>1=The Transmit Buffer is full\n     0=The Transmit Buffer is not full.</description>
                     <bitOffset>8</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>TX_BUFF_EMP</name>
                     <description>1=The Transmit Buffer is empty\n     0=The Transmit Buffer is not empty.</description>
                     <bitOffset>9</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>TX_BUFF_REQ</name>
                     <description>This status is asserted if the Transmit Buffer reaches a high water mark established by the TRANSMIT_BUFFER_TRIGGER field.\n     1=TRANSMIT_BUFFER_COUNT is less than or equal to TRANSMIT_BUFFER_TRIGGER; 0=TRANSMIT_BUFFER_COUNT is greater than TRANSMIT_BUFFER_TRIGGER.</description>
                     <bitOffset>10</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>TX_BUFF_STALL</name>
                     <description>1=The SPI interface had been stalled due to a flow issue (an attempt by the interface to read from an empty Transmit Buffer)\n     0=No stalls occurred.</description>
                     <bitOffset>11</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>RX_BUFF_FULL</name>
                     <description>1=The Receive Buffer is full\n     0=The Receive Buffer is not full.</description>
                     <bitOffset>12</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>RX_BUFF_EMP</name>
                     <description>1=The Receive Buffer is empty\n     0=The Receive Buffer is not empty.</description>
                     <bitOffset>13</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>RX_BUFF_REQ</name>
                     <description>This status is asserted if the Receive Buffer reaches a high water mark established by the RECEIVE_BUFFER_TRIGGER field.\n                 1=RECEIVE_BUFFER_COUNT is greater than or equal to RECEIVE_BUFFER_TRIGGER\n                 0=RECEIVE_BUFFER_COUNT is less than RECEIVE_BUFFER_TRIGGER.</description>
                     <bitOffset>14</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>RX_BUFF_STALL</name>
                     <description>1=The SPI interface had been stalled due to a flow issue (an attempt by the interface to write to a full Receive Buffer)\n     0=No stalls occurred.</description>
                     <bitOffset>15</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>TRANS_ACTIV</name>
                     <description>1=A transfer is currently executing\n     0=No transfer currently in progress.</description>
                     <bitOffset>16</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>CUR_DESCR_BUF</name>
                     <description>This field shows the Description Buffer currently active. This field has no meaning if Description Buffers are not enabled.</description>
                     <bitOffset>24</bitOffset>
                     <bitWidth>4</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>BUF_CNT_STS</name>
               <description>QMSPI Buffer Count Status Register</description>
               <addressOffset>0x14</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>TX_BUFF_CNT</name>
                     <description>This is a count of the number of bytes currently valid in the Transmit Buffer.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>16</bitWidth>
                  </field>
                  <field>
                     <name>RX_BUFF_CNT</name>
                     <description>This is a count of the number of bytes currently valid in the Receive Buffer.</description>
                     <bitOffset>16</bitOffset>
                     <bitWidth>16</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>IEN</name>
               <description>QMSPI Interrupt Enable Register</description>
               <addressOffset>0x18</addressOffset>
               <size>32</size>
               <resetValue>0x00002000</resetValue>
               <fields>
                  <field>
                     <name>TRANS_COMPL_EN</name>
                     <description>1=Enable an interrupt if TRANSFER_COMPLETE is asserted\n     0=Disable the interrupt.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>DMA_COMPL_EN</name>
                     <description>1=Enable an interrupt if DMA_COMPLETE is asserted\n     0=Disable the interrupt.</description>
                     <bitOffset>1</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>TX_BUF_ERR_EN</name>
                     <description>1=Enable an interrupt if TRANSMIT_BUFFER_ERROR is asserted\n     0=Disable the interrupt.</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>RX_BUF_ERR_EN</name>
                     <description>1=Enable an interrupt if RECEIVE_BUFFER_ERROR is asserted\n     0=Disable the interrupt.</description>
                     <bitOffset>3</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>PRGM_ERR_EN</name>
                     <description>1=Enable an interrupt if PROGRAMMING_ERROR is asserted\n     0=Disable the interrupt.</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>TX_BUF_FULL_EN</name>
                     <description>1=Enable an interrupt if TRANSMIT_BUFFER_FULL is asserted\n     0=Disable the interrupt.</description>
                     <bitOffset>8</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>TX_BUF_EMPTY_EN</name>
                     <description>1=Enable an interrupt if TRANSMIT_BUFFER_EMPTY is asserted\n     0=Disable the interrupt.</description>
                     <bitOffset>9</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>TX_BUF_REQ_EN</name>
                     <description>1=Enable an interrupt if TRANSMIT_BUFFER_REQUEST is asserted\n     0=Disable the interrupt.</description>
                     <bitOffset>10</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>RX_BUF_FUL_EN</name>
                     <description>1=Enable an interrupt if RECEIVE_BUFFER_FULL is asserted\n     0=Disable the interrupt.</description>
                     <bitOffset>12</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>RX_BUF_EMPTY_EN</name>
                     <description>1=Enable an interrupt if RECEIVE_BUFFER_EMPTY is asserted\n     0=Disable the interrupt.</description>
                     <bitOffset>13</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>RX_BUF_REQ_EN</name>
                     <description>1=Enable an interrupt if RECEIVE_BUFFER_REQUEST is asserted\n     0=Disable the interrupt.</description>
                     <bitOffset>14</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>BUF_CNT_TRIG</name>
               <description>QMSPI Buffer Count Trigger Register</description>
               <addressOffset>0x1C</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>TX_BUF_TRIG</name>
                     <description>An interrupt is triggered if the TRANSMIT_BUFFER_COUNT field is less than or equal to this value. A value of 0 disables the interrupt.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>16</bitWidth>
                  </field>
                  <field>
                     <name>RX_BUF_TRIG</name>
                     <description>An interrupt is triggered if the RECEIVE_BUFFER_COUNT field is greater than or equal to this value. A value of 0 disables the interrupt.</description>
                     <bitOffset>16</bitOffset>
                     <bitWidth>16</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>TX_FIFO</name>
               <description>QMSPI Transmit Buffer Register</description>
               <addressOffset>0x20</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>TX_BUF</name>
                     <description>Writes to this register store data to be transmitted from the SPI Master to the external SPI Slave.\n     Writes to this block will be written to the Transmit FIFO. A 1 Byte write fills 1 byte of the FIFO. A Word write fills 2 Bytes and a Doubleword write fills 4 bytes.\n     The data must always be aligned to the bottom most byte (so 1 byte write is on bits [7:0] and Word write is on [15:0]).\n     An overflow condition, TRANSMIT_BUFFER_ERROR, if a write to a full FIFO occurs. Write accesses to this register increment the TRANSMIT_BUFFER_COUNT field.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>32</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>RX_FIFO</name>
               <description>QMSPI Receive Buffer Register</description>
               <addressOffset>0x24</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>RX_BUF</name>
                     <description>Buffer that stores data from the external SPI Slave device to the SPI Master (this block), which is received over MISO or IO.\n     Reads from this register will empty the Rx FIFO. A 1 Byte read will have valid data on bits [7:0] and a Word read will have data on bits [15:0].\n     It is possible to request more data than the FIFO has (underflow condition), but this will cause an error (Rx Buffer Error).\n     Read accesses to this register decrement the RECEIVE_BUFFER_COUNT field.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>32</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>CSTM</name>
               <description>QMSPI Chip Select Timing Register</description>
               <addressOffset>0x28</addressOffset>
               <size>32</size>
               <resetValue>0x06060406</resetValue>
               <fields>
                  <field>
                     <name>DLY_CS_ON_CLK_STRT</name>
                     <bitOffset>0</bitOffset>
                     <bitWidth>4</bitWidth>
                  </field>
                  <field>
                     <name>DLY_CLK_STOP_CS_OFF</name>
                     <description>This selects the number of system clock cycles between the last clock edge and the deassertion of CS.\n</description>
                     <bitOffset>8</bitOffset>
                     <bitWidth>4</bitWidth>
                  </field>
                  <field>
                     <name>DLY_LAST_DAT_HLD</name>
                     <description>This selects the number of system clock cycles between CS deassertion to the data ports for WP and HOLD \n    switching from input to output. This is only used if the WP/HOLD functions are in use and only on IO2/WP \n           and IO3/HOLD pins.</description>
                     <bitOffset>16</bitOffset>
                     <bitWidth>4</bitWidth>
                  </field>
                  <field>
                     <name>DLY_OFF_TO_ON</name>
                     <description>This selects the number of system clock cycles between CS deassertion to CS assertion. This is the minimum \n           pulse width of CS deassertion.</description>
                     <bitOffset>23</bitOffset>
                     <bitWidth>9</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <dim>16</dim>
               <dimIncrement>4</dimIncrement>
               <name>DESCR[%s]</name>
               <description>QMSPI Description Buffer 0 Register</description>
               <addressOffset>0x30</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>INFACE_MOD</name>
                     <description>This field sets the transmission mode. If this field is set for Dual Mode or Quad Mode then either TX_TRANSFER_ENABLE or RX_TRANSFER_ENABLE must be 0.\n     3=Reserved; 2=Quad Mode; 1=Dual Mode; 0=Single/Duplex Mode.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>TX_TRANS_EN</name>
                     <description>This field bit selects the transmit function of the SPI interface.\n     3=Transmit Enabled in 1 Mode. The MOSI or IO Bus will send out only 1's. The Transmit Buffer will not be used\n     2=Transmit Enabled in 0 Mode. The MOSI or IO Bus will send out only 0's. The Transmit Buffer will not be used.\n     1=Transmit Enabled. Data will be fetched from the Transmit Buffer and sent out on the MOSI or IO Bus.\n     0=Transmit is Disabled. No data is sent. This will cause the MOSI be to be undriven, or the IO bus to be undriven if Receive is also disabled.</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>TX_DMA_EN</name>
                     <description>This bit enables DMA support for Transmit Transfer. If enabled, DMA will be requested to fill the FIFO until either the interface\n     reaches TRANSFER_LENGTH or the DMA sends a termination request. The size defined here must match DMA programmed access size.\n     1=DMA is enabled.and set to 1 Byte\n      2=DMA is enabled and set to 2 Bytes\n      3=DMA is enabled and set to 4 Bytes     0=DMA is disabled. All data in the Transmit Buffer must be emptied by firmware.</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>RX_TRANS_EN</name>
                     <description>This bit enables the receive function of the SPI interface.\n     1=Receive is enabled. Data received from the SPI Slave is stored in the Receive Buffer; 0=Receive is disabled.</description>
                     <bitOffset>6</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>RX_DMA_EN</name>
                     <description>This bit enables DMA support for Receive Transfer. If enabled, DMA will be requested to empty the FIFO until either the interface reaches TRANSFER_LENGTH or the DMA sends a termination request.\n The size defined here must match DMA programmed access size.\n     1=DMA is enabled.and set to 1 Byte\n     2=DMA is enabled and set to 2 Bytes\n     3=DMA is enabled and set to 4 Bytes\n     0=DMA is disabled. All data in the Receive Buffer must be emptied by firmware.</description>
                     <bitOffset>7</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>CLOSE_TRANS_EN</name>
                     <description>This selects what action is taken at the end of a transfer. This bit must be set only on the Last Buffer.\n     1=The transfer is terminated. The Chip Select de-asserts, the SPI interface returns to IDLE and the DMA interface completes the transfer.\n     0=The transfer is not closed. Chip Select remains asserted and the DMA interface and the SPI interface remain active</description>
                     <bitOffset>9</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>TRANS_LEN_BITS</name>
                     <description>1=TRANSFER_LENGTH defined in bits\n      0=TRANSFER_LENGTH defined in bytes</description>
                     <bitOffset>10</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>DESCR_BUF_LAST</name>
                     <description>If this bit is 1 then this is the last Description Buffer in the chain. When the transfer described by this buffer completes the TRANSFER_COMPLETE status will be set to 1.\n     If this bit is 0, then this is not the last buffer in use. When the transfer completes the next buffer will be activated, and no additional status will be asserted.</description>
                     <bitOffset>11</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>DESCR_BUF_NXT_PTR</name>
                     <description>This defines the next buffer to be used if Description Buffers are enabled and this is not the last buffer. This can point to the current buffer, creating an infinite loop.</description>
                     <bitOffset>12</bitOffset>
                     <bitWidth>4</bitWidth>
                  </field>
                  <field>
                     <name>TX_LEN</name>
                     <description>The length of the SPI transfer. The count is in bytes or bits, depending on the value of TRANSFER_LENGTH_BITS. A value of 0 means an infinite length transfer.</description>
                     <bitOffset>16</bitOffset>
                     <bitWidth>16</bitWidth>
                  </field>
               </fields>
            </register>
         </registers>
      </peripheral>
      <peripheral>
         <name>TFDP</name>
         <version>681.0</version>
         <description>The TFDP serially transmits EC-originated diagnostic vectors to an external debug trace system.</description>
         <groupName>TFDP</groupName>
         <prependToName>TFDP_</prependToName>
         <baseAddress>0x40008C00</baseAddress>
         <addressBlock>
            <offset>0</offset>
            <size>0x5</size>
            <usage>registers</usage>
         </addressBlock>
         <registers>
            <register>
               <name>MSDATA</name>
               <description>Debug data to be shifted out on the TFDP Debug port. While data is being shifted out, the Host Interface will 'hold-off' additional writes to the data register until the transfer is complete.</description>
               <addressOffset>0x0</addressOffset>
               <size>8</size>
               <resetValue>0x00</resetValue>
            </register>
            <register>
               <name>CTRL</name>
               <description>Debug Control Register</description>
               <addressOffset>0x4</addressOffset>
               <size>8</size>
               <resetValue>0x00</resetValue>
               <fields>
                  <field>
                     <name>EN</name>
                     <description>Enable. 1=Clock enabled, 0=Clock is disabled (Default)</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>EDGE_SEL</name>
                     <description>1= Data is shifted out on the falling edge of the debug clock, 0= Data is shifted out on the rising edge of the debug clock (Default)</description>
                     <bitOffset>1</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>DIVSEL</name>
                     <description>Clock Divider Select.</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>IP_DLY</name>
                     <description>Inter-packet Delay. The delay is in terms of TFDP Debug output clocks.</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>3</bitWidth>
                  </field>
               </fields>
            </register>
         </registers>
      </peripheral>
      <peripheral>
         <name>VCI</name>
         <version>751.0</version>
         <description>The VBAT-Powered Control Interfaces with the RTC With Date and DST Adjustment as well as the Week Alarm.</description>
         <groupName>VCI</groupName>
         <prependToName>VCI_</prependToName>
         <baseAddress>0x4000AE00</baseAddress>
         <addressBlock>
            <offset>0</offset>
            <size>0x24</size>
            <usage>registers</usage>
         </addressBlock>
         <interrupt>
            <name>VCI_IN0</name>
            <value>122</value>
         </interrupt>
         <interrupt>
            <name>VCI_IN1</name>
            <value>123</value>
         </interrupt>
         <registers>
            <register>
               <name>CTRL_STS</name>
               <description>VCI Register</description>
               <addressOffset>0x0</addressOffset>
               <size>32</size>
               <resetValue>0x00000080</resetValue>
               <fields>
                  <field>
                     <name>VCI_IN</name>
                     <description>These bits provide the latched state of the associated VCI_IN# pin, if latching is enabled or the current state of the pin\n     if latching is not enabled. In both cases, the value is determined after the action of the VCI Polarity Register.\n     Note: The VCI_IN[6:0]# bits default to the state of their respective input pins.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>4</bitWidth>
                  </field>
                  <field>
                     <name>VCI_OUT_GPIO_SEL</name>
                     <description>This bit selects the power source for GPIO outputs.\n    1= GPIO will be powered by VBAT power well (VCI_OUT functionality).\n    0= GPIO will be powered by VTR power well.\n</description>
                     <bitOffset>7</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>VCI_OVRD_IN</name>
                     <description>This bit provides the current status of the VCI_OVRD_IN pin.\n     Note: The VCI_OVRD_IN bit defaults to the state of the respective input pin.</description>
                     <bitOffset>8</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>VCI_OUT</name>
                     <description>This bit provides the current status of the VCI_OUT pin.</description>
                     <bitOffset>9</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>VCI_FW_CTRL</name>
                     <description>This bit can allow EC firmware to control the state of the VCI_OUT pin. For example, when VTR_PWRGD is asserted and the\n     FW_EXT bit is 1, clearing the VCI_FW_CNTRL bit de-asserts the active high VCI_OUT pin. BIOS must set this bit to 1 prior to setting\n     the FW_EXT bit to 1 on power up, in order to avoid glitches on the VCI_OUT pin.</description>
                     <bitOffset>10</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>FW_EXT</name>
                     <description>This bit controls selecting between the external VBAT-Powered Control Interface inputs, or the VCI_FW_CNTRL bit output to control the VCI_OUT pin.\n     1=VCI_OUT is determined by the VCI_FW_CNTRL field, when VTR is active\n     0=VCI_OUT is determined by the external inputs.\n     Note: This bit used to be called GPO/nEXT. The name was changed to distinguish it from the BGPOs, which are elsewhere, and to remove a / in a bit name.</description>
                     <bitOffset>11</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>FLTRS_BYPASS</name>
                     <description>The Filters Bypass bit is used to enable and disable the input filters on the VCI_IN# pins.\n     1=Filters disabled; 0=Filters enabled (default).</description>
                     <bitOffset>12</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>WK_ALRM</name>
                     <description>If enabled by WEEK_ALRM_LE, this bit is set to 1 if the Week Alarm signal is asserted. It is reset by writes to WEEK_ALRM_LS.</description>
                     <bitOffset>16</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>RTC_ALRM</name>
                     <description>If enabled by RTC_ALRM_LE, this bit is set to 1 if the RTC Alarm signal is asserted. It is reset by writes to RTC_ALRM_LS.</description>
                     <bitOffset>17</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>SYSPWR_PRES</name>
                     <description>This is the System power present select bit.\n    1= VCI_IN3 is used as System power present.\n    0= VCI_IN3 is used as VCI_IN3.\n</description>
                     <bitOffset>18</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>LATCH_EN</name>
               <description>Latch Enable Register</description>
               <addressOffset>0x4</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>LE</name>
                     <description>Latching Enables. Latching occurs after the Polarity configuration, so a VCI_INi# pin is asserted when it is '0' if VCI_IN_POL is '0', and asserted when it is '1' if VCI_IN_POL is '1'.\n     For each bit in the field:\n     1=Enabled. Assertions of the VCI_INi# pin are held until the latch is reset by writing the corresponding LS bit\n     0=Not Enabled. The VCI_INi# signal is not latched but passed directly to the VCI_OUT logic</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>4</bitWidth>
                  </field>
                  <field>
                     <name>WK_ALRM_LE</name>
                     <description>Latch enable for the Week Alarm Power-Up signal.\n     1=Enabled. Assertions of the Week Alarm are held until the latch is reset by writing the corresponding LS bit\n     0=Not Enabled. The Week Alarm signal is not latched but passed directly to the VCI_OUT logic</description>
                     <bitOffset>16</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>RTC_ALRM_LE</name>
                     <description>Latch enable for the RTC Power-Up signal.\n     1=Enabled. Assertions of the RTC Alarm are held until the latch is reset by writing the corresponding LS bit\n     0=Not Enabled. The RTC Alarm signal is not latched but passed directly to the VCI_OUT logic</description>
                     <bitOffset>17</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>LATCH_RST</name>
               <description>Latch Resets Register</description>
               <addressOffset>0x8</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>LS</name>
                     <description>Latch Resets. When a Latch Resets bit is written with a '1', the corresponding VCI_INi# latch is de-asserted ('1'). The VCI_INi#\n     input to the latch has priority over the Latch Reset input, so firmware cannot reset the latch while the VCI_INi# pin is asserted. Firmware\n     should sample the state of the pin in the VCI Register before attempting to reset the latch. As noted in the Latch Enable Register,\n     the assertion level is determined by the VCI_IN_POL bit. Reads of this register are undefined.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>4</bitWidth>
                  </field>
                  <field>
                     <name>WK_ALRM_LS</name>
                     <description>Week Alarm Latch Reset. When this bit is written with a '1', the Week Alarm Event latch is reset.\n     The Week Alarm input to the latch has priority over the Reset input Reads of this register are undefined.</description>
                     <bitOffset>16</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>RTC_ALRM_LS</name>
                     <description>RTC Alarm Latch Reset. When this bit is written with a '1', the RTC Alarm Event latch is reset.\n     The RTC Alarm input to the latch has priority over the Reset input Reads of this register are undefined.</description>
                     <bitOffset>17</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>INPUT_EN</name>
               <description>VCI Input Enable Register</description>
               <addressOffset>0xC</addressOffset>
               <size>32</size>
               <resetValue>0x00000007</resetValue>
               <fields>
                  <field>
                     <name>IE</name>
                     <description>Input Enables for VCI_IN# signals. After changing the input enable for a VCI input, firmware should reset the input latch and clear\n     any potential interrupt that may have been triggered by the input, as changing the enable may cause the internal status to change.\n     For each bit in the field:\n     1=Enabled. The corresponding VCI_IN# input is not gated and toggling the pin will affect the VCI_OUT pin\n     0=Not Enabled. the corresponding VCI_IN# input does not affect the VCI_OUT pin, even if the input is '0'. Unless the corresponding bit\n     in the VCI Buffer Enable Register is 1, latches are not asserted, even if the VCI_IN# pin is low, during a VBAT power transition</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>4</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>HLDOFF_CNT</name>
               <description>Holdoff Count Register</description>
               <addressOffset>0x10</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>TIME</name>
                     <description>These bits determine the period of time the VCI_OUT logic is inhibited from re-asserting VCI_OUT after a SYS_SHDN# event.\n     FFh-01h=The Power On Inhibit Holdoff Time is set to a period between 125ms and 31.875 seconds.\n     0=The Power On Inhibit function is disabled.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>8</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>POLARITY</name>
               <description>VCI Polarity Register</description>
               <addressOffset>0x14</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>VCI_IN</name>
                     <description>These bits determine the polarity of the VCI_IN input signals: For each bit in the field:\n     1=Active High. The value on the pins is inverted before use\n     0=Active Low (default).</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>4</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>PEDGE_DET</name>
               <description>VCI Posedge Detect Register</description>
               <addressOffset>0x18</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>VCI_IN</name>
                     <description>These bits record a low to high transition on the VCI_IN# pins. A 1 indicates a transition occurred. For each bit in the field:\n     1=Positive Edge Detected; 0=No edge detected.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>4</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>NEDGE_DET</name>
               <description>VCI Negedge Detect Register</description>
               <addressOffset>0x1C</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>VCI_IN</name>
                     <description>These bits record a high to low transition on the VCI_IN# pins. A 1 indicates a transition occurred. For each bit in the field:\n     1=Negative Edge Detected; 0=No edge detected.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>4</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>BUFFER_EN</name>
               <description>VCI Buffer Enable Register</description>
               <addressOffset>0x20</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>V_BUF</name>
                     <description>Input Buffer enable. After changing the buffer enable for a VCI input, firmware should reset the input latch and clear any\n     potential interrupt that may have been triggered by the input, as changing the buffer may cause the internal status to change. This register\n     has no effect when VTR is powered. When VTR is on, the input buffers are enabled only by the IE bit. For each bit in the field:\n     1=VCI_IN# input buffer enabled independent of the IE bit. The edge detection latches for this input are always enabled\n     0=VCI_IN# input buffer enabled by the IE bit. The edge detection latches are only enabled when the IE bit is 1 (default).</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>4</bitWidth>
                  </field>
               </fields>
            </register>
         </registers>
      </peripheral>
      <peripheral>
         <name>VBAT_RAM</name>
         <version>931.0</version>
         <description>The VBAT RAM is operational while the main power rail is operational, and will retain its values powered by battery power while the main rail is unpowered.</description>
         <groupName>VBAT_RAM</groupName>
         <prependToName>VBAT_RAM_</prependToName>
         <baseAddress>0x4000A800</baseAddress>
         <addressBlock>
            <offset>0</offset>
            <size>0x58</size>
            <usage>registers</usage>
         </addressBlock>
         <registers>
            <register>
               <dim>16</dim>
               <dimIncrement>4</dimIncrement>
               <name>MEM[%s]</name>
               <description>32-bits of VBAT powered RAM.</description>
               <addressOffset>0x0</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
            </register>
         </registers>
      </peripheral>
      <peripheral>
         <name>VBAT</name>
         <version>941.0</version>
         <description>The VBAT Register Bank block is a block implemented for miscellaneous battery-backed registers</description>
         <groupName>VBAT</groupName>
         <prependToName>VBAT_</prependToName>
         <baseAddress>0x4000A400</baseAddress>
         <addressBlock>
            <offset>0</offset>
            <size>0x2C</size>
            <usage>registers</usage>
         </addressBlock>
         <registers>
            <register>
               <name>PFRS</name>
               <description>The Power-Fail and Reset Status Register collects and retains the VBAT RST and WDT event status when VCC1 is unpowered.</description>
               <addressOffset>0x0</addressOffset>
               <size>8</size>
               <resetValue>0x80</resetValue>
               <fields>
                  <field>
                     <name>SOFT</name>
                     <description>This bit is set to '1b' if a was triggered by an assertion of the SOFT_SYS_RESET bit in the System Reset Register.\n      This bit is cleared to '0b' when written with a '1b'; writes of a '0b' have no effect. (R/WC)</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>TEST</name>
                     <description>Test</description>
                     <bitOffset>3</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>RSTI</name>
                     <description>This bit is set to '1b' if a RESET_SYS was triggered by a low signal on the RESETI# input pin. This bit is\n      cleared to '0b' when written with a '1b'; writes of a '0b' have no effect. (R/WC)</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>WDT_EVT</name>
                     <description>This bit is set to '1b' if a RESET_SYS was triggered by a Watchdog Timer event. This bit is cleared to '0b' when\n      written with a '1b'; writes of a '0b' have no effect. (R/WC)</description>
                     <bitOffset>5</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>SYS_RSTREQ</name>
                     <description>This bit is set to '1b' if a RESET_SYS was triggered by an ARM SYSRESETREQ event. This bit is cleared to '0b' when\n      written with a '1b'; writes of a '0b' have no effect. (R/WC)</description>
                     <bitOffset>6</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>VBAT_RST</name>
                     <description>The VBAT RST bit is set to '1' by hardware when a RESET_VBAT is detected. This is the register default value.\n      To clear VBAT RST EC firmware must write a '1' to this bit; writing a '0' to VBAT RST has no affect.(R/WC)</description>
                     <bitOffset>7</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>CLK32_EN</name>
               <description>CLOCK ENABLE</description>
               <addressOffset>0x8</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>EXT_32K</name>
                     <description>This bit selects the source for the 32KHz clock domain.\n      1=The 32KHZ_IN VTR-powered pin is used as a source for the 32KHz clock domain. If an activity detector does not detect a\n      clock on the selected source, the always-on 32KHz internal clock source is automatically selected\n      0=The always-on32Khz clock source is used as the source for the 32KHz clock domain.</description>
                     <bitOffset>1</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>SYS_SHDN</name>
               <description>System Shutdown Enable register.\n</description>
               <addressOffset>0xC</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>DIS</name>
                     <description>This bit controls the System Shutdown.\n         0 = Enable System Shutdown (SYS_SHDN#).\n         1 = Disable System Shutdown (SYS_SHDN#).\n</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>MCNT_LO</name>
               <description>MONOTONIC COUNTER</description>
               <addressOffset>0x20</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>CNTR</name>
                     <description>Read-only register that increments by 1 every time it is read. It is reset to 0 on a VBAT Power On Reset.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>32</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>MCNT_HI</name>
               <description>COUNTER HIWORD</description>
               <addressOffset>0x24</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>CNTR</name>
                     <description>Thirty-two bit read/write register. If software sets this register to an incrementing value, based on an external\n      non-volatile store, this register may be combined with the Monotonic Counter Register to form a 64-bit monotonic counter.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>32</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>VWR_BCKP</name>
               <description>VWIRE_BACKUP</description>
               <addressOffset>0x28</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>M2S_2H_BCKUP</name>
                     <description>The Boot ROM firmware will copy this field into the SRC3 to SRC0 bits of the Master-to-Slave Virtual Wire Register\n      that corresponds to Virtual Wire Index 2h on a RESET_SYS. If software always saves the state of the Index 2h SRC bits on the falling\n      edge of the SUSWARN# virtual wire, the state of the four SRC bits will be synchronized to the state of the four bits in the core logic.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>4</bitWidth>
                  </field>
                  <field>
                     <name>M2S_42H_BCKUP</name>
                     <description>The Boot ROM firmware will copy this field into the SRC3 to SRC0 bits of the Master-to-Slave Virtual Wire Register\n      that corresponds to Virtual Wire Index 42h on a RESET_SYS. If software always saves the state of the Index 2h SRC bits on the falling\n      edge of the SUSWARN# virtual wire, the state of the four SRC bits will be synchronized to the state of the four bits in the core logic.</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>4</bitWidth>
                  </field>
               </fields>
            </register>
         </registers>
      </peripheral>
      <peripheral>
         <name>EC_REG_BANK</name>
         <version>951.0</version>
         <description>This block is designed to be accessed internally by the EC via the register interface.</description>
         <groupName>EC_REG_BANK</groupName>
         <prependToName>EC_REG_BANK_</prependToName>
         <baseAddress>0x4000FC00</baseAddress>
         <addressBlock>
            <offset>0</offset>
            <size>0x190</size>
            <usage>registers</usage>
         </addressBlock>
         <registers>
            <register>
               <name>AHB_ERR_ADDR</name>
               <description>AHB Error Address [0:0] AHB_ERR_ADDR, In priority order:\n     1. AHB address is registered when an AHB error occurs on the processor's AHB master port and the register value was\n     already 0. This way only the first address to generate an exception is captured.\n     2. The processor can clear this register by writing any 32-bit value to this register.</description>
               <addressOffset>0x4</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>AHB_ERR_CTRL</name>
               <description>AHB Error Control [0:0] AHB_ERROR_DISABLE, 0: EC memory exceptions are enabled. 1: EC memory exceptions are disabled.</description>
               <addressOffset>0x14</addressOffset>
               <size>8</size>
               <resetValue>0x00</resetValue>
            </register>
            <register>
               <name>INTR_CTRL</name>
               <description>Interrupt Control [0:0] NVIC_EN (NVIC_EN) This bit enables Alternate NVIC IRQ's Vectors. The Alternate NVIC Vectors provides each interrupt event with a dedicated (direct) NVIC vector.\n            0 = Alternate NVIC vectors disabled, 1= Alternate NVIC vectors enabled</description>
               <addressOffset>0x18</addressOffset>
               <size>32</size>
               <resetValue>0x00000001</resetValue>
            </register>
            <register>
               <name>ETM_CTRL</name>
               <description>ETM TRACE Enable [0:0] TRACE_EN (TRACE_EN) This bit enables the ARM TRACE debug port (ETM/ITM). The Trace Debug Interface pins are forced to the TRACE functions.            0 = ARM TRACE port disabled, 1= ARM TRACE port enabled</description>
               <addressOffset>0x1C</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>DEBUG_CTRL</name>
               <description>Debug Enable Register</description>
               <addressOffset>0x20</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>EN</name>
                     <description>DEBUG_EN (JTAG_EN) This bit enables the JTAG/SWD debug port.\n               0= JTAG/SWD port disabled. JTAG/SWD cannot be enabled (i.e., the TRST# pin is ignored and the JTAG signals remain in their non-JTAG state)\n               1= JTAG/SWD port enabled. A high on TRST# enables JTAG or SWD, as determined by SWD_EN.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>PIN_CFG</name>
                     <description>This field determines which pins are affected by the TRST# debug enable pin.      3=Reserved      2=The pins associated with the JTAG TCK and TMS switch to the debug interface when TRST# is de-asserted high. The pins      associated with TDI and TDO remain controlled by the associated GPIO. This setting should be used when the ARM Serial      Wire Debug (SWD) is required for debugging and the Serial Wire Viewer is not required      1=The pins associated with the JTAG TCK, TMS and TDO switch to the debug interface when TRST# is de-asserted high. The pin      associated with TDI remains controlled by the associated GPIO. This setting should be used when the ARM Serial Wire Debug      (SWD) and Serial Wire Viewer (SWV) are both required for debugging      0=All four pins associated with JTAG (TCK, TMS, TDI and TDO) switch to the debug interface when TRST# is de-asserted high.      This setting should be used when the JTAG TAP controller is required for debugging.</description>
                     <bitOffset>1</bitOffset>
                     <bitWidth>2</bitWidth>
                     <enumeratedValues>
                        <name>PIN_CFGSelect</name>
                        <enumeratedValue>
                           <name>JTAG_TCK_TMS</name>
                           <description>2=The pins associated with the JTAG TCK and TMS switch to the debug interface when TRST# is de-asserted high. The pins\n           associated with TDI and TDO remain controlled by the associated GPIO. This setting should be used when the ARM Serial\n          Wire Debug (SWD) is required for debugging and the Serial Wire Viewer is not required </description>
                           <value>0x2</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>JTAG_TCK_TMS_TDO</name>
                           <description>1=The pins associated with the JTAG TCK, TMS and TDO switch to the debug interface when TRST# is de-asserted high. The pin\n           associated with TDI remains controlled by the associated GPIO. This setting should be used when the ARM Serial Wire Debug\n             (SWD) and Serial Wire Viewer (SWV) are both required for debugging</description>
                           <value>0x1</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>JTAG_TCK_TMS_TDO_TDI</name>
                           <description>0=All four pins associated with JTAG (TCK, TMS, TDI and TDO) switch to the debug interface when TRST# is de-asserted high.\n         This setting should be used when the JTAG TAP controller is required for debugging.</description>
                           <value>0x0</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>PU_EN</name>
                     <description>If this bit is set to '1b' internal pull-up resistors are automatically enabled on the appropriate debugging port\n      wires whenever the debug port is enabled (the DEBUG_EN bit in this register is '1b' and the JTAG_RST# pin is high). The setting\n      of DEBUG_PIN_CFG determines which pins have pull-ups enabled when the debug port is enabled.</description>
                     <bitOffset>3</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>BSP_EN</name>
                     <description>This bit sets the boundary scan tap controller accessibility from JTAG port.\n         1= Boundary scan tap controller accessibile through JTAG Port.\n         0= Boundary scan tap controller not accessibile through JTAG Port.\n</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>OTP_LOCK</name>
               <description>Lock Register</description>
               <addressOffset>0x24</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>TEST</name>
                     <description>Test</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>VBAT_RAM_LOCK</name>
                     <description>VBAT RAM LOCK bit.\n         0 = Not Locked.\n         1 = Locked.\n</description>
                     <bitOffset>1</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>VBAT_REG_LOCK</name>
                     <description>VBAT REG LOCK.\n         0 = Not Locked.\n         1 = Locked.\n</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>WDT_CNT</name>
               <description>WDT Event Count [3:0] WDT_COUNT (WDT_COUNT) These EC R/W bits are cleared to 0 on VCC1 POR, but not on a WDT.\n            Note: This field is written by Boot ROM firmware to indicate the number of times a WDT fired before loading a good EC code image.</description>
               <addressOffset>0x28</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
            </register>
            <register>
               <name>AESH_BSWAP_CTRL</name>
               <description>AES HASH Byte Swap Control Register.</description>
               <addressOffset>0x2C</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>IP_BYTE_SWAP_EN</name>
                     <description>Used to enable byte swap on a DWORD during AHB read from AES / HASH block: 1=Enable; 0=Disable.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>OP_BYTE_SWAP_EN</name>
                     <description>Used to enable byte swap on a DWORD during AHB write from AES / HASH block: 1=Enable; 0=Disable.</description>
                     <bitOffset>1</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>IP_BLK_SWAP_EN</name>
                     <description>Used to enable word swap on a DWORD during AHB read from AES / HASH block      4=Swap 32-bit doublewords in 128-byte blocks      3=Swap doublewords in 64-byte blocks. Useful for SHA-256. Bus references issued in the order 0x3C, 0x38, 0x34, 0x30, 0x2C,      0x28, 0x24, 0x20, 0x1C, 0x18, 0x14, 0x10, 0xC, 0x8, 0x4, 0x0,...      2=Swap doublewords in 16-byte blocks. Useful for AES. Bus references issued in the order 0xC, 0x8, 0x4, 0x0, 0x1C, 0x18,...      1=Swap doublewords in 8-byte blocks. Useful for SHA-512, which works on 64-bit words. Bus references issued in the order 0x4,      0x0, 0xC, 0x8, ...      0=Disable.</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>3</bitWidth>
                     <enumeratedValues>
                        <name>IP_BLK_SWAP_ENSelect</name>
                        <enumeratedValue>
                           <name>SWAP_128_BYTE_BLOCK</name>
                           <description>4=Swap 32-bit doublewords in 128-byte blocks </description>
                           <value>0x4</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>SWAP_64_BYTE_BLOCK</name>
                           <description>3=Swap doublewords in 64-byte blocks. Useful for SHA-256. Bus references issued in the order 0x3C, 0x38, 0x34, 0x30, 0x2C,\n          0x28, 0x24, 0x20, 0x1C, 0x18, 0x14, 0x10, 0xC, 0x8, 0x4, 0x0,...</description>
                           <value>0x3</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>SWAP_16_BYTE_BLOCK</name>
                           <description>2=Swap doublewords in 16-byte blocks. Useful for AES. Bus references issued in the order 0xC, 0x8, 0x4, 0x0, 0x1C, 0x18,...</description>
                           <value>0x2</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>SWAP_8_BYTE_BLOCK</name>
                           <description>1=Swap doublewords in 8-byte blocks. Useful for SHA-512, which works on 64-bit words. Bus references issued in the order 0x4,\n       0x0, 0xC, 0x8, ...\n</description>
                           <value>0x1</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>DIS</name>
                           <description>0=Disable.</description>
                           <value>0x0</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>OP_BLK_SWAP_EN</name>
                     <description>Used to enable word swap on a DWORD during AHB write from AES / HASH block      4=Swap 32-bit doublewords in 128-byte blocks      3=Swap doublewords in 64-byte blocks. Useful for SHA-256. Bus references issued in the order 0x3C, 0x38, 0x34, 0x30, 0x2C,      0x28, 0x24, 0x20, 0x1C, 0x18, 0x14, 0x10, 0xC, 0x8, 0x4, 0x0,...      2=Swap doublewords in 16-byte blocks. Useful for AES. Bus references issued in the order 0xC, 0x8, 0x4, 0x0, 0x1C, 0x18,...      1=Swap doublewords in 8-byte blocks. Useful for SHA-512, which works on 64-bit words. Bus references issued in the order 0x4,      0x0, 0xC, 0x8, ...      0=Disable.</description>
                     <bitOffset>5</bitOffset>
                     <bitWidth>3</bitWidth>
                     <enumeratedValues>
                        <name>OP_BLK_SWAP_ENSelect</name>
                        <enumeratedValue>
                           <name>SWAP_128_BYTE_BLOCK</name>
                           <description>4=Swap 32-bit doublewords in 128-byte blocks </description>
                           <value>0x4</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>SWAP_64_BYTE_BLOCK</name>
                           <description>3=Swap doublewords in 64-byte blocks. Useful for SHA-256. Bus references issued in the order 0x3C, 0x38, 0x34, 0x30, 0x2C,\n          0x28, 0x24, 0x20, 0x1C, 0x18, 0x14, 0x10, 0xC, 0x8, 0x4, 0x0,...</description>
                           <value>0x3</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>SWAP_16_BYTE_BLOCK</name>
                           <description>2=Swap doublewords in 16-byte blocks. Useful for AES. Bus references issued in the order 0xC, 0x8, 0x4, 0x0, 0x1C, 0x18,...</description>
                           <value>0x2</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>SWAP_8_BYTE_BLOCK</name>
                           <description>1=Swap doublewords in 8-byte blocks. Useful for SHA-512, which works on 64-bit words. Bus references issued in the order 0x4,\n       0x0, 0xC, 0x8, ...\n</description>
                           <value>0x1</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>DIS</name>
                           <description>0=Disable.</description>
                           <value>0x0</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
               </fields>
            </register>
            <register>
               <name>PECI_DIS</name>
               <description>PECI Disable</description>
               <addressOffset>0x40</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>P_DIS</name>
                     <description>When this bit is asserted ('1'), it disables the PECI pads to reduce leakage.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>STAP_TMIR</name>
               <description>This register is a mirror of the Boot Control Register.\n</description>
               <addressOffset>0x4C</addressOffset>
               <size>32</size>
               <access>read-only</access>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>QA_MODE</name>
                     <description>This is the mirror of the QA_MODE (bit 0) of Boot Control Register.\n         This register bit tells BOOT ROM to enter the QA mode.\n</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>VLD_MODE</name>
                     <description>This is the mirror of the Validation MODE (bit 1) of Boot Control Register.\n         This register bit tells BOOT ROM to enter the Validation mode.\n</description>
                     <bitOffset>1</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>BS_STATUS</name>
                     <description>This register bit tells BOOT ROM about the Boundary Scan Status.\n</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>INT_SPI_RECOV</name>
                     <description>This register bit tells BOOT ROM that SPI FLASH Recovery Mode is entered.\n</description>
                     <bitOffset>3</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>BROM_STS</name>
               <description>This register contains the VTR Reset Status for BOOT ROM.\n</description>
               <addressOffset>0x54</addressOffset>
               <size>8</size>
               <resetValue>0x01</resetValue>
               <fields>
                  <field>
                     <name>VTR_RST_STS</name>
                     <description>This bit contains the RESET_SYS Status for BOOT ROM usage.\n         1= RESET_SYS event occured.\n         0= RESET_SYS event did not occured.\n         This registe is R/W1C (read / write 1 to clear).</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>WDT_EVT</name>
                     <description>This bit contains the WDT Event Status for BOOT ROM usage.\n         1= WDT event occured.\n         0= WDT event did not occured.\n         This registe is R/W1C (read / write 1 to clear).</description>
                     <bitOffset>1</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>CRYPTO_SRST</name>
               <description>System Shutdown Reset</description>
               <addressOffset>0x5C</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>RNG</name>
                     <description>When this bit is asserted ('1'), the Random Number Generator block is reset.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>PUB_KEY</name>
                     <description>When this bit is asserted ('1'), the Public Key block is reset.</description>
                     <bitOffset>1</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>AES_HASH</name>
                     <description>When this bit is asserted ('1'), the AES and Hash blocks are reset.</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>GPIO_BANK_PWR</name>
               <description>GPIO Bank Power Register</description>
               <addressOffset>0x64</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>TEST</name>
                     <description>This bit must be programmed to 0h for proper operation of the device.\n</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>VTR_LVL2</name>
                     <description>Voltage value on VTR2. This bit is set by Firmware after a VTR Power On Reset.\n         It must be set by software if the VTR power rail is not active when RESET_SYS is de-asserted.\n         Write access is determined by bit 7.\n      1=VTR2 is powered by 1.8V\n      0=VTR2 is powered by 3.3V.</description>
                     <bitOffset>1</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>VTR_LVL3</name>
                     <description>Voltage value on VTR3. This bit is set by hardware after a VTR Power On Reset, but may be overridden by software.\n      It must be set by software if the VTR power rail is not active when RESET_SYS is de-asserted. Write access is determined by bit 7.\n      1=VTR3 is powered by 1.8V\n      0=VTR3 is powered by 3.3V.</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>GPIO_BANK_PWR_LOCK</name>
                     <description>GPIO Bank Power Lock. 0: VTR_LEVEL bits[2:0] and GPIO Bank Power Lock bit are R/W\n      1 = VTR_LEVEL bits[2:0] and GPIO Bank Power Lock bit are Read Only.</description>
                     <bitOffset>7</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>JTAG_MCFG</name>
               <description>JTAG Master Configuration Register</description>
               <addressOffset>0x70</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>JTM_CLK</name>
                     <description>This field determines the JTAG Master clock rate, derived from the 48MHz master clock.      7=375KHz; 6=750KHz; 5=1.5Mhz; 4=3Mhz; 3=6Mhz; 2=12Mhz; 1=24MHz; 0=Reserved.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>3</bitWidth>
                     <enumeratedValues>
                        <name>JTM_CLKSelect</name>
                        <enumeratedValue>
                           <name>JTM_CLK_375KHz</name>
                           <description>7=375KHz</description>
                           <value>0x7</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>JTM_CLK_750KHz</name>
                           <description>6=750KHz</description>
                           <value>0x6</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>JTM_CLK_1MHz</name>
                           <description>5=1.5Mhz</description>
                           <value>0x5</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>JTM_CLK_3Mhz</name>
                           <description>4=3Mhz</description>
                           <value>0x4</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>JTM_CLK_6Mhz</name>
                           <description>3=6Mhz</description>
                           <value>0x3</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>JTM_CLK_12Mhz</name>
                           <description>2=12Mhz</description>
                           <value>0x2</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>JTM_CLK_24MHz</name>
                           <description>1=24MHz</description>
                           <value>0x1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>MAS_SLV</name>
                     <description>This bit controls the direction of the JTAG port. 1=The JTAG Port is configured as a Master\n      0=The JTAG Port is configures as a Slave.</description>
                     <bitOffset>3</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>JTAG_MSTS</name>
               <description>JTAG Master Status Register</description>
               <addressOffset>0x74</addressOffset>
               <size>32</size>
               <access>read-only</access>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>JTM_DONE</name>
                     <description>This bit is set to '1b' when the JTAG Master Command Register is written. It becomes '0b' when shifting has completed.\n      Software can poll this bit to determine when a command has completed and it is therefore safe to remove the data in the JTAG Master TDO\n      Register and load new data into the JTAG Master TMS Register and the JTAG Master TDI Register.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>JTAG_MTDO</name>
               <description>JTAG Master TDO Register</description>
               <addressOffset>0x78</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>JTM_TDO</name>
                     <description>When the JTAG Master Command Register is written, from 1 to 32 bits are shifted into this register, starting with bit 0,\n      from the JTAG_TDO pin. Shifting is at the rate determined by the JTM_CLK field in the JTAG Master Configuration Register.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>32</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>JTAG_MTDI</name>
               <description>JTAG Master TDI Register</description>
               <addressOffset>0x7C</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>JTM_TDI</name>
                     <description>When the JTAG Master Command Register is written, from 1 to 32 bits are shifted out of this register, starting with bit 0,\n      onto the JTAG_TDI pin. Shifting is at the rate determined by the JTM_CLK field in the JTAG Master Configuration Register.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>32</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>JTAG_MTMS</name>
               <description>JTAG Master TMS Register</description>
               <addressOffset>0x80</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>JTM_TMS</name>
                     <description>When the JTAG Master Command Register is written, from 1 to 32 bits are shifted out of this register, starting with bit 0,\n      onto the JTAG_TMS pin. Shifting is at the rate determined by the JTM_CLK field in the JTAG Master Configuration Register.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>32</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>JTAG_MCMD</name>
               <description>JTAG Master Command Register</description>
               <addressOffset>0x84</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>JTM_COUNT</name>
                     <description>If the JTAG Port is configured as a Master, writing this register starts clocking and shifting on the JTAG port. The JTAG\n      Master port will shift JTM_COUNT+1 times, so writing a '0h' will shift 1 bit, and writing '31h' will shift 32 bits. The signal JTAG_CLK\n      will cycle JTM_COUNT+1 times. The contents of the JTAG Master TMS Register and the JTAG Master TDI Register will be shifted out on\n      the falling edge of JTAG_CLK and the.JTAG Master TDO Register will get shifted in on the rising edge of JTAG_CLK.\n      If the JTAG Port is configured as a Slave, writing this register has no effect.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>5</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>FW_SCR0</name>
               <description>BOOT ROM Scratch 0 Register</description>
               <addressOffset>0x180</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>SCR0</name>
                     <description>This field has no functionality other than storage. This register is aliased to  ESPI Config Scratch Register.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>32</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>FW_SCR1</name>
               <description>BOOT ROM Scratch 1 Register</description>
               <addressOffset>0x184</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>SCR1</name>
                     <description>This field has no functionality other than storage. This register is aliased to  ESPI Config Scratch Register.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>32</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>FW_SCR2</name>
               <description>BOOT ROM Scratch 2 Register</description>
               <addressOffset>0x188</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>SCR2</name>
                     <description>This field has no functionality other than storage. This register is aliased to  ESPI Config Scratch Register.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>32</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>FW_SCR3</name>
               <description>BOOT ROM Scratch 3 Register</description>
               <addressOffset>0x18C</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>SCR3</name>
                     <description>This field has no functionality other than storage. This register is aliased to  ESPI Config Scratch Register.</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>32</bitWidth>
                  </field>
               </fields>
            </register>
         </registers>
      </peripheral>
      <peripheral>
         <name>OTP</name>
         <version>961.0</version>
         <description>OTP Programming registers.\n</description>
         <groupName>OTP</groupName>
         <prependToName>OTP_</prependToName>
         <baseAddress>0x40082000</baseAddress>
         <addressBlock>
            <offset>0</offset>
            <size>0x1</size>
            <usage>reserved</usage>
         </addressBlock>
         <interrupt>
            <name>GIRQ20</name>
            <value>12</value>
         </interrupt>
      </peripheral>
      <peripheral>
         <name>NVIC</name>
         <description>Nested Vectored Interrupt Controller</description>
         <groupName>NVIC</groupName>
         <prependToName>NVIC_</prependToName>
         <baseAddress>0xE000E100</baseAddress>
         <addressBlock>
            <offset>0</offset>
            <size>0xE04</size>
            <usage>registers</usage>
         </addressBlock>
         <registers>
            <register>
               <dim>1</dim>
               <dimIncrement>4</dimIncrement>
               <name>ISER[%s]</name>
               <description>Interrupt Set Enable Register</description>
               <addressOffset>0x0</addressOffset>
               <size>32</size>
               <resetValue>0</resetValue>
               <fields>
                  <field>
                     <name>SETENA</name>
                     <description>Interrupt set enable bits</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>32</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <dim>1</dim>
               <dimIncrement>4</dimIncrement>
               <name>ICER[%s]</name>
               <description>Interrupt Clear Enable Register</description>
               <addressOffset>0x80</addressOffset>
               <size>32</size>
               <resetValue>0</resetValue>
               <fields>
                  <field>
                     <name>CLRENA</name>
                     <description>Interrupt clear-enable bits</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>32</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <dim>1</dim>
               <dimIncrement>4</dimIncrement>
               <name>ISPR[%s]</name>
               <description>Interrupt Set Pending Register</description>
               <addressOffset>0x100</addressOffset>
               <size>32</size>
               <resetValue>0</resetValue>
               <fields>
                  <field>
                     <name>SETPEND</name>
                     <description>Interrupt set-pending bits</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>32</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <dim>1</dim>
               <dimIncrement>4</dimIncrement>
               <name>ICPR[%s]</name>
               <description>Interrupt Clear Pending Register</description>
               <addressOffset>0x180</addressOffset>
               <size>32</size>
               <resetValue>0</resetValue>
               <fields>
                  <field>
                     <name>CLRPEND</name>
                     <description>Interrupt clear-pending bits</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>32</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <dim>1</dim>
               <dimIncrement>4</dimIncrement>
               <name>IABR[%s]</name>
               <description>Interrupt Active Bit Register</description>
               <addressOffset>0x200</addressOffset>
               <size>32</size>
               <resetValue>0</resetValue>
               <fields>
                  <field>
                     <name>ACTIVE</name>
                     <description>Interrupt active bits</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>32</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <dim>8</dim>
               <dimIncrement>1</dimIncrement>
               <name>IP[%s]</name>
               <description>Interrupt Priority Register n</description>
               <addressOffset>0x300</addressOffset>
               <size>8</size>
               <resetValue>0</resetValue>
               <fields>
                  <field>
                     <name>PRI0</name>
                     <description>Priority of interrupt n</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>3</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>STIR</name>
               <description>Software Trigger Interrupt Register</description>
               <addressOffset>0xE00</addressOffset>
               <size>32</size>
               <access>write-only</access>
               <fields>
                  <field>
                     <name>INTID</name>
                     <description>Interrupt ID to trigger</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>9</bitWidth>
                  </field>
               </fields>
            </register>
         </registers>
      </peripheral>
      <peripheral>
         <name>SysTick</name>
         <description>System timer</description>
         <groupName>SysTick</groupName>
         <prependToName>SysTick_</prependToName>
         <baseAddress>0xE000E010</baseAddress>
         <addressBlock>
            <offset>0</offset>
            <size>0x10</size>
            <usage>registers</usage>
         </addressBlock>
         <registers>
            <register>
               <name>CSR</name>
               <description>SysTick Control and Status Register</description>
               <addressOffset>0x0</addressOffset>
               <size>32</size>
               <resetValue>0x00000000</resetValue>
               <fields>
                  <field>
                     <name>ENABLE</name>
                     <description>SysTick Counter Enable</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <name>ENABLESelect</name>
                        <enumeratedValue>
                           <name>VALUE_0</name>
                           <description>Counter disabled</description>
                           <value>0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>VALUE_1</name>
                           <description>Counter enabled</description>
                           <value>1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>TICKINT</name>
                     <description>SysTick Exception Request Enable</description>
                     <bitOffset>1</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <name>TICKINTSelect</name>
                        <enumeratedValue>
                           <name>VALUE_0</name>
                           <description>Counting down to 0 does not assert the SysTick exception request</description>
                           <value>0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>VALUE_1</name>
                           <description>Counting down to 0 asserts the SysTick exception request</description>
                           <value>1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>CLKSOURCE</name>
                     <description>Clock Source 0=external, 1=processor</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <name>CLKSOURCESelect</name>
                        <enumeratedValue>
                           <name>VALUE_0</name>
                           <description>External clock</description>
                           <value>0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>VALUE_1</name>
                           <description>Processor clock</description>
                           <value>1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>COUNTFLAG</name>
                     <description>Timer counted to 0 since last read of register</description>
                     <bitOffset>16</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>RVR</name>
               <description>SysTick Reload Value Register</description>
               <addressOffset>0x4</addressOffset>
               <size>32</size>
               <fields>
                  <field>
                     <name>RELOAD</name>
                     <description>Value to load into the SysTick Current Value Register when the counter reaches 0</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>24</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>CVR</name>
               <description>SysTick Current Value Register</description>
               <addressOffset>0x8</addressOffset>
               <size>32</size>
               <fields>
                  <field>
                     <name>CURRENT</name>
                     <description>Current value at the time the register is accessed</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>24</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>CALIB</name>
               <description>SysTick Calibration Value Register</description>
               <addressOffset>0xC</addressOffset>
               <size>32</size>
               <access>read-only</access>
               <resetValue>0</resetValue>
               <fields>
                  <field>
                     <name>TENMS</name>
                     <description>Reload value to use for 10ms timing</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>24</bitWidth>
                  </field>
                  <field>
                     <name>SKEW</name>
                     <description>TENMS is rounded from non-integer ratio</description>
                     <bitOffset>30</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <name>SKEWSelect</name>
                        <enumeratedValue>
                           <name>VALUE_0</name>
                           <description>10ms calibration value is exact</description>
                           <value>0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>VALUE_1</name>
                           <description>10ms calibration value is inexact, because of the clock frequency</description>
                           <value>1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>NOREF</name>
                     <description>No Separate Reference Clock</description>
                     <bitOffset>31</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <name>NOREFSelect</name>
                        <enumeratedValue>
                           <name>VALUE_0</name>
                           <description>The reference clock is provided</description>
                           <value>0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>VALUE_1</name>
                           <description>The reference clock is not provided</description>
                           <value>1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
               </fields>
            </register>
         </registers>
      </peripheral>
      <peripheral>
         <name>SystemControl</name>
         <description>System Control Registers</description>
         <groupName>SystemControl</groupName>
         <prependToName>SystemControl_</prependToName>
         <baseAddress>0xE000E000</baseAddress>
         <addressBlock>
            <offset>0</offset>
            <size>0xD8C</size>
            <usage>registers</usage>
         </addressBlock>
         <registers>
            <register>
               <name>ICTR</name>
               <description>Interrupt Controller Type Register</description>
               <addressOffset>0x4</addressOffset>
               <size>32</size>
               <access>read-only</access>
               <fields>
                  <field>
                     <name>INTLINESNUM</name>
                     <bitOffset>0</bitOffset>
                     <bitWidth>4</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>ACTLR</name>
               <description>Auxiliary Control Register</description>
               <addressOffset>0x8</addressOffset>
               <size>32</size>
               <fields>
                  <field>
                     <name>DISMCYCINT</name>
                     <description>Disable interruption of LDM/STM instructions</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>DISDEFWBUF</name>
                     <description>Disable wruite buffer use during default memory map accesses</description>
                     <bitOffset>1</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>DISFOLD</name>
                     <description>Disable IT folding</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>DISFPCA</name>
                     <description>Disable automatic update of CONTROL.FPCA</description>
                     <bitOffset>8</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>DISOOFP</name>
                     <description>Disable out-of-order FP instructions</description>
                     <bitOffset>9</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>CPUID</name>
               <description>CPUID Base Register</description>
               <addressOffset>0xD00</addressOffset>
               <size>32</size>
               <access>read-only</access>
               <resetValue>0x410FC241</resetValue>
               <fields>
                  <field>
                     <name>REVISION</name>
                     <description>Processor revision number</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>4</bitWidth>
                  </field>
                  <field>
                     <name>PARTNO</name>
                     <description>Process Part Number, 0xC24=Cortex-M4</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>12</bitWidth>
                  </field>
                  <field>
                     <name>CONSTANT</name>
                     <description>Constant</description>
                     <bitOffset>16</bitOffset>
                     <bitWidth>4</bitWidth>
                  </field>
                  <field>
                     <name>VARIANT</name>
                     <description>Variant number</description>
                     <bitOffset>20</bitOffset>
                     <bitWidth>4</bitWidth>
                  </field>
                  <field>
                     <name>IMPLEMENTER</name>
                     <description>Implementer code, 0x41=ARM</description>
                     <bitOffset>24</bitOffset>
                     <bitWidth>8</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>ICSR</name>
               <description>Interrupt Control and State Register</description>
               <addressOffset>0xD04</addressOffset>
               <size>32</size>
               <resetValue>0</resetValue>
               <fields>
                  <field>
                     <name>VECTACTIVE</name>
                     <description>Active exception number</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>9</bitWidth>
                  </field>
                  <field>
                     <name>RETTOBASE</name>
                     <description>No preempted active exceptions to execute</description>
                     <bitOffset>11</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>VECTPENDING</name>
                     <description>Exception number of the highest priority pending enabled exception</description>
                     <bitOffset>12</bitOffset>
                     <bitWidth>6</bitWidth>
                  </field>
                  <field>
                     <name>ISRPENDING</name>
                     <description>Interrupt pending flag</description>
                     <bitOffset>22</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>ISRPREEMPT</name>
                     <description>Debug only</description>
                     <bitOffset>23</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>PENDSTCLR</name>
                     <description>SysTick clear-pending bit</description>
                     <bitOffset>25</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <name>PENDSTCLRSelect</name>
                        <enumeratedValue>
                           <name>VALUE_0</name>
                           <description>No effect</description>
                           <value>0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>VALUE_1</name>
                           <description>Removes the pending state from the SysTick exception</description>
                           <value>1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>PENDSTSET</name>
                     <description>SysTick set-pending bit</description>
                     <bitOffset>26</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <name>PENDSTSETSelect</name>
                        <enumeratedValue>
                           <name>VALUE_0</name>
                           <description>Write: no effect; read: SysTick exception is not pending</description>
                           <value>0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>VALUE_1</name>
                           <description>Write: changes SysTick exception state to pending; read: SysTick exception is pending</description>
                           <value>1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>PENDSVCLR</name>
                     <description>PendSV clear-pending bit</description>
                     <bitOffset>27</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <name>PENDSVCLRSelect</name>
                        <enumeratedValue>
                           <name>VALUE_0</name>
                           <description>No effect</description>
                           <value>0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>VALUE_1</name>
                           <description>Removes the pending state from the PendSV exception</description>
                           <value>1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>PENDSVSET</name>
                     <description>PendSV set-pending bit</description>
                     <bitOffset>28</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <name>PENDSVSETSelect</name>
                        <enumeratedValue>
                           <name>VALUE_0</name>
                           <description>Write: no effect; read: PendSV exception is not pending</description>
                           <value>0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>VALUE_1</name>
                           <description>Write: changes PendSV exception state to pending; read: PendSV exception is pending</description>
                           <value>1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>NMIPENDSET</name>
                     <description>NMI set-pending bit</description>
                     <bitOffset>31</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <name>NMIPENDSETSelect</name>
                        <enumeratedValue>
                           <name>VALUE_0</name>
                           <description>Write: no effect; read: NMI exception is not pending</description>
                           <value>0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>VALUE_1</name>
                           <description>Write: changes NMI exception state to pending; read: NMI exception is pending</description>
                           <value>1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
               </fields>
            </register>
            <register>
               <name>AIRCR</name>
               <description>Application Interrupt and Reset Control Register</description>
               <addressOffset>0xD0C</addressOffset>
               <size>32</size>
               <resetValue>0xFA050000</resetValue>
               <fields>
                  <field>
                     <name>VECTRESET</name>
                     <description>Must write 0</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>VECTCLRACTIVE</name>
                     <description>Must write 0</description>
                     <bitOffset>1</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>SYSRESETREQ</name>
                     <description>System Reset Request</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <name>SYSRESETREQSelect</name>
                        <enumeratedValue>
                           <name>VALUE_0</name>
                           <description>No system reset request</description>
                           <value>0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>VALUE_1</name>
                           <description>Asserts a signal to the outer system that requests a reset</description>
                           <value>1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>PRIGROUP</name>
                     <description>Interrupt priority grouping</description>
                     <bitOffset>8</bitOffset>
                     <bitWidth>3</bitWidth>
                  </field>
                  <field>
                     <name>ENDIANNESS</name>
                     <description>Data endianness, 0=little, 1=big</description>
                     <bitOffset>15</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <name>ENDIANNESSSelect</name>
                        <enumeratedValue>
                           <name>VALUE_0</name>
                           <description>Little-endian</description>
                           <value>0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>VALUE_1</name>
                           <description>Big-endian</description>
                           <value>1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>VECTKEY</name>
                     <description>Register key</description>
                     <bitOffset>16</bitOffset>
                     <bitWidth>16</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>SCR</name>
               <description>System Control Register</description>
               <addressOffset>0xD10</addressOffset>
               <size>32</size>
               <resetValue>0</resetValue>
               <fields>
                  <field>
                     <name>SLEEPONEXIT</name>
                     <description>Sleep-on-exit on handler return</description>
                     <bitOffset>1</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <name>SLEEPONEXITSelect</name>
                        <enumeratedValue>
                           <name>VALUE_0</name>
                           <description>Do not sleep when returning to Thread mode</description>
                           <value>0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>VALUE_1</name>
                           <description>Enter sleep, or deep sleep, on return from an ISR</description>
                           <value>1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>SLEEPDEEP</name>
                     <description>Deep Sleep used as low power mode</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <name>SLEEPDEEPSelect</name>
                        <enumeratedValue>
                           <name>VALUE_0</name>
                           <description>Sleep</description>
                           <value>0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>VALUE_1</name>
                           <description>Deep sleep</description>
                           <value>1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>SEVONPEND</name>
                     <description>Send Event on Pending bit</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <name>SEVONPENDSelect</name>
                        <enumeratedValue>
                           <name>VALUE_0</name>
                           <description>Only enabled interrupts or events can wakeup the processor, disabled interrupts are excluded</description>
                           <value>0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>VALUE_1</name>
                           <description>Enabled events and all interrupts, including disabled interrupts, can wakeup the processor</description>
                           <value>1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
               </fields>
            </register>
            <register>
               <name>CCR</name>
               <description>Configuration and Control Register</description>
               <addressOffset>0xD14</addressOffset>
               <size>32</size>
               <resetValue>0x00000200</resetValue>
               <fields>
                  <field>
                     <name>NONBASETHRDENA</name>
                     <description>Indicates how processor enters Thread mode</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>USERSETMPEND</name>
                     <description>Enables unprivileged software access to STIR register</description>
                     <bitOffset>1</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>UNALIGN_TRP</name>
                     <description>Enables unaligned access traps</description>
                     <bitOffset>3</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <name>UNALIGN_TRPSelect</name>
                        <enumeratedValue>
                           <name>VALUE_0</name>
                           <description>Do not trap unaligned halfword and word accesses</description>
                           <value>0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>VALUE_1</name>
                           <description>Trap unaligned halfword and word accesses</description>
                           <value>1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>DIV_0_TRP</name>
                     <description>Enables divide by 0 trap</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>BFHFNMIGN</name>
                     <description>Ignore LDM/STM BusFault for -1/-2 priority handlers</description>
                     <bitOffset>8</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>STKALIGN</name>
                     <description>Indicates stack alignment on exception entry</description>
                     <bitOffset>9</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <name>STKALIGNSelect</name>
                        <enumeratedValue>
                           <name>VALUE_0</name>
                           <description>4-byte aligned</description>
                           <value>0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>VALUE_1</name>
                           <description>8-byte aligned</description>
                           <value>1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
               </fields>
            </register>
            <register>
               <name>SHPR1</name>
               <description>System Handler Priority Register 1</description>
               <addressOffset>0xD18</addressOffset>
               <size>32</size>
               <fields>
                  <field>
                     <name>PRI_4</name>
                     <description>Priority of system handler 4, MemManage</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>8</bitWidth>
                  </field>
                  <field>
                     <name>PRI_5</name>
                     <description>Priority of system handler 5, BusFault</description>
                     <bitOffset>8</bitOffset>
                     <bitWidth>8</bitWidth>
                  </field>
                  <field>
                     <name>PRI_6</name>
                     <description>Priority of system handler 6, UsageFault</description>
                     <bitOffset>16</bitOffset>
                     <bitWidth>8</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>SHPR2</name>
               <description>System Handler Priority Register 2</description>
               <addressOffset>0xD1C</addressOffset>
               <size>32</size>
               <resetValue>0</resetValue>
               <fields>
                  <field>
                     <name>PRI_11</name>
                     <description>Priority of system handler 11, SVCall</description>
                     <bitOffset>24</bitOffset>
                     <bitWidth>8</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>SHPR3</name>
               <description>System Handler Priority Register 3</description>
               <addressOffset>0xD20</addressOffset>
               <size>32</size>
               <resetValue>0</resetValue>
               <fields>
                  <field>
                     <name>PRI_14</name>
                     <description>Priority of system handler 14, PendSV</description>
                     <bitOffset>16</bitOffset>
                     <bitWidth>8</bitWidth>
                  </field>
                  <field>
                     <name>PRI_15</name>
                     <description>Priority of system handler 15, SysTick exception</description>
                     <bitOffset>24</bitOffset>
                     <bitWidth>8</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>SHCSR</name>
               <description>System Handler Control and State Register</description>
               <addressOffset>0xD24</addressOffset>
               <size>32</size>
               <fields>
                  <field>
                     <name>MEMFAULTACT</name>
                     <description>MemManage exception active bit</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>BUSFAULTACT</name>
                     <description>BusFault exception active bit</description>
                     <bitOffset>1</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>USGFAULTACT</name>
                     <description>UsageFault exception active bit</description>
                     <bitOffset>3</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>SVCALLACT</name>
                     <description>SVCall active bit</description>
                     <bitOffset>7</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>MONITORACT</name>
                     <description>DebugMonitor exception active bit</description>
                     <bitOffset>8</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>PENDSVACT</name>
                     <description>PendSV exception active bit</description>
                     <bitOffset>10</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>SYSTICKACT</name>
                     <description>SysTick exception active bit</description>
                     <bitOffset>11</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>USGFAULTPENDED</name>
                     <description>UsageFault exception pending bit</description>
                     <bitOffset>12</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>MEMFAULTPENDED</name>
                     <description>MemManage exception pending bit</description>
                     <bitOffset>13</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>BUSFAULTPENDED</name>
                     <description>BusFault exception pending bit</description>
                     <bitOffset>14</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>SVCALLPENDED</name>
                     <description>SVCall pending bit</description>
                     <bitOffset>15</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>MEMFAULTENA</name>
                     <description>MemManage enable bit</description>
                     <bitOffset>16</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>BUSFAULTENA</name>
                     <description>BusFault enable bit</description>
                     <bitOffset>17</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>USGFAULTENA</name>
                     <description>UsageFault enable bit</description>
                     <bitOffset>18</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>CFSR</name>
               <description>Configurable Fault Status Register</description>
               <addressOffset>0xD28</addressOffset>
               <size>32</size>
               <fields>
                  <field>
                     <name>IACCVIOL</name>
                     <description>Instruction access violation</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>DACCVIOL</name>
                     <description>Data access violation</description>
                     <bitOffset>1</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>MUNSTKERR</name>
                     <description>MemManage Fault on unstacking for exception return</description>
                     <bitOffset>3</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>MSTKERR</name>
                     <description>MemManage Fault on stacking for exception entry</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>MLSPERR</name>
                     <description>MemManager Fault occured during FP lazy state preservation</description>
                     <bitOffset>5</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>MMARVALID</name>
                     <description>MemManage Fault Address Register valid</description>
                     <bitOffset>7</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>IBUSERR</name>
                     <description>Instruction bus error</description>
                     <bitOffset>8</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>PRECISERR</name>
                     <description>Precise data bus error</description>
                     <bitOffset>9</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>IMPRECISERR</name>
                     <description>Imprecise data bus error</description>
                     <bitOffset>10</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>UNSTKERR</name>
                     <description>BusFault on unstacking for exception return</description>
                     <bitOffset>11</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>STKERR</name>
                     <description>BusFault on stacking for exception entry</description>
                     <bitOffset>12</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>LSPERR</name>
                     <description>BusFault occured during FP lazy state preservation</description>
                     <bitOffset>13</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>BFARVALID</name>
                     <description>BusFault Address Register valid</description>
                     <bitOffset>15</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>UNDEFINSTR</name>
                     <description>Undefined instruction UsageFault</description>
                     <bitOffset>16</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>INVSTATE</name>
                     <description>Invalid state UsageFault</description>
                     <bitOffset>17</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>INVPC</name>
                     <description>Invalid PC load UsageFault</description>
                     <bitOffset>18</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>NOCP</name>
                     <description>No coprocessor UsageFault</description>
                     <bitOffset>19</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>UNALIGNED</name>
                     <description>Unaligned access UsageFault</description>
                     <bitOffset>24</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>DIVBYZERO</name>
                     <description>Divide by zero UsageFault</description>
                     <bitOffset>25</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>HFSR</name>
               <description>HardFault Status Register</description>
               <addressOffset>0xD2C</addressOffset>
               <size>32</size>
               <fields>
                  <field>
                     <name>VECTTBL</name>
                     <description>BusFault on a Vector Table read during exception processing</description>
                     <bitOffset>1</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>FORCED</name>
                     <description>Forced Hard Fault</description>
                     <bitOffset>30</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>DEBUGEVT</name>
                     <description>Debug: always write 0</description>
                     <bitOffset>31</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>DFSR</name>
               <description>Debug Fault Status Register</description>
               <addressOffset>0xD30</addressOffset>
               <size>32</size>
               <fields>
                  <field>
                     <name>HALTED</name>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>BKPT</name>
                     <bitOffset>1</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>DWTTRAP</name>
                     <bitOffset>2</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>VCATCH</name>
                     <bitOffset>3</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>EXTERNAL</name>
                     <bitOffset>4</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>MMFAR</name>
               <description>MemManage Fault Address Register</description>
               <addressOffset>0xD34</addressOffset>
               <size>32</size>
               <fields>
                  <field>
                     <name>ADDRESS</name>
                     <description>Address that generated the MemManage fault</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>32</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>BFAR</name>
               <description>BusFault Address Register</description>
               <addressOffset>0xD38</addressOffset>
               <size>32</size>
               <fields>
                  <field>
                     <name>ADDRESS</name>
                     <description>Address that generated the BusFault</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>32</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>AFSR</name>
               <description>Auxiliary Fault Status Register</description>
               <addressOffset>0xD3C</addressOffset>
               <size>32</size>
               <fields>
                  <field>
                     <name>IMPDEF</name>
                     <description>AUXFAULT input signals</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>32</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <dim>2</dim>
               <dimIncrement>4</dimIncrement>
               <name>PFR[%s]</name>
               <description>Processor Feature Register</description>
               <addressOffset>0xD40</addressOffset>
               <size>32</size>
            </register>
            <register>
               <name>DFR</name>
               <description>Debug Feature Register</description>
               <addressOffset>0xD48</addressOffset>
               <size>32</size>
               <access>read-only</access>
            </register>
            <register>
               <name>ADR</name>
               <description>Auxiliary Feature Register</description>
               <addressOffset>0xD4C</addressOffset>
               <size>32</size>
               <access>read-only</access>
            </register>
            <register>
               <dim>4</dim>
               <dimIncrement>4</dimIncrement>
               <name>MMFR[%s]</name>
               <description>Memory Model Feature Register</description>
               <addressOffset>0xD50</addressOffset>
               <size>32</size>
               <access>read-only</access>
            </register>
            <register>
               <dim>5</dim>
               <dimIncrement>4</dimIncrement>
               <name>ISAR[%s]</name>
               <description>Instruction Set Attributes Register</description>
               <addressOffset>0xD60</addressOffset>
               <size>32</size>
               <access>read-only</access>
            </register>
            <register>
               <name>CPACR</name>
               <description>Coprocessor Access Control Register</description>
               <addressOffset>0xD88</addressOffset>
               <size>32</size>
               <fields>
                  <field>
                     <name>CP10</name>
                     <description>Access privileges for coprocessor 10</description>
                     <bitOffset>20</bitOffset>
                     <bitWidth>2</bitWidth>
                     <enumeratedValues>
                        <name>CP10Select</name>
                        <enumeratedValue>
                           <name>DENIED</name>
                           <description>Access denied</description>
                           <value>0x0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>PRIV</name>
                           <description>Privileged access only</description>
                           <value>0x1</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>FULL</name>
                           <description>Full access</description>
                           <value>0x3</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>CP11</name>
                     <description>Access privileges for coprocessor 11</description>
                     <bitOffset>22</bitOffset>
                     <bitWidth>2</bitWidth>
                     <enumeratedValues>
                        <name>CP11Select</name>
                        <enumeratedValue>
                           <name>DENIED</name>
                           <description>Access denied</description>
                           <value>0x0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>PRIV</name>
                           <description>Privileged access only</description>
                           <value>0x1</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>FULL</name>
                           <description>Full access</description>
                           <value>0x3</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
               </fields>
            </register>
         </registers>
      </peripheral>
   </peripherals>
</device>
